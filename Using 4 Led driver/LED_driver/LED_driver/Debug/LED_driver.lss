
LED_driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000afe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000202  00800060  00000afe  00000b92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002d6  00800262  00800262  00000d94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dc4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000e00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000016c0  00000000  00000000  00000e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e1  00000000  00000000  00002538  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000806  00000000  00000000  00002e19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000118  00000000  00000000  00003620  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083f  00000000  00000000  00003738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d1  00000000  00000000  00003f77  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00004548  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
   4:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__vector_1>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
  54:	33 05       	cpc	r19, r3

00000056 <__ctors_end>:
  56:	11 24       	eor	r1, r1
  58:	1f be       	out	0x3f, r1	; 63
  5a:	cf e5       	ldi	r28, 0x5F	; 95
  5c:	d8 e0       	ldi	r29, 0x08	; 8
  5e:	de bf       	out	0x3e, r29	; 62
  60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
  62:	12 e0       	ldi	r17, 0x02	; 2
  64:	a0 e6       	ldi	r26, 0x60	; 96
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	ee ef       	ldi	r30, 0xFE	; 254
  6a:	fa e0       	ldi	r31, 0x0A	; 10
  6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
  6e:	05 90       	lpm	r0, Z+
  70:	0d 92       	st	X+, r0
  72:	a2 36       	cpi	r26, 0x62	; 98
  74:	b1 07       	cpc	r27, r17
  76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
  78:	25 e0       	ldi	r18, 0x05	; 5
  7a:	a2 e6       	ldi	r26, 0x62	; 98
  7c:	b2 e0       	ldi	r27, 0x02	; 2
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a8 33       	cpi	r26, 0x38	; 56
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	cb e2       	ldi	r28, 0x2B	; 43
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
  90:	21 97       	sbiw	r28, 0x01	; 1
  92:	fe 01       	movw	r30, r28
  94:	0e 94 77 05 	call	0xaee	; 0xaee <__tablejump2__>
  98:	ca 32       	cpi	r28, 0x2A	; 42
  9a:	d1 07       	cpc	r29, r17
  9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
  9e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <main>
  a2:	0c 94 7d 05 	jmp	0xafa	; 0xafa <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z8SPI_initv>:
		// Set column pins based on display data
		COL_PORT = display[row];
		// Delay to control display refresh rate
		_delay_ms(1);
	}
}
  aa:	87 b3       	in	r24, 0x17	; 23
  ac:	80 6a       	ori	r24, 0xA0	; 160
  ae:	87 bb       	out	0x17, r24	; 23
  b0:	81 e5       	ldi	r24, 0x51	; 81
  b2:	8d b9       	out	0x0d, r24	; 13
  b4:	08 95       	ret

000000b6 <_Z8SPI_sendh>:
  b6:	8f b9       	out	0x0f, r24	; 15
  b8:	77 9b       	sbis	0x0e, 7	; 14
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <_Z8SPI_sendh+0x2>
  bc:	08 95       	ret

000000be <_Z12MAX7219_sendhh>:
  be:	cf 93       	push	r28
  c0:	df 93       	push	r29
  c2:	d8 2f       	mov	r29, r24
  c4:	c6 2f       	mov	r28, r22
  c6:	c4 98       	cbi	0x18, 4	; 24
  c8:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8SPI_sendh>
  cc:	8c 2f       	mov	r24, r28
  ce:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8SPI_sendh>
  d2:	8d 2f       	mov	r24, r29
  d4:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8SPI_sendh>
  d8:	8c 2f       	mov	r24, r28
  da:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8SPI_sendh>
  de:	8d 2f       	mov	r24, r29
  e0:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8SPI_sendh>
  e4:	8c 2f       	mov	r24, r28
  e6:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8SPI_sendh>
  ea:	8d 2f       	mov	r24, r29
  ec:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8SPI_sendh>
  f0:	8c 2f       	mov	r24, r28
  f2:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8SPI_sendh>
  f6:	c4 9a       	sbi	0x18, 4	; 24
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	08 95       	ret

000000fe <_Z13MAX7219_send2hh>:
  fe:	cf 93       	push	r28
 100:	c6 2f       	mov	r28, r22
 102:	c4 98       	cbi	0x18, 4	; 24
 104:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8SPI_sendh>
 108:	8c 2f       	mov	r24, r28
 10a:	0e 94 5b 00 	call	0xb6	; 0xb6 <_Z8SPI_sendh>
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <_Z13deSelect_Loadv>:
 112:	c4 9a       	sbi	0x18, 4	; 24
 114:	08 95       	ret

00000116 <_Z11initMAX7219v>:
 116:	60 e0       	ldi	r22, 0x00	; 0
 118:	89 e0       	ldi	r24, 0x09	; 9
 11a:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z12MAX7219_sendhh>
 11e:	6f e0       	ldi	r22, 0x0F	; 15
 120:	8a e0       	ldi	r24, 0x0A	; 10
 122:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z12MAX7219_sendhh>
 126:	67 e0       	ldi	r22, 0x07	; 7
 128:	8b e0       	ldi	r24, 0x0B	; 11
 12a:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z12MAX7219_sendhh>
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	8c e0       	ldi	r24, 0x0C	; 12
 132:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z12MAX7219_sendhh>
 136:	08 95       	ret

00000138 <_Z9init_pinsv>:
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	81 bb       	out	0x11, r24	; 17
 13c:	87 bb       	out	0x17, r24	; 23
 13e:	8c ef       	ldi	r24, 0xFC	; 252
 140:	8a bb       	out	0x1a, r24	; 26
 142:	81 b3       	in	r24, 0x11	; 17
 144:	8c 7f       	andi	r24, 0xFC	; 252
 146:	81 bb       	out	0x11, r24	; 17
 148:	82 b3       	in	r24, 0x12	; 18
 14a:	83 60       	ori	r24, 0x03	; 3
 14c:	82 bb       	out	0x12, r24	; 18
 14e:	08 95       	ret

00000150 <_Z14update_bulletsv>:
bool prev_left_shoot = true, prev_right_shoot = true;
bool left_shoot, right_shoot;

// Update bullet positions

void update_bullets(){
 150:	cf 93       	push	r28
 152:	df 93       	push	r29

	// Read button inputs
	left_shoot = PIND & (1 << LEFT_SHOOT_PIN);
 154:	80 b3       	in	r24, 0x10	; 16
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	38 2f       	mov	r19, r24
 15a:	31 70       	andi	r19, 0x01	; 1
 15c:	80 ff       	sbrs	r24, 0
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 05 05 	sts	0x0505, r25	; 0x800505 <left_shoot>
	right_shoot = PIND & (1 << RIGHT_SHOOT_PIN);
 164:	20 b3       	in	r18, 0x10	; 16
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	62 2f       	mov	r22, r18
 16a:	62 70       	andi	r22, 0x02	; 2
 16c:	21 ff       	sbrs	r18, 1
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	80 93 04 05 	sts	0x0504, r24	; 0x800504 <right_shoot>

    // Fire bullets when buttons are pressed
    if (!(prev_left_shoot) && left_shoot) {
 174:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <prev_left_shoot>
 178:	21 11       	cpse	r18, r1
 17a:	38 c0       	rjmp	.+112    	; 0x1ec <_Z14update_bulletsv+0x9c>
 17c:	33 23       	and	r19, r19
 17e:	b1 f1       	breq	.+108    	; 0x1ec <_Z14update_bulletsv+0x9c>
         // Find an inactive bullet slot
        for (int i = 0; i < MAX_BULLETS; i++) {
            if (!bullets[i].active) {
 180:	20 91 0a 05 	lds	r18, 0x050A	; 0x80050a <bullets+0x4>
 184:	30 91 0b 05 	lds	r19, 0x050B	; 0x80050b <bullets+0x5>
 188:	23 2b       	or	r18, r19
 18a:	49 f0       	breq	.+18     	; 0x19e <_Z14update_bulletsv+0x4e>
 18c:	e6 e0       	ldi	r30, 0x06	; 6
 18e:	f5 e0       	ldi	r31, 0x05	; 5
	right_shoot = PIND & (1 << RIGHT_SHOOT_PIN);

    // Fire bullets when buttons are pressed
    if (!(prev_left_shoot) && left_shoot) {
         // Find an inactive bullet slot
        for (int i = 0; i < MAX_BULLETS; i++) {
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	30 e0       	ldi	r19, 0x00	; 0
            if (!bullets[i].active) {
 194:	42 85       	ldd	r20, Z+10	; 0x0a
 196:	53 85       	ldd	r21, Z+11	; 0x0b
 198:	45 2b       	or	r20, r21
 19a:	11 f5       	brne	.+68     	; 0x1e0 <_Z14update_bulletsv+0x90>
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <_Z14update_bulletsv+0x52>
 19e:	20 e0       	ldi	r18, 0x00	; 0
 1a0:	30 e0       	ldi	r19, 0x00	; 0
                // Activate the bullet
                bullets[i].row = 15; 
 1a2:	f9 01       	movw	r30, r18
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	df 01       	movw	r26, r30
 1aa:	a2 0f       	add	r26, r18
 1ac:	b3 1f       	adc	r27, r19
 1ae:	aa 0f       	add	r26, r26
 1b0:	bb 1f       	adc	r27, r27
 1b2:	aa 5f       	subi	r26, 0xFA	; 250
 1b4:	ba 4f       	sbci	r27, 0xFA	; 250
 1b6:	4f e0       	ldi	r20, 0x0F	; 15
 1b8:	50 e0       	ldi	r21, 0x00	; 0
 1ba:	11 96       	adiw	r26, 0x01	; 1
 1bc:	5c 93       	st	X, r21
 1be:	4e 93       	st	-X, r20
                bullets[i].col = paddle.position - 2; 
 1c0:	40 91 26 05 	lds	r20, 0x0526	; 0x800526 <paddle>
 1c4:	50 91 27 05 	lds	r21, 0x0527	; 0x800527 <paddle+0x1>
 1c8:	42 50       	subi	r20, 0x02	; 2
 1ca:	51 09       	sbc	r21, r1
 1cc:	13 96       	adiw	r26, 0x03	; 3
 1ce:	5c 93       	st	X, r21
 1d0:	4e 93       	st	-X, r20
 1d2:	12 97       	sbiw	r26, 0x02	; 2
                bullets[i].active = 1;
 1d4:	fd 01       	movw	r30, r26
 1d6:	21 e0       	ldi	r18, 0x01	; 1
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	35 83       	std	Z+5, r19	; 0x05
 1dc:	24 83       	std	Z+4, r18	; 0x04
                break;
 1de:	06 c0       	rjmp	.+12     	; 0x1ec <_Z14update_bulletsv+0x9c>
	right_shoot = PIND & (1 << RIGHT_SHOOT_PIN);

    // Fire bullets when buttons are pressed
    if (!(prev_left_shoot) && left_shoot) {
         // Find an inactive bullet slot
        for (int i = 0; i < MAX_BULLETS; i++) {
 1e0:	2f 5f       	subi	r18, 0xFF	; 255
 1e2:	3f 4f       	sbci	r19, 0xFF	; 255
 1e4:	36 96       	adiw	r30, 0x06	; 6
 1e6:	25 30       	cpi	r18, 0x05	; 5
 1e8:	31 05       	cpc	r19, r1
 1ea:	a1 f6       	brne	.-88     	; 0x194 <_Z14update_bulletsv+0x44>
                break;
            }
        }
    }

    if (!(prev_right_shoot) && right_shoot) {
 1ec:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1f0:	21 11       	cpse	r18, r1
 1f2:	38 c0       	rjmp	.+112    	; 0x264 <_Z14update_bulletsv+0x114>
 1f4:	66 23       	and	r22, r22
 1f6:	b1 f1       	breq	.+108    	; 0x264 <_Z14update_bulletsv+0x114>
        for (int i = 0; i < MAX_BULLETS; i++) {
            if (!bullets[i].active) {
 1f8:	20 91 0a 05 	lds	r18, 0x050A	; 0x80050a <bullets+0x4>
 1fc:	30 91 0b 05 	lds	r19, 0x050B	; 0x80050b <bullets+0x5>
 200:	23 2b       	or	r18, r19
 202:	49 f0       	breq	.+18     	; 0x216 <_Z14update_bulletsv+0xc6>
 204:	e6 e0       	ldi	r30, 0x06	; 6
 206:	f5 e0       	ldi	r31, 0x05	; 5
            }
        }
    }

    if (!(prev_right_shoot) && right_shoot) {
        for (int i = 0; i < MAX_BULLETS; i++) {
 208:	21 e0       	ldi	r18, 0x01	; 1
 20a:	30 e0       	ldi	r19, 0x00	; 0
            if (!bullets[i].active) {
 20c:	42 85       	ldd	r20, Z+10	; 0x0a
 20e:	53 85       	ldd	r21, Z+11	; 0x0b
 210:	45 2b       	or	r20, r21
 212:	11 f5       	brne	.+68     	; 0x258 <_Z14update_bulletsv+0x108>
 214:	02 c0       	rjmp	.+4      	; 0x21a <_Z14update_bulletsv+0xca>
 216:	20 e0       	ldi	r18, 0x00	; 0
 218:	30 e0       	ldi	r19, 0x00	; 0
                // Activate the bullet
                bullets[i].row = 15;
 21a:	f9 01       	movw	r30, r18
 21c:	ee 0f       	add	r30, r30
 21e:	ff 1f       	adc	r31, r31
 220:	df 01       	movw	r26, r30
 222:	a2 0f       	add	r26, r18
 224:	b3 1f       	adc	r27, r19
 226:	aa 0f       	add	r26, r26
 228:	bb 1f       	adc	r27, r27
 22a:	aa 5f       	subi	r26, 0xFA	; 250
 22c:	ba 4f       	sbci	r27, 0xFA	; 250
 22e:	4f e0       	ldi	r20, 0x0F	; 15
 230:	50 e0       	ldi	r21, 0x00	; 0
 232:	11 96       	adiw	r26, 0x01	; 1
 234:	5c 93       	st	X, r21
 236:	4e 93       	st	-X, r20
                bullets[i].col = paddle.position + 2; 
 238:	40 91 26 05 	lds	r20, 0x0526	; 0x800526 <paddle>
 23c:	50 91 27 05 	lds	r21, 0x0527	; 0x800527 <paddle+0x1>
 240:	4e 5f       	subi	r20, 0xFE	; 254
 242:	5f 4f       	sbci	r21, 0xFF	; 255
 244:	13 96       	adiw	r26, 0x03	; 3
 246:	5c 93       	st	X, r21
 248:	4e 93       	st	-X, r20
 24a:	12 97       	sbiw	r26, 0x02	; 2
                bullets[i].active = 1;
 24c:	fd 01       	movw	r30, r26
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	30 e0       	ldi	r19, 0x00	; 0
 252:	35 83       	std	Z+5, r19	; 0x05
 254:	24 83       	std	Z+4, r18	; 0x04
                break;
 256:	06 c0       	rjmp	.+12     	; 0x264 <_Z14update_bulletsv+0x114>
            }
        }
    }

    if (!(prev_right_shoot) && right_shoot) {
        for (int i = 0; i < MAX_BULLETS; i++) {
 258:	2f 5f       	subi	r18, 0xFF	; 255
 25a:	3f 4f       	sbci	r19, 0xFF	; 255
 25c:	36 96       	adiw	r30, 0x06	; 6
 25e:	25 30       	cpi	r18, 0x05	; 5
 260:	31 05       	cpc	r19, r1
 262:	a1 f6       	brne	.-88     	; 0x20c <_Z14update_bulletsv+0xbc>
                bullets[i].active = 1;
                break;
            }
        }
    }
	prev_left_shoot = left_shoot;
 264:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <prev_left_shoot>
	prev_right_shoot = right_shoot;
 268:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 26c:	e6 e0       	ldi	r30, 0x06	; 6
 26e:	f5 e0       	ldi	r31, 0x05	; 5
 270:	24 e2       	ldi	r18, 0x24	; 36
 272:	35 e0       	ldi	r19, 0x05	; 5

	// Update bullet positions
	for (int i = 0; i < MAX_BULLETS; i++) {
        if (bullets[i].active) {
 274:	84 81       	ldd	r24, Z+4	; 0x04
 276:	95 81       	ldd	r25, Z+5	; 0x05
 278:	89 2b       	or	r24, r25
 27a:	71 f1       	breq	.+92     	; 0x2d8 <_Z14update_bulletsv+0x188>

            // Move the bullet upwards
            bullets[i].row--;
 27c:	80 81       	ld	r24, Z
 27e:	91 81       	ldd	r25, Z+1	; 0x01
 280:	01 97       	sbiw	r24, 0x01	; 1
 282:	91 83       	std	Z+1, r25	; 0x01
 284:	80 83       	st	Z, r24

            // Check if bullet reached the top or hit a brick
            if (bullets[i].row < 0) {
 286:	99 23       	and	r25, r25
 288:	1c f4       	brge	.+6      	; 0x290 <_Z14update_bulletsv+0x140>
                bullets[i].active = 0;
 28a:	15 82       	std	Z+5, r1	; 0x05
 28c:	14 82       	std	Z+4, r1	; 0x04
				continue;
 28e:	24 c0       	rjmp	.+72     	; 0x2d8 <_Z14update_bulletsv+0x188>
            } 
			else if (bricks[bullets[i].row][bullets[i].col]) {
 290:	42 81       	ldd	r20, Z+2	; 0x02
 292:	53 81       	ldd	r21, Z+3	; 0x03
 294:	dc 01       	movw	r26, r24
 296:	a2 95       	swap	r26
 298:	b2 95       	swap	r27
 29a:	b0 7f       	andi	r27, 0xF0	; 240
 29c:	ba 27       	eor	r27, r26
 29e:	a0 7f       	andi	r26, 0xF0	; 240
 2a0:	ba 27       	eor	r27, r26
 2a2:	a4 0f       	add	r26, r20
 2a4:	b5 1f       	adc	r27, r21
 2a6:	aa 0f       	add	r26, r26
 2a8:	bb 1f       	adc	r27, r27
 2aa:	ae 59       	subi	r26, 0x9E	; 158
 2ac:	bf 4f       	sbci	r27, 0xFF	; 255
 2ae:	6d 91       	ld	r22, X+
 2b0:	7c 91       	ld	r23, X
 2b2:	67 2b       	or	r22, r23
 2b4:	89 f0       	breq	.+34     	; 0x2d8 <_Z14update_bulletsv+0x188>
				bricks[bullets[i].row][bullets[i].col] = 0;
 2b6:	82 95       	swap	r24
 2b8:	92 95       	swap	r25
 2ba:	90 7f       	andi	r25, 0xF0	; 240
 2bc:	98 27       	eor	r25, r24
 2be:	80 7f       	andi	r24, 0xF0	; 240
 2c0:	98 27       	eor	r25, r24
 2c2:	84 0f       	add	r24, r20
 2c4:	95 1f       	adc	r25, r21
 2c6:	dc 01       	movw	r26, r24
 2c8:	aa 0f       	add	r26, r26
 2ca:	bb 1f       	adc	r27, r27
 2cc:	ae 59       	subi	r26, 0x9E	; 158
 2ce:	bf 4f       	sbci	r27, 0xFF	; 255
 2d0:	1d 92       	st	X+, r1
 2d2:	1c 92       	st	X, r1
				bullets[i].active = 0;
 2d4:	15 82       	std	Z+5, r1	; 0x05
 2d6:	14 82       	std	Z+4, r1	; 0x04
 2d8:	36 96       	adiw	r30, 0x06	; 6
    }
	prev_left_shoot = left_shoot;
	prev_right_shoot = right_shoot;

	// Update bullet positions
	for (int i = 0; i < MAX_BULLETS; i++) {
 2da:	e2 17       	cp	r30, r18
 2dc:	f3 07       	cpc	r31, r19
 2de:	51 f6       	brne	.-108    	; 0x274 <_Z14update_bulletsv+0x124>
				bricks[bullets[i].row][bullets[i].col] = 0;
				bullets[i].active = 0;
			}
        }
    }
}
 2e0:	df 91       	pop	r29
 2e2:	cf 91       	pop	r28
 2e4:	08 95       	ret

000002e6 <main>:
} display;



int main()
{
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
 2ee:	2a 97       	sbiw	r28, 0x0a	; 10
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	f8 94       	cli
 2f4:	de bf       	out	0x3e, r29	; 62
 2f6:	0f be       	out	0x3f, r0	; 63
 2f8:	cd bf       	out	0x3d, r28	; 61
	init_pins();
 2fa:	0e 94 9c 00 	call	0x138	; 0x138 <_Z9init_pinsv>

	// LED DRIVER FROM HERE
	// Initialize SPI communication
	SPI_init();
 2fe:	0e 94 55 00 	call	0xaa	; 0xaa <_Z8SPI_initv>

	// Set LOAD_PIN as output
	DDRB |= (1 << LOAD_PIN);
 302:	bc 9a       	sbi	0x17, 4	; 23
	// Set LOAD_PIN high (deSelect MAX7219 modules)
	PORTB |= (1 << LOAD_PIN);
 304:	c4 9a       	sbi	0x18, 4	; 24

	// Initialize MAX7219 drivers
	initMAX7219();
 306:	0e 94 8b 00 	call	0x116	; 0x116 <_Z11initMAX7219v>
	bool prev_left_button = false, prev_right_button = false;
	bool left_button, right_button;

	int ball_counter = 0; // for slowing down the ball movement

	GICR |= 1 << INT0;
 30a:	8b b7       	in	r24, 0x3b	; 59
 30c:	80 64       	ori	r24, 0x40	; 64
 30e:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= 1 << ISC00;
 310:	85 b7       	in	r24, 0x35	; 53
 312:	81 60       	ori	r24, 0x01	; 1
 314:	85 bf       	out	0x35, r24	; 53

	sei();
 316:	78 94       	sei

	// Initialize bullets
    for (int i = 0; i < MAX_BULLETS; i++) {
        bullets[i].active = 0; // Bullet is inactive initially
 318:	e6 e0       	ldi	r30, 0x06	; 6
 31a:	f5 e0       	ldi	r31, 0x05	; 5
 31c:	15 82       	std	Z+5, r1	; 0x05
 31e:	14 82       	std	Z+4, r1	; 0x04
 320:	13 86       	std	Z+11, r1	; 0x0b
 322:	12 86       	std	Z+10, r1	; 0x0a
 324:	11 8a       	std	Z+17, r1	; 0x11
 326:	10 8a       	std	Z+16, r1	; 0x10
 328:	17 8a       	std	Z+23, r1	; 0x17
 32a:	16 8a       	std	Z+22, r1	; 0x16
 32c:	15 8e       	std	Z+29, r1	; 0x1d
 32e:	14 8e       	std	Z+28, r1	; 0x1c
 330:	1c 82       	std	Y+4, r1	; 0x04
 332:	1b 82       	std	Y+3, r1	; 0x03
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
				col_dir = 0;
			}
			else if (col > paddle.position)
			{
				row_dir = -1;
				col_dir = 1;
 338:	22 24       	eor	r2, r2
 33a:	23 94       	inc	r2
 33c:	31 2c       	mov	r3, r1
 33e:	0f 2e       	mov	r0, r31
 340:	f4 e2       	ldi	r31, 0x24	; 36
 342:	4f 2e       	mov	r4, r31
 344:	f5 e0       	ldi	r31, 0x05	; 5
 346:	5f 2e       	mov	r5, r31
 348:	f0 2d       	mov	r31, r0

	// Main game loop
	while (1)
	{
		// Read button inputs
		left_button = PINA & (1 << LEFT_BUTTON_PIN);
 34a:	89 b3       	in	r24, 0x19	; 25
 34c:	31 e0       	ldi	r19, 0x01	; 1
 34e:	3f 83       	std	Y+7, r19	; 0x07
 350:	48 2f       	mov	r20, r24
 352:	41 70       	andi	r20, 0x01	; 1
 354:	80 ff       	sbrs	r24, 0
 356:	1f 82       	std	Y+7, r1	; 0x07
		right_button = PINA & (1 << RIGHT_BUTTON_PIN);
 358:	89 b3       	in	r24, 0x19	; 25
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	68 87       	std	Y+8, r22	; 0x08
 35e:	38 2f       	mov	r19, r24
 360:	32 70       	andi	r19, 0x02	; 2
 362:	81 ff       	sbrs	r24, 1
 364:	18 86       	std	Y+8, r1	; 0x08

		// paddle movement
		if (!prev_left_button && left_button)
 366:	91 11       	cpse	r25, r1
 368:	1f c0       	rjmp	.+62     	; 0x3a8 <main+0xc2>
 36a:	44 23       	and	r20, r20
 36c:	e9 f0       	breq	.+58     	; 0x3a8 <main+0xc2>
		row = wall.down;
	}

	int left()
	{
		return position - size / 2;
 36e:	a6 e2       	ldi	r26, 0x26	; 38
 370:	b5 e0       	ldi	r27, 0x05	; 5
 372:	4d 91       	ld	r20, X+
 374:	5c 91       	ld	r21, X
		return position + size / 2;
	}

	void goleft()
	{
		if (left() > wall.left)
 376:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <paddle+0x2>
 37a:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <paddle+0x3>
 37e:	99 23       	and	r25, r25
 380:	0c f4       	brge	.+2      	; 0x384 <main+0x9e>
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	95 95       	asr	r25
 386:	87 95       	ror	r24
 388:	ba 01       	movw	r22, r20
 38a:	68 1b       	sub	r22, r24
 38c:	79 0b       	sbc	r23, r25
 38e:	ec e2       	ldi	r30, 0x2C	; 44
 390:	f5 e0       	ldi	r31, 0x05	; 5
 392:	80 81       	ld	r24, Z
 394:	91 81       	ldd	r25, Z+1	; 0x01
 396:	86 17       	cp	r24, r22
 398:	97 07       	cpc	r25, r23
 39a:	34 f4       	brge	.+12     	; 0x3a8 <main+0xc2>
		position--;
 39c:	41 50       	subi	r20, 0x01	; 1
 39e:	51 09       	sbc	r21, r1
 3a0:	a6 e2       	ldi	r26, 0x26	; 38
 3a2:	b5 e0       	ldi	r27, 0x05	; 5
 3a4:	4d 93       	st	X+, r20
 3a6:	5c 93       	st	X, r21
		right_button = PINA & (1 << RIGHT_BUTTON_PIN);

		// paddle movement
		if (!prev_left_button && left_button)
			paddle.goleft(); // raising edge
		if (!prev_right_button && right_button)
 3a8:	21 11       	cpse	r18, r1
 3aa:	1e c0       	rjmp	.+60     	; 0x3e8 <main+0x102>
 3ac:	33 23       	and	r19, r19
 3ae:	e1 f0       	breq	.+56     	; 0x3e8 <main+0x102>
	{
		return position - size / 2;
	}
	int right()
	{
		return position + size / 2;
 3b0:	e6 e2       	ldi	r30, 0x26	; 38
 3b2:	f5 e0       	ldi	r31, 0x05	; 5
 3b4:	20 81       	ld	r18, Z
 3b6:	31 81       	ldd	r19, Z+1	; 0x01
		if (left() > wall.left)
		position--;
	}
	void goright()
	{
		if (right() < wall.right)
 3b8:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <paddle+0x2>
 3bc:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <paddle+0x3>
 3c0:	99 23       	and	r25, r25
 3c2:	0c f4       	brge	.+2      	; 0x3c6 <main+0xe0>
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	95 95       	asr	r25
 3c8:	87 95       	ror	r24
 3ca:	82 0f       	add	r24, r18
 3cc:	93 1f       	adc	r25, r19
 3ce:	40 91 2e 05 	lds	r20, 0x052E	; 0x80052e <wall+0x2>
 3d2:	50 91 2f 05 	lds	r21, 0x052F	; 0x80052f <wall+0x3>
 3d6:	84 17       	cp	r24, r20
 3d8:	95 07       	cpc	r25, r21
 3da:	34 f4       	brge	.+12     	; 0x3e8 <main+0x102>
		position++;
 3dc:	2f 5f       	subi	r18, 0xFF	; 255
 3de:	3f 4f       	sbci	r19, 0xFF	; 255
 3e0:	a6 e2       	ldi	r26, 0x26	; 38
 3e2:	b5 e0       	ldi	r27, 0x05	; 5
 3e4:	2d 93       	st	X+, r18
 3e6:	3c 93       	st	X, r19


		

		// Update ball position
		ball_counter++;
 3e8:	eb 81       	ldd	r30, Y+3	; 0x03
 3ea:	fc 81       	ldd	r31, Y+4	; 0x04
 3ec:	31 96       	adiw	r30, 0x01	; 1
 3ee:	fc 83       	std	Y+4, r31	; 0x04
 3f0:	eb 83       	std	Y+3, r30	; 0x03
		if (ball_counter >= 5)
 3f2:	35 97       	sbiw	r30, 0x05	; 5
 3f4:	0c f4       	brge	.+2      	; 0x3f8 <main+0x112>
 3f6:	02 c1       	rjmp	.+516    	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
	{
		init();
	}

	int nextcol() { return col + col_dir ; }
	int nextrow() { return row + row_dir ; }
 3f8:	ac ef       	ldi	r26, 0xFC	; 252
 3fa:	b4 e0       	ldi	r27, 0x04	; 4
 3fc:	2d 91       	ld	r18, X+
 3fe:	3c 91       	ld	r19, X
 400:	11 97       	sbiw	r26, 0x01	; 1
 402:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <ball+0x4>
 406:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <ball+0x5>
 40a:	82 0f       	add	r24, r18
 40c:	93 1f       	adc	r25, r19
	void update()
	{
		row = nextrow();
 40e:	8d 93       	st	X+, r24
 410:	9c 93       	st	X, r25
	Ball()
	{
		init();
	}

	int nextcol() { return col + col_dir ; }
 412:	40 91 02 05 	lds	r20, 0x0502	; 0x800502 <ball+0x6>
 416:	50 91 03 05 	lds	r21, 0x0503	; 0x800503 <ball+0x7>
 41a:	20 91 fe 04 	lds	r18, 0x04FE	; 0x8004fe <ball+0x2>
 41e:	30 91 ff 04 	lds	r19, 0x04FF	; 0x8004ff <ball+0x3>
 422:	24 0f       	add	r18, r20
 424:	35 1f       	adc	r19, r21
	int nextrow() { return row + row_dir ; }
	void update()
	{
		row = nextrow();
		col = nextcol();
 426:	30 93 ff 04 	sts	0x04FF, r19	; 0x8004ff <ball+0x3>
 42a:	20 93 fe 04 	sts	0x04FE, r18	; 0x8004fe <ball+0x2>
	}

	void collision_check()
	{
		// Check for collision with walls
		if (row <= wall.up)
 42e:	60 91 30 05 	lds	r22, 0x0530	; 0x800530 <wall+0x4>
 432:	70 91 31 05 	lds	r23, 0x0531	; 0x800531 <wall+0x5>
 436:	68 17       	cp	r22, r24
 438:	79 07       	cpc	r23, r25
 43a:	24 f0       	brlt	.+8      	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
			row_dir = 1; // Reflect ball downwards
 43c:	30 92 01 05 	sts	0x0501, r3	; 0x800501 <ball+0x5>
 440:	20 92 00 05 	sts	0x0500, r2	; 0x800500 <ball+0x4>
		if (col <= wall.left || col >= wall.right)
 444:	ec e2       	ldi	r30, 0x2C	; 44
 446:	f5 e0       	ldi	r31, 0x05	; 5
 448:	60 81       	ld	r22, Z
 44a:	71 81       	ldd	r23, Z+1	; 0x01
 44c:	62 17       	cp	r22, r18
 44e:	73 07       	cpc	r23, r19
 450:	3c f4       	brge	.+14     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
 452:	60 91 2e 05 	lds	r22, 0x052E	; 0x80052e <wall+0x2>
 456:	70 91 2f 05 	lds	r23, 0x052F	; 0x80052f <wall+0x3>
 45a:	26 17       	cp	r18, r22
 45c:	37 07       	cpc	r19, r23
 45e:	3c f0       	brlt	.+14     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
			col_dir = -col_dir; // Reflect ball horizontally
 460:	51 95       	neg	r21
 462:	41 95       	neg	r20
 464:	51 09       	sbc	r21, r1
 466:	50 93 03 05 	sts	0x0503, r21	; 0x800503 <ball+0x7>
 46a:	40 93 02 05 	sts	0x0502, r20	; 0x800502 <ball+0x6>

		if (row >= wall.down + 7) //  reviving the ball (for testing only!)
 46e:	20 91 32 05 	lds	r18, 0x0532	; 0x800532 <wall+0x6>
 472:	30 91 33 05 	lds	r19, 0x0533	; 0x800533 <wall+0x7>
 476:	a9 01       	movw	r20, r18
 478:	49 5f       	subi	r20, 0xF9	; 249
 47a:	5f 4f       	sbci	r21, 0xFF	; 255
 47c:	84 17       	cp	r24, r20
 47e:	95 07       	cpc	r25, r21
 480:	c4 f0       	brlt	.+48     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
	int row, col;
	int row_dir, col_dir;

	void init()
	{
		row = wall.down+1;
 482:	2f 5f       	subi	r18, 0xFF	; 255
 484:	3f 4f       	sbci	r19, 0xFF	; 255
 486:	ac ef       	ldi	r26, 0xFC	; 252
 488:	b4 e0       	ldi	r27, 0x04	; 4
 48a:	2d 93       	st	X+, r18
 48c:	3c 93       	st	X, r19
		col = paddle.position;
 48e:	e6 e2       	ldi	r30, 0x26	; 38
 490:	f5 e0       	ldi	r31, 0x05	; 5
 492:	80 81       	ld	r24, Z
 494:	91 81       	ldd	r25, Z+1	; 0x01
 496:	90 93 ff 04 	sts	0x04FF, r25	; 0x8004ff <ball+0x3>
 49a:	80 93 fe 04 	sts	0x04FE, r24	; 0x8004fe <ball+0x2>
		row_dir = -1;
 49e:	2f ef       	ldi	r18, 0xFF	; 255
 4a0:	3f ef       	ldi	r19, 0xFF	; 255
 4a2:	30 93 01 05 	sts	0x0501, r19	; 0x800501 <ball+0x5>
 4a6:	20 93 00 05 	sts	0x0500, r18	; 0x800500 <ball+0x4>
		col_dir = 0;
 4aa:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <ball+0x7>
 4ae:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <ball+0x6>
	{
		init();
	}

	int nextcol() { return col + col_dir ; }
	int nextrow() { return row + row_dir ; }
 4b2:	ac ef       	ldi	r26, 0xFC	; 252
 4b4:	b4 e0       	ldi	r27, 0x04	; 4
 4b6:	2d 91       	ld	r18, X+
 4b8:	3c 91       	ld	r19, X

		// Check for collision with paddle
		// if ((ball.nextrow() == paddle.row) && ball.col >= paddle.left() && ball.col <= paddle.right()) {
		//     ball.row_dir = -1; // Reflect ball upwards
		// }
		if (nextrow() == paddle.row && col >= paddle.left() && col <= paddle.right())
 4ba:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <ball+0x4>
 4be:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <ball+0x5>
 4c2:	82 0f       	add	r24, r18
 4c4:	93 1f       	adc	r25, r19
 4c6:	40 91 2a 05 	lds	r20, 0x052A	; 0x80052a <paddle+0x4>
 4ca:	50 91 2b 05 	lds	r21, 0x052B	; 0x80052b <paddle+0x5>
 4ce:	84 17       	cp	r24, r20
 4d0:	95 07       	cpc	r25, r21
 4d2:	09 f0       	breq	.+2      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
 4d4:	45 c0       	rjmp	.+138    	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 4d6:	60 91 fe 04 	lds	r22, 0x04FE	; 0x8004fe <ball+0x2>
 4da:	70 91 ff 04 	lds	r23, 0x04FF	; 0x8004ff <ball+0x3>
		row = wall.down;
	}

	int left()
	{
		return position - size / 2;
 4de:	e6 e2       	ldi	r30, 0x26	; 38
 4e0:	f5 e0       	ldi	r31, 0x05	; 5
 4e2:	40 81       	ld	r20, Z
 4e4:	51 81       	ldd	r21, Z+1	; 0x01
 4e6:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <paddle+0x2>
 4ea:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <paddle+0x3>
 4ee:	99 23       	and	r25, r25
 4f0:	0c f4       	brge	.+2      	; 0x4f4 <__LOCK_REGION_LENGTH__+0xf4>
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	95 95       	asr	r25
 4f6:	87 95       	ror	r24

		// Check for collision with paddle
		// if ((ball.nextrow() == paddle.row) && ball.col >= paddle.left() && ball.col <= paddle.right()) {
		//     ball.row_dir = -1; // Reflect ball upwards
		// }
		if (nextrow() == paddle.row && col >= paddle.left() && col <= paddle.right())
 4f8:	fa 01       	movw	r30, r20
 4fa:	e8 1b       	sub	r30, r24
 4fc:	f9 0b       	sbc	r31, r25
 4fe:	6e 17       	cp	r22, r30
 500:	7f 07       	cpc	r23, r31
 502:	74 f1       	brlt	.+92     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
 504:	84 0f       	add	r24, r20
 506:	95 1f       	adc	r25, r21
 508:	86 17       	cp	r24, r22
 50a:	97 07       	cpc	r25, r23
 50c:	4c f1       	brlt	.+82     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
		{ // for more refine collision
			if (col < paddle.position)
 50e:	64 17       	cp	r22, r20
 510:	75 07       	cpc	r23, r21
 512:	5c f4       	brge	.+22     	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
			{
				row_dir = -1;
 514:	8f ef       	ldi	r24, 0xFF	; 255
 516:	9f ef       	ldi	r25, 0xFF	; 255
 518:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <ball+0x5>
 51c:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <ball+0x4>
				col_dir = -1;
 520:	90 93 03 05 	sts	0x0503, r25	; 0x800503 <ball+0x7>
 524:	80 93 02 05 	sts	0x0502, r24	; 0x800502 <ball+0x6>
 528:	1b c0       	rjmp	.+54     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
			}
			else if (col == paddle.position)
 52a:	64 17       	cp	r22, r20
 52c:	75 07       	cpc	r23, r21
 52e:	59 f4       	brne	.+22     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
			{
				row_dir = -1;
 530:	af ef       	ldi	r26, 0xFF	; 255
 532:	bf ef       	ldi	r27, 0xFF	; 255
 534:	b0 93 01 05 	sts	0x0501, r27	; 0x800501 <ball+0x5>
 538:	a0 93 00 05 	sts	0x0500, r26	; 0x800500 <ball+0x4>
				col_dir = 0;
 53c:	10 92 03 05 	sts	0x0503, r1	; 0x800503 <ball+0x7>
 540:	10 92 02 05 	sts	0x0502, r1	; 0x800502 <ball+0x6>
 544:	0d c0       	rjmp	.+26     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
			}
			else if (col > paddle.position)
 546:	46 17       	cp	r20, r22
 548:	57 07       	cpc	r21, r23
 54a:	54 f4       	brge	.+20     	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
			{
				row_dir = -1;
 54c:	ef ef       	ldi	r30, 0xFF	; 255
 54e:	ff ef       	ldi	r31, 0xFF	; 255
 550:	f0 93 01 05 	sts	0x0501, r31	; 0x800501 <ball+0x5>
 554:	e0 93 00 05 	sts	0x0500, r30	; 0x800500 <ball+0x4>
				col_dir = 1;
 558:	30 92 03 05 	sts	0x0503, r3	; 0x800503 <ball+0x7>
 55c:	20 92 02 05 	sts	0x0502, r2	; 0x800502 <ball+0x6>
	{
		init();
	}

	int nextcol() { return col + col_dir ; }
	int nextrow() { return row + row_dir ; }
 560:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <ball+0x4>
 564:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <ball+0x5>
 568:	28 0f       	add	r18, r24
 56a:	39 1f       	adc	r19, r25


		// collision with bricks
		int rw = nextrow();
		int cl = nextcol();
		if ((rw>=0 && rw<=15) && bricks[rw][cl])
 56c:	20 31       	cpi	r18, 0x10	; 16
 56e:	31 05       	cpc	r19, r1
 570:	08 f0       	brcs	.+2      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
 572:	3f c0       	rjmp	.+126    	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
	Ball()
	{
		init();
	}

	int nextcol() { return col + col_dir ; }
 574:	40 91 fe 04 	lds	r20, 0x04FE	; 0x8004fe <ball+0x2>
 578:	50 91 ff 04 	lds	r21, 0x04FF	; 0x8004ff <ball+0x3>
 57c:	80 91 02 05 	lds	r24, 0x0502	; 0x800502 <ball+0x6>
 580:	90 91 03 05 	lds	r25, 0x0503	; 0x800503 <ball+0x7>
 584:	84 0f       	add	r24, r20
 586:	95 1f       	adc	r25, r21


		// collision with bricks
		int rw = nextrow();
		int cl = nextcol();
		if ((rw>=0 && rw<=15) && bricks[rw][cl])
 588:	f9 01       	movw	r30, r18
 58a:	e2 95       	swap	r30
 58c:	f2 95       	swap	r31
 58e:	f0 7f       	andi	r31, 0xF0	; 240
 590:	fe 27       	eor	r31, r30
 592:	e0 7f       	andi	r30, 0xF0	; 240
 594:	fe 27       	eor	r31, r30
 596:	e8 0f       	add	r30, r24
 598:	f9 1f       	adc	r31, r25
 59a:	ee 0f       	add	r30, r30
 59c:	ff 1f       	adc	r31, r31
 59e:	ee 59       	subi	r30, 0x9E	; 158
 5a0:	ff 4f       	sbci	r31, 0xFF	; 255
 5a2:	40 81       	ld	r20, Z
 5a4:	51 81       	ldd	r21, Z+1	; 0x01
 5a6:	45 2b       	or	r20, r21
 5a8:	39 f1       	breq	.+78     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
		{
			PORTA |= 0b00000100;
 5aa:	da 9a       	sbi	0x1b, 2	; 27
			bricks[rw][cl] = 0;
 5ac:	f9 01       	movw	r30, r18
 5ae:	e2 95       	swap	r30
 5b0:	f2 95       	swap	r31
 5b2:	f0 7f       	andi	r31, 0xF0	; 240
 5b4:	fe 27       	eor	r31, r30
 5b6:	e0 7f       	andi	r30, 0xF0	; 240
 5b8:	fe 27       	eor	r31, r30
 5ba:	e8 0f       	add	r30, r24
 5bc:	f9 1f       	adc	r31, r25
 5be:	ee 0f       	add	r30, r30
 5c0:	ff 1f       	adc	r31, r31
 5c2:	ee 59       	subi	r30, 0x9E	; 158
 5c4:	ff 4f       	sbci	r31, 0xFF	; 255
 5c6:	11 82       	std	Z+1, r1	; 0x01
 5c8:	10 82       	st	Z, r1
			row_dir = - row_dir;
 5ca:	80 91 00 05 	lds	r24, 0x0500	; 0x800500 <ball+0x4>
 5ce:	90 91 01 05 	lds	r25, 0x0501	; 0x800501 <ball+0x5>
 5d2:	91 95       	neg	r25
 5d4:	81 95       	neg	r24
 5d6:	91 09       	sbc	r25, r1
 5d8:	90 93 01 05 	sts	0x0501, r25	; 0x800501 <ball+0x5>
 5dc:	80 93 00 05 	sts	0x0500, r24	; 0x800500 <ball+0x4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5e0:	81 ee       	ldi	r24, 0xE1	; 225
 5e2:	94 e0       	ldi	r25, 0x04	; 4
 5e4:	01 97       	sbiw	r24, 0x01	; 1
 5e6:	f1 f7       	brne	.-4      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
 5e8:	00 c0       	rjmp	.+0      	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
 5ea:	00 00       	nop
		{
			ball.update();

			ball.collision_check();

			ball_counter = 0;
 5ec:	1c 82       	std	Y+4, r1	; 0x04
 5ee:	1b 82       	std	Y+3, r1	; 0x03
 5f0:	05 c0       	rjmp	.+10     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5f2:	1c 82       	std	Y+4, r1	; 0x04
 5f4:	1b 82       	std	Y+3, r1	; 0x03
 5f6:	02 c0       	rjmp	.+4      	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
 5f8:	1c 82       	std	Y+4, r1	; 0x04
 5fa:	1b 82       	std	Y+3, r1	; 0x03

		}

		bullets_counter++;
 5fc:	80 91 24 05 	lds	r24, 0x0524	; 0x800524 <bullets_counter>
 600:	90 91 25 05 	lds	r25, 0x0525	; 0x800525 <bullets_counter+0x1>
 604:	01 96       	adiw	r24, 0x01	; 1
 606:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <bullets_counter+0x1>
 60a:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <bullets_counter>
		if(bullets_counter >= 3){
 60e:	03 97       	sbiw	r24, 0x03	; 3
 610:	34 f0       	brlt	.+12     	; 0x61e <__LOCK_REGION_LENGTH__+0x21e>
			update_bullets();
 612:	0e 94 a8 00 	call	0x150	; 0x150 <_Z14update_bulletsv>
			bullets_counter = 0;
 616:	10 92 25 05 	sts	0x0525, r1	; 0x800525 <bullets_counter+0x1>
 61a:	10 92 24 05 	sts	0x0524, r1	; 0x800524 <bullets_counter>
		for (int j = 0; j < cols; ++j)
		ara[i][j] = 0;
	}

	void bricks_in_display() {
		for (int i = 0; i < rows; ++i)
 61e:	a2 e6       	ldi	r26, 0x62	; 98
 620:	b2 e0       	ldi	r27, 0x02	; 2
 622:	8d 90       	ld	r8, X+
 624:	9c 90       	ld	r9, X
 626:	18 14       	cp	r1, r8
 628:	19 04       	cpc	r1, r9
 62a:	5c f5       	brge	.+86     	; 0x682 <__LOCK_REGION_LENGTH__+0x282>
		for (int j = 0; j < cols; ++j)
 62c:	00 91 64 02 	lds	r16, 0x0264	; 0x800264 <__data_end+0x2>
 630:	10 91 65 02 	lds	r17, 0x0265	; 0x800265 <__data_end+0x3>
 634:	42 e6       	ldi	r20, 0x62	; 98
 636:	50 e0       	ldi	r21, 0x00	; 0
 638:	ea e6       	ldi	r30, 0x6A	; 106
 63a:	f2 e0       	ldi	r31, 0x02	; 2
 63c:	78 01       	movw	r14, r16
 63e:	ee 0c       	add	r14, r14
 640:	ff 1c       	adc	r15, r15
 642:	60 e0       	ldi	r22, 0x00	; 0
 644:	70 e0       	ldi	r23, 0x00	; 0
 646:	fa 83       	std	Y+2, r31	; 0x02
 648:	e9 83       	std	Y+1, r30	; 0x01
 64a:	10 16       	cp	r1, r16
 64c:	11 06       	cpc	r1, r17
 64e:	6c f4       	brge	.+26     	; 0x66a <__LOCK_REGION_LENGTH__+0x26a>
 650:	9a 01       	movw	r18, r20
 652:	2e 0d       	add	r18, r14
 654:	3f 1d       	adc	r19, r15
 656:	a9 81       	ldd	r26, Y+1	; 0x01
 658:	ba 81       	ldd	r27, Y+2	; 0x02
 65a:	fa 01       	movw	r30, r20
		ara[i][j] = bricks[i][j];
 65c:	81 91       	ld	r24, Z+
 65e:	91 91       	ld	r25, Z+
 660:	8d 93       	st	X+, r24
 662:	9d 93       	st	X+, r25
		ara[i][j] = 0;
	}

	void bricks_in_display() {
		for (int i = 0; i < rows; ++i)
		for (int j = 0; j < cols; ++j)
 664:	e2 17       	cp	r30, r18
 666:	f3 07       	cpc	r31, r19
 668:	c9 f7       	brne	.-14     	; 0x65c <__LOCK_REGION_LENGTH__+0x25c>
		for (int j = 0; j < cols; ++j)
		ara[i][j] = 0;
	}

	void bricks_in_display() {
		for (int i = 0; i < rows; ++i)
 66a:	6f 5f       	subi	r22, 0xFF	; 255
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	40 5e       	subi	r20, 0xE0	; 224
 670:	5f 4f       	sbci	r21, 0xFF	; 255
 672:	e9 81       	ldd	r30, Y+1	; 0x01
 674:	fa 81       	ldd	r31, Y+2	; 0x02
 676:	b2 96       	adiw	r30, 0x22	; 34
 678:	fa 83       	std	Y+2, r31	; 0x02
 67a:	e9 83       	std	Y+1, r30	; 0x01
 67c:	68 15       	cp	r22, r8
 67e:	79 05       	cpc	r23, r9
 680:	21 f7       	brne	.-56     	; 0x64a <__LOCK_REGION_LENGTH__+0x24a>
		row = wall.down;
	}

	int left()
	{
		return position - size / 2;
 682:	a6 e2       	ldi	r26, 0x26	; 38
 684:	b5 e0       	ldi	r27, 0x05	; 5
 686:	4d 91       	ld	r20, X+
 688:	5c 91       	ld	r21, X
 68a:	80 91 28 05 	lds	r24, 0x0528	; 0x800528 <paddle+0x2>
 68e:	90 91 29 05 	lds	r25, 0x0529	; 0x800529 <paddle+0x3>
 692:	99 23       	and	r25, r25
 694:	0c f4       	brge	.+2      	; 0x698 <__LOCK_REGION_LENGTH__+0x298>
 696:	01 96       	adiw	r24, 0x01	; 1
 698:	9c 01       	movw	r18, r24
 69a:	35 95       	asr	r19
 69c:	27 95       	ror	r18
 69e:	ca 01       	movw	r24, r20
 6a0:	82 1b       	sub	r24, r18
 6a2:	93 0b       	sbc	r25, r19
	}
	int right()
	{
		return position + size / 2;
 6a4:	24 0f       	add	r18, r20
 6a6:	35 1f       	adc	r19, r21
		for (int i = 0; i < rows; ++i)
		for (int j = 0; j < cols; ++j)
		ara[i][j] = bricks[i][j];
	}
	void paddle_in_display() {
		for (int i = paddle.left(); i <= paddle.right(); ++i)
 6a8:	28 17       	cp	r18, r24
 6aa:	39 07       	cpc	r19, r25
 6ac:	bc f0       	brlt	.+46     	; 0x6dc <__LOCK_REGION_LENGTH__+0x2dc>
 6ae:	40 91 2a 05 	lds	r20, 0x052A	; 0x80052a <paddle+0x4>
 6b2:	50 91 2b 05 	lds	r21, 0x052B	; 0x80052b <paddle+0x5>
 6b6:	b1 e1       	ldi	r27, 0x11	; 17
 6b8:	b4 9f       	mul	r27, r20
 6ba:	f0 01       	movw	r30, r0
 6bc:	b5 9f       	mul	r27, r21
 6be:	f0 0d       	add	r31, r0
 6c0:	11 24       	eor	r1, r1
 6c2:	34 96       	adiw	r30, 0x04	; 4
 6c4:	e8 0f       	add	r30, r24
 6c6:	f9 1f       	adc	r31, r25
 6c8:	ee 0f       	add	r30, r30
 6ca:	ff 1f       	adc	r31, r31
 6cc:	ee 59       	subi	r30, 0x9E	; 158
 6ce:	fd 4f       	sbci	r31, 0xFD	; 253
		ara[paddle.row][i] = 1;
 6d0:	21 92       	st	Z+, r2
 6d2:	31 92       	st	Z+, r3
		for (int i = 0; i < rows; ++i)
		for (int j = 0; j < cols; ++j)
		ara[i][j] = bricks[i][j];
	}
	void paddle_in_display() {
		for (int i = paddle.left(); i <= paddle.right(); ++i)
 6d4:	01 96       	adiw	r24, 0x01	; 1
 6d6:	28 17       	cp	r18, r24
 6d8:	39 07       	cpc	r19, r25
 6da:	d4 f7       	brge	.-12     	; 0x6d0 <__LOCK_REGION_LENGTH__+0x2d0>
		ara[paddle.row][i] = 1;
	}
	void ball_in_display() {
		if (ball.row <= wall.down) ara[ball.row][ball.col] = 1;
 6dc:	ec ef       	ldi	r30, 0xFC	; 252
 6de:	f4 e0       	ldi	r31, 0x04	; 4
 6e0:	80 81       	ld	r24, Z
 6e2:	91 81       	ldd	r25, Z+1	; 0x01
 6e4:	20 91 32 05 	lds	r18, 0x0532	; 0x800532 <wall+0x6>
 6e8:	30 91 33 05 	lds	r19, 0x0533	; 0x800533 <wall+0x7>
 6ec:	28 17       	cp	r18, r24
 6ee:	39 07       	cpc	r19, r25
 6f0:	0c f4       	brge	.+2      	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
 6f2:	8b c1       	rjmp	.+790    	; 0xa0a <__stack+0x1ab>
 6f4:	21 e1       	ldi	r18, 0x11	; 17
 6f6:	28 9f       	mul	r18, r24
 6f8:	f0 01       	movw	r30, r0
 6fa:	29 9f       	mul	r18, r25
 6fc:	f0 0d       	add	r31, r0
 6fe:	11 24       	eor	r1, r1
 700:	80 91 fe 04 	lds	r24, 0x04FE	; 0x8004fe <ball+0x2>
 704:	90 91 ff 04 	lds	r25, 0x04FF	; 0x8004ff <ball+0x3>
 708:	e8 0f       	add	r30, r24
 70a:	f9 1f       	adc	r31, r25
 70c:	ee 0f       	add	r30, r30
 70e:	ff 1f       	adc	r31, r31
 710:	e6 59       	subi	r30, 0x96	; 150
 712:	fd 4f       	sbci	r31, 0xFD	; 253
 714:	31 82       	std	Z+1, r3	; 0x01
 716:	20 82       	st	Z, r2
 718:	78 c1       	rjmp	.+752    	; 0xa0a <__stack+0x1ab>
		}
	}

	void split() {
		// putting first 8*8 portion of display into split1
		for (int i = 0; i < splitrows; i++) {
 71a:	60 90 66 02 	lds	r6, 0x0266	; 0x800266 <__data_end+0x4>
 71e:	70 90 67 02 	lds	r7, 0x0267	; 0x800267 <__data_end+0x5>
 722:	16 14       	cp	r1, r6
 724:	17 04       	cpc	r1, r7
 726:	fc f0       	brlt	.+62     	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
 728:	8f c0       	rjmp	.+286    	; 0x848 <__LOCK_REGION_LENGTH__+0x448>
		if (ball.row <= wall.down) ara[ball.row][ball.col] = 1;
	}

	void bullet_in_display() {
		for (int i = 0; i < MAX_BULLETS; i++) {
			if (bullets[i].active && bullets[i].row>=0) {
 72a:	84 81       	ldd	r24, Z+4	; 0x04
 72c:	95 81       	ldd	r25, Z+5	; 0x05
 72e:	89 2b       	or	r24, r25
 730:	a9 f0       	breq	.+42     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
 732:	80 81       	ld	r24, Z
 734:	91 81       	ldd	r25, Z+1	; 0x01
 736:	99 23       	and	r25, r25
 738:	8c f0       	brlt	.+34     	; 0x75c <__LOCK_REGION_LENGTH__+0x35c>
				ara[bullets[i].row][bullets[i].col] = 1;
 73a:	31 e1       	ldi	r19, 0x11	; 17
 73c:	38 9f       	mul	r19, r24
 73e:	b0 01       	movw	r22, r0
 740:	39 9f       	mul	r19, r25
 742:	70 0d       	add	r23, r0
 744:	11 24       	eor	r1, r1
 746:	82 81       	ldd	r24, Z+2	; 0x02
 748:	93 81       	ldd	r25, Z+3	; 0x03
 74a:	db 01       	movw	r26, r22
 74c:	a8 0f       	add	r26, r24
 74e:	b9 1f       	adc	r27, r25
 750:	aa 0f       	add	r26, r26
 752:	bb 1f       	adc	r27, r27
 754:	a6 59       	subi	r26, 0x96	; 150
 756:	bd 4f       	sbci	r27, 0xFD	; 253
 758:	2d 92       	st	X+, r2
 75a:	3c 92       	st	X, r3
 75c:	36 96       	adiw	r30, 0x06	; 6
	void ball_in_display() {
		if (ball.row <= wall.down) ara[ball.row][ball.col] = 1;
	}

	void bullet_in_display() {
		for (int i = 0; i < MAX_BULLETS; i++) {
 75e:	4e 16       	cp	r4, r30
 760:	5f 06       	cpc	r5, r31
 762:	19 f7       	brne	.-58     	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
 764:	da cf       	rjmp	.-76     	; 0x71a <__LOCK_REGION_LENGTH__+0x31a>

	void split() {
		// putting first 8*8 portion of display into split1
		for (int i = 0; i < splitrows; i++) {
			split1[i] = 0;
			for (int j = 0; j < splitcols; j++) {
 766:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end+0x6>
 76a:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <__data_end+0x7>
 76e:	9a 83       	std	Y+2, r25	; 0x02
 770:	89 83       	std	Y+1, r24	; 0x01
 772:	ac ea       	ldi	r26, 0xAC	; 172
 774:	b4 e0       	ldi	r27, 0x04	; 4
 776:	6a e6       	ldi	r22, 0x6A	; 106
 778:	72 e0       	ldi	r23, 0x02	; 2
 77a:	53 01       	movw	r10, r6
 77c:	9b ed       	ldi	r25, 0xDB	; 219
 77e:	a9 1a       	sub	r10, r25
 780:	9e ef       	ldi	r25, 0xFE	; 254
 782:	b9 0a       	sbc	r11, r25
 784:	aa 0c       	add	r10, r10
 786:	bb 1c       	adc	r11, r11
 788:	f5 01       	movw	r30, r10
 78a:	ee 59       	subi	r30, 0x9E	; 158
 78c:	fd 4f       	sbci	r31, 0xFD	; 253
 78e:	7f 01       	movw	r14, r30
 790:	8d 01       	movw	r16, r26
	}

	void split() {
		// putting first 8*8 portion of display into split1
		for (int i = 0; i < splitrows; i++) {
			split1[i] = 0;
 792:	11 96       	adiw	r26, 0x01	; 1
 794:	1c 92       	st	X, r1
 796:	1e 92       	st	-X, r1
			for (int j = 0; j < splitcols; j++) {
 798:	89 81       	ldd	r24, Y+1	; 0x01
 79a:	9a 81       	ldd	r25, Y+2	; 0x02
 79c:	18 16       	cp	r1, r24
 79e:	19 06       	cpc	r1, r25
 7a0:	9c f4       	brge	.+38     	; 0x7c8 <__LOCK_REGION_LENGTH__+0x3c8>
 7a2:	01 97       	sbiw	r24, 0x01	; 1
 7a4:	fb 01       	movw	r30, r22
 7a6:	40 e0       	ldi	r20, 0x00	; 0
 7a8:	50 e0       	ldi	r21, 0x00	; 0
				split1[i] |= (ara[i][j] << (splitcols - 1 - j)); // Using bitmasking to transform columns into a single integer
 7aa:	21 91       	ld	r18, Z+
 7ac:	31 91       	ld	r19, Z+
 7ae:	08 2e       	mov	r0, r24
 7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <__LOCK_REGION_LENGTH__+0x3b6>
 7b2:	22 0f       	add	r18, r18
 7b4:	33 1f       	adc	r19, r19
 7b6:	0a 94       	dec	r0
 7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
 7ba:	42 2b       	or	r20, r18
 7bc:	53 2b       	or	r21, r19
 7be:	01 97       	sbiw	r24, 0x01	; 1
 7c0:	a0 f7       	brcc	.-24     	; 0x7aa <__LOCK_REGION_LENGTH__+0x3aa>
 7c2:	f8 01       	movw	r30, r16
 7c4:	51 83       	std	Z+1, r21	; 0x01
 7c6:	40 83       	st	Z, r20
 7c8:	12 96       	adiw	r26, 0x02	; 2
 7ca:	6e 5d       	subi	r22, 0xDE	; 222
 7cc:	7f 4f       	sbci	r23, 0xFF	; 255
		}
	}

	void split() {
		// putting first 8*8 portion of display into split1
		for (int i = 0; i < splitrows; i++) {
 7ce:	ae 15       	cp	r26, r14
 7d0:	bf 05       	cpc	r27, r15
 7d2:	f1 f6       	brne	.-68     	; 0x790 <__LOCK_REGION_LENGTH__+0x390>
			}
		}
		// second portion to split2
		for (int i = 0; i < splitrows; i++) {
			split2[i] = 0;
			for (int j = cols - splitcols; j < cols; j++) {
 7d4:	e0 90 64 02 	lds	r14, 0x0264	; 0x800264 <__data_end+0x2>
 7d8:	f0 90 65 02 	lds	r15, 0x0265	; 0x800265 <__data_end+0x3>
 7dc:	c0 90 68 02 	lds	r12, 0x0268	; 0x800268 <__data_end+0x6>
 7e0:	d0 90 69 02 	lds	r13, 0x0269	; 0x800269 <__data_end+0x7>
 7e4:	87 01       	movw	r16, r14
 7e6:	0c 19       	sub	r16, r12
 7e8:	1d 09       	sbc	r17, r13
 7ea:	a0 ec       	ldi	r26, 0xC0	; 192
 7ec:	b4 e0       	ldi	r27, 0x04	; 4
 7ee:	b8 01       	movw	r22, r16
 7f0:	66 0f       	add	r22, r22
 7f2:	77 1f       	adc	r23, r23
 7f4:	66 59       	subi	r22, 0x96	; 150
 7f6:	7d 4f       	sbci	r23, 0xFD	; 253
 7f8:	95 01       	movw	r18, r10
 7fa:	2a 58       	subi	r18, 0x8A	; 138
 7fc:	3d 4f       	sbci	r19, 0xFD	; 253
 7fe:	59 01       	movw	r10, r18
 800:	ba 83       	std	Y+2, r27	; 0x02
 802:	a9 83       	std	Y+1, r26	; 0x01
				split1[i] |= (ara[i][j] << (splitcols - 1 - j)); // Using bitmasking to transform columns into a single integer
			}
		}
		// second portion to split2
		for (int i = 0; i < splitrows; i++) {
			split2[i] = 0;
 804:	11 96       	adiw	r26, 0x01	; 1
 806:	1c 92       	st	X, r1
 808:	1e 92       	st	-X, r1
			for (int j = cols - splitcols; j < cols; j++) {
 80a:	0e 15       	cp	r16, r14
 80c:	1f 05       	cpc	r17, r15
 80e:	b4 f4       	brge	.+44     	; 0x83c <__LOCK_REGION_LENGTH__+0x43c>
 810:	c6 01       	movw	r24, r12
 812:	01 97       	sbiw	r24, 0x01	; 1
 814:	fb 01       	movw	r30, r22
 816:	40 e0       	ldi	r20, 0x00	; 0
 818:	50 e0       	ldi	r21, 0x00	; 0
				split2[i] |= (ara[i][j] << (cols - j - 1));
 81a:	21 91       	ld	r18, Z+
 81c:	31 91       	ld	r19, Z+
 81e:	08 2e       	mov	r0, r24
 820:	02 c0       	rjmp	.+4      	; 0x826 <__LOCK_REGION_LENGTH__+0x426>
 822:	22 0f       	add	r18, r18
 824:	33 1f       	adc	r19, r19
 826:	0a 94       	dec	r0
 828:	e2 f7       	brpl	.-8      	; 0x822 <__LOCK_REGION_LENGTH__+0x422>
 82a:	42 2b       	or	r20, r18
 82c:	53 2b       	or	r21, r19
 82e:	01 97       	sbiw	r24, 0x01	; 1
 830:	a0 f7       	brcc	.-24     	; 0x81a <__LOCK_REGION_LENGTH__+0x41a>
 832:	89 81       	ldd	r24, Y+1	; 0x01
 834:	9a 81       	ldd	r25, Y+2	; 0x02
 836:	fc 01       	movw	r30, r24
 838:	51 83       	std	Z+1, r21	; 0x01
 83a:	40 83       	st	Z, r20
 83c:	12 96       	adiw	r26, 0x02	; 2
 83e:	6e 5d       	subi	r22, 0xDE	; 222
 840:	7f 4f       	sbci	r23, 0xFF	; 255
			for (int j = 0; j < splitcols; j++) {
				split1[i] |= (ara[i][j] << (splitcols - 1 - j)); // Using bitmasking to transform columns into a single integer
			}
		}
		// second portion to split2
		for (int i = 0; i < splitrows; i++) {
 842:	aa 15       	cp	r26, r10
 844:	bb 05       	cpc	r27, r11
 846:	e1 f6       	brne	.-72     	; 0x800 <__LOCK_REGION_LENGTH__+0x400>
			for (int j = cols - splitcols; j < cols; j++) {
				split2[i] |= (ara[i][j] << (cols - j - 1));
			}
		}
		// split3
		for (int i = rows - splitrows; i < rows; i++) {
 848:	94 01       	movw	r18, r8
 84a:	26 19       	sub	r18, r6
 84c:	37 09       	sbc	r19, r7
 84e:	3a 83       	std	Y+2, r19	; 0x02
 850:	29 83       	std	Y+1, r18	; 0x01
 852:	28 15       	cp	r18, r8
 854:	39 05       	cpc	r19, r9
 856:	0c f0       	brlt	.+2      	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
 858:	9a c0       	rjmp	.+308    	; 0x98e <__stack+0x12f>
			split3[i - rows + splitrows] = 0;
			for (int j = 0; j < splitcols; j++) {
 85a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <__data_end+0x6>
 85e:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <__data_end+0x7>
 862:	9a 87       	std	Y+10, r25	; 0x0a
 864:	89 87       	std	Y+9, r24	; 0x09
 866:	73 01       	movw	r14, r6
 868:	97 ec       	ldi	r25, 0xC7	; 199
 86a:	e9 1a       	sub	r14, r25
 86c:	9e ef       	ldi	r25, 0xFE	; 254
 86e:	f9 0a       	sbc	r15, r25
 870:	d9 01       	movw	r26, r18
 872:	ae 0d       	add	r26, r14
 874:	bf 1d       	adc	r27, r15
 876:	a8 19       	sub	r26, r8
 878:	b9 09       	sbc	r27, r9
 87a:	aa 0f       	add	r26, r26
 87c:	bb 1f       	adc	r27, r27
 87e:	ae 59       	subi	r26, 0x9E	; 158
 880:	bd 4f       	sbci	r27, 0xFD	; 253
 882:	e2 e2       	ldi	r30, 0x22	; 34
 884:	e2 9f       	mul	r30, r18
 886:	b0 01       	movw	r22, r0
 888:	e3 9f       	mul	r30, r19
 88a:	70 0d       	add	r23, r0
 88c:	11 24       	eor	r1, r1
 88e:	66 59       	subi	r22, 0x96	; 150
 890:	7d 4f       	sbci	r23, 0xFD	; 253
 892:	97 01       	movw	r18, r14
 894:	22 0f       	add	r18, r18
 896:	33 1f       	adc	r19, r19
 898:	3e 83       	std	Y+6, r19	; 0x06
 89a:	2d 83       	std	Y+5, r18	; 0x05
 89c:	2e 59       	subi	r18, 0x9E	; 158
 89e:	3d 4f       	sbci	r19, 0xFD	; 253
 8a0:	79 01       	movw	r14, r18
 8a2:	8d 01       	movw	r16, r26
				split2[i] |= (ara[i][j] << (cols - j - 1));
			}
		}
		// split3
		for (int i = rows - splitrows; i < rows; i++) {
			split3[i - rows + splitrows] = 0;
 8a4:	11 96       	adiw	r26, 0x01	; 1
 8a6:	1c 92       	st	X, r1
 8a8:	1e 92       	st	-X, r1
			for (int j = 0; j < splitcols; j++) {
 8aa:	e9 85       	ldd	r30, Y+9	; 0x09
 8ac:	fa 85       	ldd	r31, Y+10	; 0x0a
 8ae:	1e 16       	cp	r1, r30
 8b0:	1f 06       	cpc	r1, r31
 8b2:	a4 f4       	brge	.+40     	; 0x8dc <__stack+0x7d>
 8b4:	cf 01       	movw	r24, r30
 8b6:	01 97       	sbiw	r24, 0x01	; 1
 8b8:	fb 01       	movw	r30, r22
 8ba:	40 e0       	ldi	r20, 0x00	; 0
 8bc:	50 e0       	ldi	r21, 0x00	; 0
				split3[i - rows + splitrows] |= (ara[i][j] << (splitcols - 1 - j));
 8be:	21 91       	ld	r18, Z+
 8c0:	31 91       	ld	r19, Z+
 8c2:	08 2e       	mov	r0, r24
 8c4:	02 c0       	rjmp	.+4      	; 0x8ca <__stack+0x6b>
 8c6:	22 0f       	add	r18, r18
 8c8:	33 1f       	adc	r19, r19
 8ca:	0a 94       	dec	r0
 8cc:	e2 f7       	brpl	.-8      	; 0x8c6 <__stack+0x67>
 8ce:	42 2b       	or	r20, r18
 8d0:	53 2b       	or	r21, r19
 8d2:	01 97       	sbiw	r24, 0x01	; 1
 8d4:	a0 f7       	brcc	.-24     	; 0x8be <__stack+0x5f>
 8d6:	f8 01       	movw	r30, r16
 8d8:	51 83       	std	Z+1, r21	; 0x01
 8da:	40 83       	st	Z, r20
 8dc:	12 96       	adiw	r26, 0x02	; 2
 8de:	6e 5d       	subi	r22, 0xDE	; 222
 8e0:	7f 4f       	sbci	r23, 0xFF	; 255
			for (int j = cols - splitcols; j < cols; j++) {
				split2[i] |= (ara[i][j] << (cols - j - 1));
			}
		}
		// split3
		for (int i = rows - splitrows; i < rows; i++) {
 8e2:	ae 15       	cp	r26, r14
 8e4:	bf 05       	cpc	r27, r15
 8e6:	e9 f6       	brne	.-70     	; 0x8a2 <__stack+0x43>
			}
		}
		// last portion to split4
		for (int i = rows - splitrows; i < rows; i++) {
			split4[i - rows + splitrows] = 0;
			for (int j = cols - splitcols; j < cols; j++) {
 8e8:	c0 90 64 02 	lds	r12, 0x0264	; 0x800264 <__data_end+0x2>
 8ec:	d0 90 65 02 	lds	r13, 0x0265	; 0x800265 <__data_end+0x3>
 8f0:	a0 90 68 02 	lds	r10, 0x0268	; 0x800268 <__data_end+0x6>
 8f4:	b0 90 69 02 	lds	r11, 0x0269	; 0x800269 <__data_end+0x7>
 8f8:	86 01       	movw	r16, r12
 8fa:	0a 19       	sub	r16, r10
 8fc:	1b 09       	sbc	r17, r11
 8fe:	fd eb       	ldi	r31, 0xBD	; 189
 900:	6f 1a       	sub	r6, r31
 902:	fe ef       	ldi	r31, 0xFE	; 254
 904:	7f 0a       	sbc	r7, r31
 906:	29 81       	ldd	r18, Y+1	; 0x01
 908:	3a 81       	ldd	r19, Y+2	; 0x02
 90a:	62 0e       	add	r6, r18
 90c:	73 1e       	adc	r7, r19
 90e:	d3 01       	movw	r26, r6
 910:	a8 19       	sub	r26, r8
 912:	b9 09       	sbc	r27, r9
 914:	aa 0f       	add	r26, r26
 916:	bb 1f       	adc	r27, r27
 918:	ae 59       	subi	r26, 0x9E	; 158
 91a:	bd 4f       	sbci	r27, 0xFD	; 253
 91c:	e1 e1       	ldi	r30, 0x11	; 17
 91e:	c9 01       	movw	r24, r18
 920:	e8 9f       	mul	r30, r24
 922:	90 01       	movw	r18, r0
 924:	e9 9f       	mul	r30, r25
 926:	30 0d       	add	r19, r0
 928:	11 24       	eor	r1, r1
 92a:	c8 01       	movw	r24, r16
 92c:	04 96       	adiw	r24, 0x04	; 4
 92e:	b9 01       	movw	r22, r18
 930:	68 0f       	add	r22, r24
 932:	79 1f       	adc	r23, r25
 934:	66 0f       	add	r22, r22
 936:	77 1f       	adc	r23, r23
 938:	6e 59       	subi	r22, 0x9E	; 158
 93a:	7d 4f       	sbci	r23, 0xFD	; 253
 93c:	2d 81       	ldd	r18, Y+5	; 0x05
 93e:	3e 81       	ldd	r19, Y+6	; 0x06
 940:	2a 58       	subi	r18, 0x8A	; 138
 942:	3d 4f       	sbci	r19, 0xFD	; 253
 944:	79 01       	movw	r14, r18
 946:	ba 83       	std	Y+2, r27	; 0x02
 948:	a9 83       	std	Y+1, r26	; 0x01
				split3[i - rows + splitrows] |= (ara[i][j] << (splitcols - 1 - j));
			}
		}
		// last portion to split4
		for (int i = rows - splitrows; i < rows; i++) {
			split4[i - rows + splitrows] = 0;
 94a:	11 96       	adiw	r26, 0x01	; 1
 94c:	1c 92       	st	X, r1
 94e:	1e 92       	st	-X, r1
			for (int j = cols - splitcols; j < cols; j++) {
 950:	0c 15       	cp	r16, r12
 952:	1d 05       	cpc	r17, r13
 954:	b4 f4       	brge	.+44     	; 0x982 <__stack+0x123>
 956:	c5 01       	movw	r24, r10
 958:	01 97       	sbiw	r24, 0x01	; 1
 95a:	fb 01       	movw	r30, r22
 95c:	40 e0       	ldi	r20, 0x00	; 0
 95e:	50 e0       	ldi	r21, 0x00	; 0
				split4[i - rows + splitrows] |= (ara[i][j] << (cols - j - 1));
 960:	21 91       	ld	r18, Z+
 962:	31 91       	ld	r19, Z+
 964:	08 2e       	mov	r0, r24
 966:	02 c0       	rjmp	.+4      	; 0x96c <__stack+0x10d>
 968:	22 0f       	add	r18, r18
 96a:	33 1f       	adc	r19, r19
 96c:	0a 94       	dec	r0
 96e:	e2 f7       	brpl	.-8      	; 0x968 <__stack+0x109>
 970:	42 2b       	or	r20, r18
 972:	53 2b       	or	r21, r19
 974:	01 97       	sbiw	r24, 0x01	; 1
 976:	a0 f7       	brcc	.-24     	; 0x960 <__stack+0x101>
 978:	89 81       	ldd	r24, Y+1	; 0x01
 97a:	9a 81       	ldd	r25, Y+2	; 0x02
 97c:	fc 01       	movw	r30, r24
 97e:	51 83       	std	Z+1, r21	; 0x01
 980:	40 83       	st	Z, r20
 982:	12 96       	adiw	r26, 0x02	; 2
 984:	6e 5d       	subi	r22, 0xDE	; 222
 986:	7f 4f       	sbci	r23, 0xFF	; 255
			for (int j = 0; j < splitcols; j++) {
				split3[i - rows + splitrows] |= (ara[i][j] << (splitcols - 1 - j));
			}
		}
		// last portion to split4
		for (int i = rows - splitrows; i < rows; i++) {
 988:	ae 15       	cp	r26, r14
 98a:	bf 05       	cpc	r27, r15
 98c:	e1 f6       	brne	.-72     	; 0x946 <__stack+0xe7>
 98e:	2c ea       	ldi	r18, 0xAC	; 172
 990:	34 e0       	ldi	r19, 0x04	; 4
			split4[i - rows + splitrows] = 0;
			for (int j = cols - splitcols; j < cols; j++) {
 992:	11 e0       	ldi	r17, 0x01	; 1
 994:	3a 83       	std	Y+2, r19	; 0x02
 996:	29 83       	std	Y+1, r18	; 0x01
 998:	e9 80       	ldd	r14, Y+1	; 0x01
 99a:	fa 80       	ldd	r15, Y+2	; 0x02
		{
			// MAX7219_send2(i, 0b0001010); // Address i, data 0xFF (turn on all LEDs)// 4th matrix
			// MAX7219_send2(i, 0xaa);
			// MAX7219_send2(i, 0x11);
			// MAX7219_send2(i, 0x99); // 1st matrix
			MAX7219_send2(i, split4[i-1]);
 99c:	d7 01       	movw	r26, r14
 99e:	dc 96       	adiw	r26, 0x3c	; 60
 9a0:	6c 91       	ld	r22, X
 9a2:	81 2f       	mov	r24, r17
 9a4:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z13MAX7219_send2hh>
			MAX7219_send2(i, split3[i-1]);
 9a8:	e9 81       	ldd	r30, Y+1	; 0x01
 9aa:	fa 81       	ldd	r31, Y+2	; 0x02
 9ac:	60 a5       	ldd	r22, Z+40	; 0x28
 9ae:	81 2f       	mov	r24, r17
 9b0:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z13MAX7219_send2hh>
			MAX7219_send2(i, split2[i-1]);
 9b4:	a9 81       	ldd	r26, Y+1	; 0x01
 9b6:	ba 81       	ldd	r27, Y+2	; 0x02
 9b8:	54 96       	adiw	r26, 0x14	; 20
 9ba:	6c 91       	ld	r22, X
 9bc:	81 2f       	mov	r24, r17
 9be:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z13MAX7219_send2hh>
			MAX7219_send2(i, split1[i-1]);
 9c2:	f7 01       	movw	r30, r14
 9c4:	60 81       	ld	r22, Z
 9c6:	e9 81       	ldd	r30, Y+1	; 0x01
 9c8:	fa 81       	ldd	r31, Y+2	; 0x02
 9ca:	32 96       	adiw	r30, 0x02	; 2
 9cc:	fa 83       	std	Y+2, r31	; 0x02
 9ce:	e9 83       	std	Y+1, r30	; 0x01
 9d0:	81 2f       	mov	r24, r17
 9d2:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z13MAX7219_send2hh>

			deSelect_Load();
 9d6:	0e 94 89 00 	call	0x112	; 0x112 <_Z13deSelect_Loadv>
			}
		}
	}

	void send_to_driver() {
		for (uint8_t i = 1; i <= 8; i++)
 9da:	1f 5f       	subi	r17, 0xFF	; 255
 9dc:	19 30       	cpi	r17, 0x09	; 9
 9de:	e1 f6       	brne	.-72     	; 0x998 <__stack+0x139>
 9e0:	f1 e0       	ldi	r31, 0x01	; 1
 9e2:	f9 83       	std	Y+1, r31	; 0x01
		// _delay_ms(500);

		// Turn off all LEDs
		for (uint8_t i = 1; i <= 8; i++)
		{
			MAX7219_send(i, 0x00); // Address i, data 0x00 (turn off all LEDs)
 9e4:	60 e0       	ldi	r22, 0x00	; 0
 9e6:	89 81       	ldd	r24, Y+1	; 0x01
 9e8:	0e 94 5f 00 	call	0xbe	; 0xbe <_Z12MAX7219_sendhh>
			// _delay_ms(100);
		}
		// _delay_ms(500);

		// Turn off all LEDs
		for (uint8_t i = 1; i <= 8; i++)
 9ec:	29 81       	ldd	r18, Y+1	; 0x01
 9ee:	2f 5f       	subi	r18, 0xFF	; 255
 9f0:	29 83       	std	Y+1, r18	; 0x01
 9f2:	29 30       	cpi	r18, 0x09	; 9
 9f4:	b9 f7       	brne	.-18     	; 0x9e4 <__stack+0x185>
 9f6:	81 ee       	ldi	r24, 0xE1	; 225
 9f8:	94 e0       	ldi	r25, 0x04	; 4
 9fa:	01 97       	sbiw	r24, 0x01	; 1
 9fc:	f1 f7       	brne	.-4      	; 0x9fa <__stack+0x19b>
 9fe:	00 c0       	rjmp	.+0      	; 0xa00 <__stack+0x1a1>
 a00:	00 00       	nop

		display.send_to_driver();

		// Adjusted delay for slower game execution
		_delay_ms(5);
		PORTA &= ~(0b00000100);
 a02:	da 98       	cbi	0x1b, 2	; 27
		// paddle movement
		if (!prev_left_button && left_button)
			paddle.goleft(); // raising edge
		if (!prev_right_button && right_button)
			paddle.goright();
		prev_left_button = left_button;
 a04:	9f 81       	ldd	r25, Y+7	; 0x07
		prev_right_button = right_button;
 a06:	28 85       	ldd	r18, Y+8	; 0x08
    for (int i = 0; i < MAX_BULLETS; i++) {
        bullets[i].active = 0; // Bullet is inactive initially
    }

	// Main game loop
	while (1)
 a08:	a0 cc       	rjmp	.-1728   	; 0x34a <main+0x64>
 a0a:	e6 e0       	ldi	r30, 0x06	; 6
 a0c:	f5 e0       	ldi	r31, 0x05	; 5
 a0e:	8d ce       	rjmp	.-742    	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>

00000a10 <__vector_1>:

	return 0;
}

ISR(INT0_vect)
{
 a10:	1f 92       	push	r1
 a12:	0f 92       	push	r0
 a14:	0f b6       	in	r0, 0x3f	; 63
 a16:	0f 92       	push	r0
 a18:	11 24       	eor	r1, r1
 a1a:	8f 93       	push	r24
 a1c:	9f 93       	push	r25
	if (i == 0)
 a1e:	80 91 34 05 	lds	r24, 0x0534	; 0x800534 <_ZL1i>
 a22:	90 91 35 05 	lds	r25, 0x0535	; 0x800535 <_ZL1i+0x1>
 a26:	89 2b       	or	r24, r25
 a28:	51 f4       	brne	.+20     	; 0xa3e <__vector_1+0x2e>
	{
		TCCR1B |= 1 << CS10;
 a2a:	8e b5       	in	r24, 0x2e	; 46
 a2c:	81 60       	ori	r24, 0x01	; 1
 a2e:	8e bd       	out	0x2e, r24	; 46
		i = 1;
 a30:	81 e0       	ldi	r24, 0x01	; 1
 a32:	90 e0       	ldi	r25, 0x00	; 0
 a34:	90 93 35 05 	sts	0x0535, r25	; 0x800535 <_ZL1i+0x1>
 a38:	80 93 34 05 	sts	0x0534, r24	; 0x800534 <_ZL1i>
 a3c:	0d c0       	rjmp	.+26     	; 0xa58 <__vector_1+0x48>
	}
	else
	{
		TCCR1B = 0;
 a3e:	1e bc       	out	0x2e, r1	; 46
		pulse = TCNT1;
 a40:	8c b5       	in	r24, 0x2c	; 44
 a42:	9d b5       	in	r25, 0x2d	; 45
 a44:	90 93 37 05 	sts	0x0537, r25	; 0x800537 <_ZL5pulse+0x1>
 a48:	80 93 36 05 	sts	0x0536, r24	; 0x800536 <_ZL5pulse>
		TCNT1 = 0;
 a4c:	1d bc       	out	0x2d, r1	; 45
 a4e:	1c bc       	out	0x2c, r1	; 44
		i = 0;
 a50:	10 92 35 05 	sts	0x0535, r1	; 0x800535 <_ZL1i+0x1>
 a54:	10 92 34 05 	sts	0x0534, r1	; 0x800534 <_ZL1i>
	}
 a58:	9f 91       	pop	r25
 a5a:	8f 91       	pop	r24
 a5c:	0f 90       	pop	r0
 a5e:	0f be       	out	0x3f, r0	; 63
 a60:	0f 90       	pop	r0
 a62:	1f 90       	pop	r1
 a64:	18 95       	reti

00000a66 <_GLOBAL__sub_I__Z8SPI_initv>:
									{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
								   };



struct Wall
 a66:	ec e2       	ldi	r30, 0x2C	; 44
 a68:	f5 e0       	ldi	r31, 0x05	; 5
 a6a:	11 82       	std	Z+1, r1	; 0x01
 a6c:	10 82       	st	Z, r1
 a6e:	8f e0       	ldi	r24, 0x0F	; 15
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	93 83       	std	Z+3, r25	; 0x03
 a74:	82 83       	std	Z+2, r24	; 0x02
 a76:	15 82       	std	Z+5, r1	; 0x05
 a78:	14 82       	std	Z+4, r1	; 0x04
 a7a:	97 83       	std	Z+7, r25	; 0x07
 a7c:	86 83       	std	Z+6, r24	; 0x06
	int size;
	int row;

	Paddle()
	{
		position = wall.center_col();
 a7e:	e6 e2       	ldi	r30, 0x26	; 38
 a80:	f5 e0       	ldi	r31, 0x05	; 5
 a82:	27 e0       	ldi	r18, 0x07	; 7
 a84:	30 e0       	ldi	r19, 0x00	; 0
 a86:	31 83       	std	Z+1, r19	; 0x01
 a88:	20 83       	st	Z, r18
		size = 5;
 a8a:	45 e0       	ldi	r20, 0x05	; 5
 a8c:	50 e0       	ldi	r21, 0x00	; 0
 a8e:	53 83       	std	Z+3, r21	; 0x03
 a90:	42 83       	std	Z+2, r20	; 0x02
		row = wall.down;
 a92:	95 83       	std	Z+5, r25	; 0x05
 a94:	84 83       	std	Z+4, r24	; 0x04
	int row, col;
	int row_dir, col_dir;

	void init()
	{
		row = wall.down+1;
 a96:	ec ef       	ldi	r30, 0xFC	; 252
 a98:	f4 e0       	ldi	r31, 0x04	; 4
 a9a:	80 e1       	ldi	r24, 0x10	; 16
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	91 83       	std	Z+1, r25	; 0x01
 aa0:	80 83       	st	Z, r24
		col = paddle.position;
 aa2:	33 83       	std	Z+3, r19	; 0x03
 aa4:	22 83       	std	Z+2, r18	; 0x02
		row_dir = -1;
 aa6:	2f ef       	ldi	r18, 0xFF	; 255
 aa8:	3f ef       	ldi	r19, 0xFF	; 255
 aaa:	35 83       	std	Z+5, r19	; 0x05
 aac:	24 83       	std	Z+4, r18	; 0x04
		col_dir = 0;
 aae:	17 82       	std	Z+7, r1	; 0x07
 ab0:	16 82       	std	Z+6, r1	; 0x06
	int split1[10];
	int split2[10];
	int split3[10];
	int split4[10]; // 10 for out_of_bound safety

	Display() {
 ab2:	e2 e6       	ldi	r30, 0x62	; 98
 ab4:	f2 e0       	ldi	r31, 0x02	; 2
 ab6:	91 83       	std	Z+1, r25	; 0x01
 ab8:	80 83       	st	Z, r24
 aba:	93 83       	std	Z+3, r25	; 0x03
 abc:	82 83       	std	Z+2, r24	; 0x02
 abe:	88 e0       	ldi	r24, 0x08	; 8
 ac0:	90 e0       	ldi	r25, 0x00	; 0
 ac2:	95 83       	std	Z+5, r25	; 0x05
 ac4:	84 83       	std	Z+4, r24	; 0x04
 ac6:	97 83       	std	Z+7, r25	; 0x07
 ac8:	86 83       	std	Z+6, r24	; 0x06
 aca:	2a e6       	ldi	r18, 0x6A	; 106
 acc:	32 e0       	ldi	r19, 0x02	; 2
 ace:	4a e8       	ldi	r20, 0x8A	; 138
 ad0:	54 e0       	ldi	r21, 0x04	; 4
 ad2:	c9 01       	movw	r24, r18
 ad4:	80 96       	adiw	r24, 0x20	; 32
		TCCR1B = 0;
		pulse = TCNT1;
		TCNT1 = 0;
		i = 0;
	}
 ad6:	f9 01       	movw	r30, r18
	int split4[10]; // 10 for out_of_bound safety

	Display() {
		for (int i = 0; i < rows; ++i)
		for (int j = 0; j < cols; ++j)
		ara[i][j] = 0;
 ad8:	11 92       	st	Z+, r1
 ada:	11 92       	st	Z+, r1
	int split3[10];
	int split4[10]; // 10 for out_of_bound safety

	Display() {
		for (int i = 0; i < rows; ++i)
		for (int j = 0; j < cols; ++j)
 adc:	e8 17       	cp	r30, r24
 ade:	f9 07       	cpc	r31, r25
 ae0:	d9 f7       	brne	.-10     	; 0xad8 <_GLOBAL__sub_I__Z8SPI_initv+0x72>
 ae2:	2e 5d       	subi	r18, 0xDE	; 222
 ae4:	3f 4f       	sbci	r19, 0xFF	; 255
	int split2[10];
	int split3[10];
	int split4[10]; // 10 for out_of_bound safety

	Display() {
		for (int i = 0; i < rows; ++i)
 ae6:	24 17       	cp	r18, r20
 ae8:	35 07       	cpc	r19, r21
 aea:	99 f7       	brne	.-26     	; 0xad2 <_GLOBAL__sub_I__Z8SPI_initv+0x6c>
		TCCR1B = 0;
		pulse = TCNT1;
		TCNT1 = 0;
		i = 0;
	}
 aec:	08 95       	ret

00000aee <__tablejump2__>:
 aee:	ee 0f       	add	r30, r30
 af0:	ff 1f       	adc	r31, r31
 af2:	05 90       	lpm	r0, Z+
 af4:	f4 91       	lpm	r31, Z
 af6:	e0 2d       	mov	r30, r0
 af8:	09 94       	ijmp

00000afa <_exit>:
 afa:	f8 94       	cli

00000afc <__stop_program>:
 afc:	ff cf       	rjmp	.-2      	; 0xafc <__stop_program>
