
Final_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fa2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00001fa2  00002036  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002d9  0080006a  0080006a  00002040  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000020ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000263d  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000988  00000000  00000000  00004781  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000110f  00000000  00000000  00005109  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00006218  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b63  00000000  00000000  0000642c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001310  00000000  00000000  00006f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000418  00000000  00000000  0000829f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	9b 0c       	add	r9, r11

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	10 e0       	ldi	r17, 0x00	; 0
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	e2 ea       	ldi	r30, 0xA2	; 162
      6a:	ff e1       	ldi	r31, 0x1F	; 31
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	aa 36       	cpi	r26, 0x6A	; 106
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	23 e0       	ldi	r18, 0x03	; 3
      7a:	aa e6       	ldi	r26, 0x6A	; 106
      7c:	b0 e0       	ldi	r27, 0x00	; 0
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	a3 34       	cpi	r26, 0x43	; 67
      84:	b2 07       	cpc	r27, r18
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	cb e2       	ldi	r28, 0x2B	; 43
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
      90:	21 97       	sbiw	r28, 0x01	; 1
      92:	fe 01       	movw	r30, r28
      94:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <__tablejump2__>
      98:	ca 32       	cpi	r28, 0x2A	; 42
      9a:	d1 07       	cpc	r29, r17
      9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
      9e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <main>
      a2:	0c 94 cf 0f 	jmp	0x1f9e	; 0x1f9e <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z5resetv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      aa:	8f e4       	ldi	r24, 0x4F	; 79
      ac:	93 ec       	ldi	r25, 0xC3	; 195
      ae:	01 97       	sbiw	r24, 0x01	; 1
      b0:	f1 f7       	brne	.-4      	; 0xae <_Z5resetv+0x4>
      b2:	00 c0       	rjmp	.+0      	; 0xb4 <_Z5resetv+0xa>
      b4:	00 00       	nop
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
      b6:	98 e0       	ldi	r25, 0x08	; 8
      b8:	88 e1       	ldi	r24, 0x18	; 24
      ba:	0f b6       	in	r0, 0x3f	; 63
      bc:	f8 94       	cli
      be:	a8 95       	wdr
      c0:	81 bd       	out	0x21, r24	; 33
      c2:	0f be       	out	0x3f, r0	; 63
      c4:	91 bd       	out	0x21, r25	; 33
      c6:	ff cf       	rjmp	.-2      	; 0xc6 <_Z5resetv+0x1c>

000000c8 <_Z12MAX7219_sendhh>:

// Function to send data to MAX7219
void MAX7219_send(uint8_t address, uint8_t data)
{
  // Select MAX7219 module
  PORTB &= ~(1 << LOAD_PIN);
      c8:	c4 98       	cbi	0x18, 4	; 24

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
      ca:	8f b9       	out	0x0f, r24	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
      cc:	77 9b       	sbis	0x0e, 7	; 14
      ce:	fe cf       	rjmp	.-4      	; 0xcc <_Z12MAX7219_sendhh+0x4>

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
      d0:	6f b9       	out	0x0f, r22	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
      d2:	77 9b       	sbis	0x0e, 7	; 14
      d4:	fe cf       	rjmp	.-4      	; 0xd2 <_Z12MAX7219_sendhh+0xa>

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
      d6:	8f b9       	out	0x0f, r24	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
      d8:	77 9b       	sbis	0x0e, 7	; 14
      da:	fe cf       	rjmp	.-4      	; 0xd8 <_Z12MAX7219_sendhh+0x10>

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
      dc:	6f b9       	out	0x0f, r22	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
      de:	77 9b       	sbis	0x0e, 7	; 14
      e0:	fe cf       	rjmp	.-4      	; 0xde <_Z12MAX7219_sendhh+0x16>

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
      e2:	8f b9       	out	0x0f, r24	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
      e4:	77 9b       	sbis	0x0e, 7	; 14
      e6:	fe cf       	rjmp	.-4      	; 0xe4 <_Z12MAX7219_sendhh+0x1c>

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
      e8:	6f b9       	out	0x0f, r22	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
      ea:	77 9b       	sbis	0x0e, 7	; 14
      ec:	fe cf       	rjmp	.-4      	; 0xea <_Z12MAX7219_sendhh+0x22>

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
      ee:	8f b9       	out	0x0f, r24	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
      f0:	77 9b       	sbis	0x0e, 7	; 14
      f2:	fe cf       	rjmp	.-4      	; 0xf0 <_Z12MAX7219_sendhh+0x28>

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
      f4:	6f b9       	out	0x0f, r22	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
      f6:	77 9b       	sbis	0x0e, 7	; 14
      f8:	fe cf       	rjmp	.-4      	; 0xf6 <_Z12MAX7219_sendhh+0x2e>

  SPI_send(address);
  SPI_send(data);

  // DeSelect MAX7219 module
  PORTB |= (1 << LOAD_PIN);
      fa:	c4 9a       	sbi	0x18, 4	; 24
      fc:	08 95       	ret

000000fe <_Z11select_Loadv>:
  // Send address and data
  SPI_send(address);
  SPI_send(data);
}

void select_Load() { PORTB &= ~(1 << LOAD_PIN); }  // Select MAX7219 module
      fe:	c4 98       	cbi	0x18, 4	; 24
     100:	08 95       	ret

00000102 <_Z13deSelect_Loadv>:
void deSelect_Load() { PORTB |= (1 << LOAD_PIN); } // DeSelect MAX7219 module
     102:	c4 9a       	sbi	0x18, 4	; 24
     104:	08 95       	ret

00000106 <_Z11initMAX7219v>:
// Function to initialize MAX7219 driver
void initMAX7219()
{
  // Set decode mode: no decode for all digits
  MAX7219_send(REG_DECODE_MODE, 0x00);
     106:	60 e0       	ldi	r22, 0x00	; 0
     108:	89 e0       	ldi	r24, 0x09	; 9
     10a:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12MAX7219_sendhh>

  // Set intensity (brightness) level
  MAX7219_send(REG_INTENSITY, 0x0F); // Max intensity
     10e:	6f e0       	ldi	r22, 0x0F	; 15
     110:	8a e0       	ldi	r24, 0x0A	; 10
     112:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12MAX7219_sendhh>

  // Set scan limit: use all digits (rows)
  MAX7219_send(REG_SCAN_LIMIT, 0x07); // For an 8x8 matrix
     116:	67 e0       	ldi	r22, 0x07	; 7
     118:	8b e0       	ldi	r24, 0x0B	; 11
     11a:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12MAX7219_sendhh>

  // Enable display
  MAX7219_send(REG_SHUTDOWN, 0x01); // Normal operation mode
     11e:	61 e0       	ldi	r22, 0x01	; 1
     120:	8c e0       	ldi	r24, 0x0C	; 12
     122:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12MAX7219_sendhh>
     126:	08 95       	ret

00000128 <_Z9init_pinsv>:

// Function to initialize GPIO pins
void init_pins()
{
  // Set LED matrix row pins as output
  ROW_DDR = 0xFF;
     128:	8f ef       	ldi	r24, 0xFF	; 255
     12a:	81 bb       	out	0x11, r24	; 17
  // Set LED matrix column pins as output
  COL_DDR = 0xFF;
     12c:	87 bb       	out	0x17, r24	; 23
  // Enable internal pull-up resistors for button pins
  DDRA = 0;
     12e:	1a ba       	out	0x1a, r1	; 26
  DDRA &= ~((1 << LEFT_BUTTON_PIN) | (1 << RIGHT_BUTTON_PIN) | (1 << START_BUTTON_PIN));
     130:	8a b3       	in	r24, 0x1a	; 26
     132:	8c 7e       	andi	r24, 0xEC	; 236
     134:	8a bb       	out	0x1a, r24	; 26
  DDRA &= ~((1 << LEFT_SHOOT_PIN) | (1 << RIGHT_SHOOT_PIN));
     136:	8a b3       	in	r24, 0x1a	; 26
     138:	8f 73       	andi	r24, 0x3F	; 63
     13a:	8a bb       	out	0x1a, r24	; 26
  DDRA |= (1 << SCORE_BUTTON_PIN) | (1 << LIFE_BUTTON_PIN) | (1 << RESET_BUTTON);
     13c:	8a b3       	in	r24, 0x1a	; 26
     13e:	8c 62       	ori	r24, 0x2C	; 44
     140:	8a bb       	out	0x1a, r24	; 26
  PORTA = 0;
     142:	1b ba       	out	0x1b, r1	; 27

  DDRC = 0;
     144:	14 ba       	out	0x14, r1	; 20
  DDRC |= (1 << LIFE_GAIN_PIN);
     146:	a7 9a       	sbi	0x14, 7	; 20
     148:	08 95       	ret

0000014a <_Z14update_bulletsv>:
bool left_shoot, right_shoot;

// Update bullet positions

void update_bullets()
{
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
  // Read button inputs
  left_shoot = PINA & (1 << LEFT_SHOOT_PIN);
     14e:	39 b3       	in	r19, 0x19	; 25
     150:	93 2f       	mov	r25, r19
     152:	99 1f       	adc	r25, r25
     154:	99 27       	eor	r25, r25
     156:	99 1f       	adc	r25, r25
     158:	90 93 ee 02 	sts	0x02EE, r25	; 0x8002ee <left_shoot>
  right_shoot = PINA & (1 << RIGHT_SHOOT_PIN);
     15c:	29 b3       	in	r18, 0x19	; 25
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	42 2f       	mov	r20, r18
     162:	40 74       	andi	r20, 0x40	; 64
     164:	26 ff       	sbrs	r18, 6
     166:	80 e0       	ldi	r24, 0x00	; 0
     168:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <right_shoot>

  // Fire bullets when buttons are pressed
  if (!(prev_left_shoot) && left_shoot)
     16c:	20 91 f0 02 	lds	r18, 0x02F0	; 0x8002f0 <prev_left_shoot>
     170:	21 11       	cpse	r18, r1
     172:	4d c0       	rjmp	.+154    	; 0x20e <_Z14update_bulletsv+0xc4>
     174:	33 23       	and	r19, r19
     176:	0c f0       	brlt	.+2      	; 0x17a <_Z14update_bulletsv+0x30>
     178:	4a c0       	rjmp	.+148    	; 0x20e <_Z14update_bulletsv+0xc4>
  {
    // Find an inactive bullet slot
    for (int i = 0; i < MAX_BULLETS; i++)
    {
      if (!bullets[i].active)
     17a:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <bullets+0x4>
     17e:	22 23       	and	r18, r18
     180:	a9 f0       	breq	.+42     	; 0x1ac <_Z14update_bulletsv+0x62>
     182:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <bullets+0x9>
     186:	22 23       	and	r18, r18
     188:	59 f0       	breq	.+22     	; 0x1a0 <_Z14update_bulletsv+0x56>
     18a:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <bullets+0xe>
     18e:	22 23       	and	r18, r18
     190:	51 f0       	breq	.+20     	; 0x1a6 <_Z14update_bulletsv+0x5c>
     192:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <bullets+0x13>
     196:	21 11       	cpse	r18, r1
     198:	3a c0       	rjmp	.+116    	; 0x20e <_Z14update_bulletsv+0xc4>

  // Fire bullets when buttons are pressed
  if (!(prev_left_shoot) && left_shoot)
  {
    // Find an inactive bullet slot
    for (int i = 0; i < MAX_BULLETS; i++)
     19a:	23 e0       	ldi	r18, 0x03	; 3
     19c:	30 e0       	ldi	r19, 0x00	; 0
     19e:	08 c0       	rjmp	.+16     	; 0x1b0 <_Z14update_bulletsv+0x66>
     1a0:	21 e0       	ldi	r18, 0x01	; 1
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	05 c0       	rjmp	.+10     	; 0x1b0 <_Z14update_bulletsv+0x66>
     1a6:	22 e0       	ldi	r18, 0x02	; 2
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <_Z14update_bulletsv+0x66>
    {
      if (!bullets[i].active)
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
      {
        // Activate the bullet
        bullets[i].row = wall.down;
     1b0:	f9 01       	movw	r30, r18
     1b2:	ee 0f       	add	r30, r30
     1b4:	ff 1f       	adc	r31, r31
     1b6:	ee 0f       	add	r30, r30
     1b8:	ff 1f       	adc	r31, r31
     1ba:	e2 0f       	add	r30, r18
     1bc:	f3 1f       	adc	r31, r19
     1be:	ef 50       	subi	r30, 0x0F	; 15
     1c0:	fd 4f       	sbci	r31, 0xFD	; 253
     1c2:	60 91 1b 03 	lds	r22, 0x031B	; 0x80031b <wall+0x6>
     1c6:	70 91 1c 03 	lds	r23, 0x031C	; 0x80031c <wall+0x7>
     1ca:	71 83       	std	Z+1, r23	; 0x01
     1cc:	60 83       	st	Z, r22
    size = 5;
    row = wall.down;
    init();
  }

  int left() { return position - size / 2; }
     1ce:	af e0       	ldi	r26, 0x0F	; 15
     1d0:	b3 e0       	ldi	r27, 0x03	; 3
    {
      if (!bullets[i].active)
      {
        // Activate the bullet
        bullets[i].row = wall.down;
        bullets[i].col = paddle.left();
     1d2:	12 96       	adiw	r26, 0x02	; 2
     1d4:	6d 91       	ld	r22, X+
     1d6:	7c 91       	ld	r23, X
     1d8:	13 97       	sbiw	r26, 0x03	; 3
     1da:	77 23       	and	r23, r23
     1dc:	14 f4       	brge	.+4      	; 0x1e2 <_Z14update_bulletsv+0x98>
     1de:	6f 5f       	subi	r22, 0xFF	; 255
     1e0:	7f 4f       	sbci	r23, 0xFF	; 255
     1e2:	75 95       	asr	r23
     1e4:	67 95       	ror	r22
     1e6:	0d 90       	ld	r0, X+
     1e8:	bc 91       	ld	r27, X
     1ea:	a0 2d       	mov	r26, r0
     1ec:	ed 01       	movw	r28, r26
     1ee:	c6 1b       	sub	r28, r22
     1f0:	d7 0b       	sbc	r29, r23
     1f2:	d3 83       	std	Z+3, r29	; 0x03
     1f4:	c2 83       	std	Z+2, r28	; 0x02
        bullets[i].active = true;
     1f6:	f9 01       	movw	r30, r18
     1f8:	ee 0f       	add	r30, r30
     1fa:	ff 1f       	adc	r31, r31
     1fc:	ee 0f       	add	r30, r30
     1fe:	ff 1f       	adc	r31, r31
     200:	2e 0f       	add	r18, r30
     202:	3f 1f       	adc	r19, r31
     204:	f9 01       	movw	r30, r18
     206:	ef 50       	subi	r30, 0x0F	; 15
     208:	fd 4f       	sbci	r31, 0xFD	; 253
     20a:	21 e0       	ldi	r18, 0x01	; 1
     20c:	24 83       	std	Z+4, r18	; 0x04
        break;
      }
    }
  }

  if (!(prev_right_shoot) && right_shoot)
     20e:	20 91 ef 02 	lds	r18, 0x02EF	; 0x8002ef <prev_right_shoot>
     212:	21 11       	cpse	r18, r1
     214:	4b c0       	rjmp	.+150    	; 0x2ac <_Z14update_bulletsv+0x162>
     216:	44 23       	and	r20, r20
     218:	09 f4       	brne	.+2      	; 0x21c <_Z14update_bulletsv+0xd2>
     21a:	48 c0       	rjmp	.+144    	; 0x2ac <_Z14update_bulletsv+0x162>
  {
    for (int i = 0; i < MAX_BULLETS; i++)
    {
      if (!bullets[i].active)
     21c:	20 91 f5 02 	lds	r18, 0x02F5	; 0x8002f5 <bullets+0x4>
     220:	22 23       	and	r18, r18
     222:	a9 f0       	breq	.+42     	; 0x24e <_Z14update_bulletsv+0x104>
     224:	20 91 fa 02 	lds	r18, 0x02FA	; 0x8002fa <bullets+0x9>
     228:	22 23       	and	r18, r18
     22a:	59 f0       	breq	.+22     	; 0x242 <_Z14update_bulletsv+0xf8>
     22c:	20 91 ff 02 	lds	r18, 0x02FF	; 0x8002ff <bullets+0xe>
     230:	22 23       	and	r18, r18
     232:	51 f0       	breq	.+20     	; 0x248 <_Z14update_bulletsv+0xfe>
     234:	20 91 04 03 	lds	r18, 0x0304	; 0x800304 <bullets+0x13>
     238:	21 11       	cpse	r18, r1
     23a:	38 c0       	rjmp	.+112    	; 0x2ac <_Z14update_bulletsv+0x162>
    }
  }

  if (!(prev_right_shoot) && right_shoot)
  {
    for (int i = 0; i < MAX_BULLETS; i++)
     23c:	23 e0       	ldi	r18, 0x03	; 3
     23e:	30 e0       	ldi	r19, 0x00	; 0
     240:	08 c0       	rjmp	.+16     	; 0x252 <_Z14update_bulletsv+0x108>
     242:	21 e0       	ldi	r18, 0x01	; 1
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	05 c0       	rjmp	.+10     	; 0x252 <_Z14update_bulletsv+0x108>
     248:	22 e0       	ldi	r18, 0x02	; 2
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	02 c0       	rjmp	.+4      	; 0x252 <_Z14update_bulletsv+0x108>
    {
      if (!bullets[i].active)
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	30 e0       	ldi	r19, 0x00	; 0
      {
        // Activate the bullet
        bullets[i].row = wall.down;
     252:	f9 01       	movw	r30, r18
     254:	ee 0f       	add	r30, r30
     256:	ff 1f       	adc	r31, r31
     258:	ee 0f       	add	r30, r30
     25a:	ff 1f       	adc	r31, r31
     25c:	e2 0f       	add	r30, r18
     25e:	f3 1f       	adc	r31, r19
     260:	ef 50       	subi	r30, 0x0F	; 15
     262:	fd 4f       	sbci	r31, 0xFD	; 253
     264:	40 91 1b 03 	lds	r20, 0x031B	; 0x80031b <wall+0x6>
     268:	50 91 1c 03 	lds	r21, 0x031C	; 0x80031c <wall+0x7>
     26c:	51 83       	std	Z+1, r21	; 0x01
     26e:	40 83       	st	Z, r20
        bullets[i].col = paddle.right();
     270:	40 91 11 03 	lds	r20, 0x0311	; 0x800311 <paddle+0x2>
     274:	50 91 12 03 	lds	r21, 0x0312	; 0x800312 <paddle+0x3>
     278:	55 23       	and	r21, r21
     27a:	14 f4       	brge	.+4      	; 0x280 <_Z14update_bulletsv+0x136>
     27c:	4f 5f       	subi	r20, 0xFF	; 255
     27e:	5f 4f       	sbci	r21, 0xFF	; 255
     280:	55 95       	asr	r21
     282:	47 95       	ror	r20
     284:	60 91 0f 03 	lds	r22, 0x030F	; 0x80030f <paddle>
     288:	70 91 10 03 	lds	r23, 0x0310	; 0x800310 <paddle+0x1>
     28c:	46 0f       	add	r20, r22
     28e:	57 1f       	adc	r21, r23
     290:	53 83       	std	Z+3, r21	; 0x03
     292:	42 83       	std	Z+2, r20	; 0x02
        bullets[i].active = true;
     294:	f9 01       	movw	r30, r18
     296:	ee 0f       	add	r30, r30
     298:	ff 1f       	adc	r31, r31
     29a:	ee 0f       	add	r30, r30
     29c:	ff 1f       	adc	r31, r31
     29e:	2e 0f       	add	r18, r30
     2a0:	3f 1f       	adc	r19, r31
     2a2:	f9 01       	movw	r30, r18
     2a4:	ef 50       	subi	r30, 0x0F	; 15
     2a6:	fd 4f       	sbci	r31, 0xFD	; 253
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	24 83       	std	Z+4, r18	; 0x04
        break;
      }
    }
  }
  prev_left_shoot = left_shoot;
     2ac:	90 93 f0 02 	sts	0x02F0, r25	; 0x8002f0 <prev_left_shoot>
  prev_right_shoot = right_shoot;
     2b0:	80 93 ef 02 	sts	0x02EF, r24	; 0x8002ef <prev_right_shoot>
     2b4:	e1 ef       	ldi	r30, 0xF1	; 241
     2b6:	f2 e0       	ldi	r31, 0x02	; 2
     2b8:	25 e0       	ldi	r18, 0x05	; 5
     2ba:	33 e0       	ldi	r19, 0x03	; 3
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
    else
      rows[rowIndex] &= ~(1 << colIndex);
     2bc:	41 e0       	ldi	r20, 0x01	; 1
     2be:	50 e0       	ldi	r21, 0x00	; 0
  prev_right_shoot = right_shoot;

  // Update bullet positions
  for (int i = 0; i < MAX_BULLETS; i++)
  {
    if (bullets[i].active)
     2c0:	84 81       	ldd	r24, Z+4	; 0x04
     2c2:	88 23       	and	r24, r24
     2c4:	09 f4       	brne	.+2      	; 0x2c8 <_Z14update_bulletsv+0x17e>
     2c6:	3f c0       	rjmp	.+126    	; 0x346 <_Z14update_bulletsv+0x1fc>
    {
      // Move the bullet upwards
      bullets[i].row--;
     2c8:	80 81       	ld	r24, Z
     2ca:	91 81       	ldd	r25, Z+1	; 0x01
     2cc:	01 97       	sbiw	r24, 0x01	; 1
     2ce:	91 83       	std	Z+1, r25	; 0x01
     2d0:	80 83       	st	Z, r24

      // Check if bullet reached the top or hit a brick
      if (bullets[i].row < 0)
     2d2:	99 23       	and	r25, r25
     2d4:	14 f4       	brge	.+4      	; 0x2da <_Z14update_bulletsv+0x190>
      {
        bullets[i].active = 0;
     2d6:	14 82       	std	Z+4, r1	; 0x04
        continue;
     2d8:	36 c0       	rjmp	.+108    	; 0x346 <_Z14update_bulletsv+0x1fc>
    int row;
    Proxy(int x) { row = x; }
    bool operator[](size_t colIndex) { return 1 & (row >> colIndex); }
  };

  Proxy operator[](size_t rowIndex) { return Proxy(rows[rowIndex]); }
     2da:	88 0f       	add	r24, r24
     2dc:	99 1f       	adc	r25, r25
     2de:	dc 01       	movw	r26, r24
     2e0:	a3 5e       	subi	r26, 0xE3	; 227
     2e2:	bc 4f       	sbci	r27, 0xFC	; 252
      if (bullets[i].row < 0)
      {
        bullets[i].active = 0;
        continue;
      }
      else if (bricks[bullets[i].row][bullets[i].col])
     2e4:	8d 91       	ld	r24, X+
     2e6:	9c 91       	ld	r25, X
     2e8:	02 80       	ldd	r0, Z+2	; 0x02
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <_Z14update_bulletsv+0x1a6>
     2ec:	95 95       	asr	r25
     2ee:	87 95       	ror	r24
     2f0:	0a 94       	dec	r0
     2f2:	e2 f7       	brpl	.-8      	; 0x2ec <_Z14update_bulletsv+0x1a2>
     2f4:	80 ff       	sbrs	r24, 0
     2f6:	27 c0       	rjmp	.+78     	; 0x346 <_Z14update_bulletsv+0x1fc>
      {
        PORTA |= (1 << SCORE_BUTTON_PIN); // to sound the beeper
     2f8:	da 9a       	sbi	0x1b, 2	; 27
     2fa:	87 ea       	ldi	r24, 0xA7	; 167
     2fc:	91 e6       	ldi	r25, 0x61	; 97
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	f1 f7       	brne	.-4      	; 0x2fe <_Z14update_bulletsv+0x1b4>
     302:	00 c0       	rjmp	.+0      	; 0x304 <_Z14update_bulletsv+0x1ba>
     304:	00 00       	nop
        _delay_ms(100);
        bricks.setBit(bullets[i].row, bullets[i].col, 0);
     306:	a0 81       	ld	r26, Z
     308:	b1 81       	ldd	r27, Z+1	; 0x01
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
    else
      rows[rowIndex] &= ~(1 << colIndex);
     30a:	aa 0f       	add	r26, r26
     30c:	bb 1f       	adc	r27, r27
     30e:	a3 5e       	subi	r26, 0xE3	; 227
     310:	bc 4f       	sbci	r27, 0xFC	; 252
     312:	ca 01       	movw	r24, r20
     314:	02 80       	ldd	r0, Z+2	; 0x02
     316:	02 c0       	rjmp	.+4      	; 0x31c <_Z14update_bulletsv+0x1d2>
     318:	88 0f       	add	r24, r24
     31a:	99 1f       	adc	r25, r25
     31c:	0a 94       	dec	r0
     31e:	e2 f7       	brpl	.-8      	; 0x318 <_Z14update_bulletsv+0x1ce>
     320:	80 95       	com	r24
     322:	90 95       	com	r25
     324:	6d 91       	ld	r22, X+
     326:	7c 91       	ld	r23, X
     328:	11 97       	sbiw	r26, 0x01	; 1
     32a:	86 23       	and	r24, r22
     32c:	97 23       	and	r25, r23
     32e:	8d 93       	st	X+, r24
     330:	9c 93       	st	X, r25
      {
        PORTA |= (1 << SCORE_BUTTON_PIN); // to sound the beeper
        _delay_ms(100);
        bricks.setBit(bullets[i].row, bullets[i].col, 0);
        // PORTA &= ~(1 << SCORE_BUTTON_PIN);
        --brick_count;
     332:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <brick_count>
     336:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <brick_count+0x1>
     33a:	01 97       	sbiw	r24, 0x01	; 1
     33c:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <brick_count+0x1>
     340:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <brick_count>
        bullets[i].active = 0;
     344:	14 82       	std	Z+4, r1	; 0x04
     346:	35 96       	adiw	r30, 0x05	; 5
  }
  prev_left_shoot = left_shoot;
  prev_right_shoot = right_shoot;

  // Update bullet positions
  for (int i = 0; i < MAX_BULLETS; i++)
     348:	e2 17       	cp	r30, r18
     34a:	f3 07       	cpc	r31, r19
     34c:	09 f0       	breq	.+2      	; 0x350 <_Z14update_bulletsv+0x206>
     34e:	b8 cf       	rjmp	.-144    	; 0x2c0 <_Z14update_bulletsv+0x176>
        --brick_count;
        bullets[i].active = 0;
      }
    }
  }
}
     350:	df 91       	pop	r29
     352:	cf 91       	pop	r28
     354:	08 95       	ret

00000356 <_Z10catch_lifev>:
LifeGain life_gain = {0, 0, 0}; // Initialize life_gain as inactive

// handle catching lives
void catch_life()
{
  if (life_gain.active && life_gain.row == paddle.row && (life_gain.col >= paddle.left() && life_gain.col <= paddle.right()))
     356:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <life_gain+0x4>
     35a:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <life_gain+0x5>
     35e:	89 2b       	or	r24, r25
     360:	c9 f1       	breq	.+114    	; 0x3d4 <_Z10catch_lifev+0x7e>
     362:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <life_gain>
     366:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <life_gain+0x1>
     36a:	80 91 13 03 	lds	r24, 0x0313	; 0x800313 <paddle+0x4>
     36e:	90 91 14 03 	lds	r25, 0x0314	; 0x800314 <paddle+0x5>
     372:	28 17       	cp	r18, r24
     374:	39 07       	cpc	r19, r25
     376:	71 f5       	brne	.+92     	; 0x3d4 <_Z10catch_lifev+0x7e>
     378:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <life_gain+0x2>
     37c:	30 91 ea 02 	lds	r19, 0x02EA	; 0x8002ea <life_gain+0x3>
    size = 5;
    row = wall.down;
    init();
  }

  int left() { return position - size / 2; }
     380:	ef e0       	ldi	r30, 0x0F	; 15
     382:	f3 e0       	ldi	r31, 0x03	; 3
     384:	40 81       	ld	r20, Z
     386:	51 81       	ldd	r21, Z+1	; 0x01
     388:	82 81       	ldd	r24, Z+2	; 0x02
     38a:	93 81       	ldd	r25, Z+3	; 0x03
     38c:	99 23       	and	r25, r25
     38e:	0c f4       	brge	.+2      	; 0x392 <_Z10catch_lifev+0x3c>
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	95 95       	asr	r25
     394:	87 95       	ror	r24
LifeGain life_gain = {0, 0, 0}; // Initialize life_gain as inactive

// handle catching lives
void catch_life()
{
  if (life_gain.active && life_gain.row == paddle.row && (life_gain.col >= paddle.left() && life_gain.col <= paddle.right()))
     396:	ba 01       	movw	r22, r20
     398:	68 1b       	sub	r22, r24
     39a:	79 0b       	sbc	r23, r25
     39c:	26 17       	cp	r18, r22
     39e:	37 07       	cpc	r19, r23
     3a0:	cc f0       	brlt	.+50     	; 0x3d4 <_Z10catch_lifev+0x7e>
     3a2:	84 0f       	add	r24, r20
     3a4:	95 1f       	adc	r25, r21
     3a6:	82 17       	cp	r24, r18
     3a8:	93 07       	cpc	r25, r19
     3aa:	a4 f0       	brlt	.+40     	; 0x3d4 <_Z10catch_lifev+0x7e>
  {
    life = life + 1;
     3ac:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <life>
     3b0:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <life+0x1>
     3b4:	01 96       	adiw	r24, 0x01	; 1
     3b6:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <life+0x1>
     3ba:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <life>
    // code to sound the beeper
    PORTC |= (1 << LIFE_GAIN_PIN);
     3be:	af 9a       	sbi	0x15, 7	; 21
     3c0:	87 ea       	ldi	r24, 0xA7	; 167
     3c2:	91 e6       	ldi	r25, 0x61	; 97
     3c4:	01 97       	sbiw	r24, 0x01	; 1
     3c6:	f1 f7       	brne	.-4      	; 0x3c4 <_Z10catch_lifev+0x6e>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <_Z10catch_lifev+0x74>
     3ca:	00 00       	nop
    _delay_ms(100);
    life_gain.active = 0;
     3cc:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <life_gain+0x5>
     3d0:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <life_gain+0x4>
     3d4:	08 95       	ret

000003d6 <_Z14init_life_gainv>:
  }
}

int life_gain_counter = 0; // for controlling the frequency of life gain
void init_life_gain()
{
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
  life_gain_counter++;
     3da:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <life_gain_counter>
     3de:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <life_gain_counter+0x1>
     3e2:	01 96       	adiw	r24, 0x01	; 1
     3e4:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <life_gain_counter+0x1>
     3e8:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <life_gain_counter>
  if (life_gain.active || life >= 3)
     3ec:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <life_gain+0x4>
     3f0:	30 91 ec 02 	lds	r19, 0x02EC	; 0x8002ec <life_gain+0x5>
     3f4:	23 2b       	or	r18, r19
     3f6:	39 f4       	brne	.+14     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3f8:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <life>
     3fc:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <life+0x1>
     400:	23 30       	cpi	r18, 0x03	; 3
     402:	31 05       	cpc	r19, r1
     404:	dc f0       	brlt	.+54     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
  {
    life_gain_counter = 0; // to make the frequency of life gain constant
     406:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <life_gain_counter+0x1>
     40a:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <life_gain_counter>
      life_gain.active = 1;
      life_gain.row = 0;
      life_gain.col = 1 + (rand() % (dimension - 2)); // to esnsure the life gain pattern is within the wall
    }
  }
}
     40e:	19 c0       	rjmp	.+50     	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
  {
    life_gain_counter = 0; // to make the frequency of life gain constant
  }
  if (life_gain_counter == 300)
  {
    life_gain_counter = 0;
     410:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <life_gain_counter+0x1>
     414:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <life_gain_counter>

    if (life_gain.active == 0 && life < 3)
    {
      life_gain.active = 1;
     418:	c7 ee       	ldi	r28, 0xE7	; 231
     41a:	d2 e0       	ldi	r29, 0x02	; 2
     41c:	81 e0       	ldi	r24, 0x01	; 1
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	9d 83       	std	Y+5, r25	; 0x05
     422:	8c 83       	std	Y+4, r24	; 0x04
      life_gain.row = 0;
     424:	19 82       	std	Y+1, r1	; 0x01
     426:	18 82       	st	Y, r1
      life_gain.col = 1 + (rand() % (dimension - 2)); // to esnsure the life gain pattern is within the wall
     428:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <rand>
     42c:	6e e0       	ldi	r22, 0x0E	; 14
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__divmodhi4>
     434:	01 96       	adiw	r24, 0x01	; 1
     436:	9b 83       	std	Y+3, r25	; 0x03
     438:	8a 83       	std	Y+2, r24	; 0x02
     43a:	03 c0       	rjmp	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
  life_gain_counter++;
  if (life_gain.active || life >= 3)
  {
    life_gain_counter = 0; // to make the frequency of life gain constant
  }
  if (life_gain_counter == 300)
     43c:	8c 32       	cpi	r24, 0x2C	; 44
     43e:	91 40       	sbci	r25, 0x01	; 1
     440:	39 f3       	breq	.-50     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
      life_gain.active = 1;
      life_gain.row = 0;
      life_gain.col = 1 + (rand() % (dimension - 2)); // to esnsure the life gain pattern is within the wall
    }
  }
}
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <_Z16update_life_gainv>:

int life_gain_speed = 0;
void update_life_gain()
{
  life_gain_speed++;
     448:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <life_gain_speed>
     44c:	90 91 e4 02 	lds	r25, 0x02E4	; 0x8002e4 <life_gain_speed+0x1>
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <life_gain_speed+0x1>
     456:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <life_gain_speed>
  if (life_gain_speed >= 15)
     45a:	0f 97       	sbiw	r24, 0x0f	; 15
     45c:	f4 f0       	brlt	.+60     	; 0x49a <_Z16update_life_gainv+0x52>
  {
    if (life_gain.active)
     45e:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <life_gain+0x4>
     462:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <life_gain+0x5>
     466:	89 2b       	or	r24, r25
     468:	a1 f0       	breq	.+40     	; 0x492 <_Z16update_life_gainv+0x4a>
    {
      life_gain.row++;
     46a:	e7 ee       	ldi	r30, 0xE7	; 231
     46c:	f2 e0       	ldi	r31, 0x02	; 2
     46e:	80 81       	ld	r24, Z
     470:	91 81       	ldd	r25, Z+1	; 0x01
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	91 83       	std	Z+1, r25	; 0x01
     476:	80 83       	st	Z, r24
      if (life_gain.row >= wall.down + 5)
     478:	20 91 1b 03 	lds	r18, 0x031B	; 0x80031b <wall+0x6>
     47c:	30 91 1c 03 	lds	r19, 0x031C	; 0x80031c <wall+0x7>
     480:	2b 5f       	subi	r18, 0xFB	; 251
     482:	3f 4f       	sbci	r19, 0xFF	; 255
     484:	82 17       	cp	r24, r18
     486:	93 07       	cpc	r25, r19
     488:	24 f0       	brlt	.+8      	; 0x492 <_Z16update_life_gainv+0x4a>
      {
        life_gain.active = 0;
     48a:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <life_gain+0x5>
     48e:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <life_gain+0x4>
      }
    }
    life_gain_speed = 0;
     492:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <life_gain_speed+0x1>
     496:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <life_gain_speed>
     49a:	08 95       	ret

0000049c <_Z12show_messagePA16_bb>:
    }
  }
} display;

void show_message(bool (*ara)[dimension], bool wait_for_button = true)
{
     49c:	7f 92       	push	r7
     49e:	8f 92       	push	r8
     4a0:	9f 92       	push	r9
     4a2:	af 92       	push	r10
     4a4:	bf 92       	push	r11
     4a6:	cf 92       	push	r12
     4a8:	df 92       	push	r13
     4aa:	ef 92       	push	r14
     4ac:	ff 92       	push	r15
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	76 2e       	mov	r7, r22
  int split4[10]; // 10 for out_of_bound safety

  void resetArray() { memset(ara, 0, sizeof ara); }
  inline void setArray(bool (*ara1)[dimension])
  {
    for (int i = 0; i < rows; ++i)
     4b8:	c0 90 6a 01 	lds	r12, 0x016A	; 0x80016a <display>
     4bc:	d0 90 6b 01 	lds	r13, 0x016B	; 0x80016b <display+0x1>
     4c0:	1c 14       	cp	r1, r12
     4c2:	1d 04       	cpc	r1, r13
     4c4:	0c f0       	brlt	.+2      	; 0x4c8 <_Z12show_messagePA16_bb+0x2c>
     4c6:	76 c1       	rjmp	.+748    	; 0x7b4 <_Z12show_messagePA16_bb+0x318>
      for (int j = 0; j < cols; ++j)
     4c8:	00 91 6c 01 	lds	r16, 0x016C	; 0x80016c <display+0x2>
     4cc:	10 91 6d 01 	lds	r17, 0x016D	; 0x80016d <display+0x3>
     4d0:	48 2f       	mov	r20, r24
     4d2:	59 2f       	mov	r21, r25
     4d4:	c2 e7       	ldi	r28, 0x72	; 114
     4d6:	d1 e0       	ldi	r29, 0x01	; 1
     4d8:	60 e0       	ldi	r22, 0x00	; 0
     4da:	70 e0       	ldi	r23, 0x00	; 0
     4dc:	10 16       	cp	r1, r16
     4de:	11 06       	cpc	r1, r17
     4e0:	4c f0       	brlt	.+18     	; 0x4f4 <_Z12show_messagePA16_bb+0x58>
     4e2:	12 c0       	rjmp	.+36     	; 0x508 <_Z12show_messagePA16_bb+0x6c>
  }

  void split()
  {
    // putting first 8*8 portion of display into split3
    for (int i = 0; i < splitrows; i++)
     4e4:	e0 90 6e 01 	lds	r14, 0x016E	; 0x80016e <display+0x4>
     4e8:	f0 90 6f 01 	lds	r15, 0x016F	; 0x80016f <display+0x5>
     4ec:	1e 14       	cp	r1, r14
     4ee:	1f 04       	cpc	r1, r15
     4f0:	a4 f0       	brlt	.+40     	; 0x51a <_Z12show_messagePA16_bb+0x7e>
     4f2:	b8 c0       	rjmp	.+368    	; 0x664 <_Z12show_messagePA16_bb+0x1c8>
     4f4:	98 01       	movw	r18, r16
     4f6:	24 0f       	add	r18, r20
     4f8:	35 1f       	adc	r19, r21

  void resetArray() { memset(ara, 0, sizeof ara); }
  inline void setArray(bool (*ara1)[dimension])
  {
    for (int i = 0; i < rows; ++i)
      for (int j = 0; j < cols; ++j)
     4fa:	de 01       	movw	r26, r28
     4fc:	fa 01       	movw	r30, r20
        ara[i][j] = ara1[i][j];
     4fe:	81 91       	ld	r24, Z+
     500:	8d 93       	st	X+, r24

  void resetArray() { memset(ara, 0, sizeof ara); }
  inline void setArray(bool (*ara1)[dimension])
  {
    for (int i = 0; i < rows; ++i)
      for (int j = 0; j < cols; ++j)
     502:	e2 17       	cp	r30, r18
     504:	f3 07       	cpc	r31, r19
     506:	d9 f7       	brne	.-10     	; 0x4fe <_Z12show_messagePA16_bb+0x62>
  int split4[10]; // 10 for out_of_bound safety

  void resetArray() { memset(ara, 0, sizeof ara); }
  inline void setArray(bool (*ara1)[dimension])
  {
    for (int i = 0; i < rows; ++i)
     508:	6f 5f       	subi	r22, 0xFF	; 255
     50a:	7f 4f       	sbci	r23, 0xFF	; 255
     50c:	40 5f       	subi	r20, 0xF0	; 240
     50e:	5f 4f       	sbci	r21, 0xFF	; 255
     510:	61 96       	adiw	r28, 0x11	; 17
     512:	6c 15       	cp	r22, r12
     514:	7d 05       	cpc	r23, r13
     516:	11 f7       	brne	.-60     	; 0x4dc <_Z12show_messagePA16_bb+0x40>
     518:	e5 cf       	rjmp	.-54     	; 0x4e4 <_Z12show_messagePA16_bb+0x48>
  {
    // putting first 8*8 portion of display into split3
    for (int i = 0; i < splitrows; i++)
    {
      split3[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
     51a:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <display+0x6>
     51e:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <display+0x7>
     522:	47 01       	movw	r8, r14
     524:	88 0c       	add	r8, r8
     526:	99 1c       	adc	r9, r9
     528:	d4 01       	movw	r26, r8
     52a:	a5 54       	subi	r26, 0x45	; 69
     52c:	bd 4f       	sbci	r27, 0xFD	; 253
     52e:	c2 e7       	ldi	r28, 0x72	; 114
     530:	d1 e0       	ldi	r29, 0x01	; 1
     532:	0f 2e       	mov	r0, r31
     534:	fb eb       	ldi	r31, 0xBB	; 187
     536:	af 2e       	mov	r10, r31
     538:	f2 e0       	ldi	r31, 0x02	; 2
     53a:	bf 2e       	mov	r11, r31
     53c:	f0 2d       	mov	r31, r0
     53e:	12 97       	sbiw	r26, 0x02	; 2
     540:	8d 01       	movw	r16, r26
  void split()
  {
    // putting first 8*8 portion of display into split3
    for (int i = 0; i < splitrows; i++)
    {
      split3[splitrows - i - 1] = 0;
     542:	11 96       	adiw	r26, 0x01	; 1
     544:	1c 92       	st	X, r1
     546:	1e 92       	st	-X, r1
      for (int j = 0; j < splitcols; j++)
     548:	16 16       	cp	r1, r22
     54a:	17 06       	cpc	r1, r23
     54c:	bc f4       	brge	.+46     	; 0x57c <_Z12show_messagePA16_bb+0xe0>
     54e:	fe 01       	movw	r30, r28
     550:	40 e0       	ldi	r20, 0x00	; 0
     552:	50 e0       	ldi	r21, 0x00	; 0
     554:	20 e0       	ldi	r18, 0x00	; 0
     556:	30 e0       	ldi	r19, 0x00	; 0
        split3[splitrows - i - 1] |= (ara[i][j] << j); // Using bitmasking to transform columns into a single integer
     558:	81 91       	ld	r24, Z+
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	02 2e       	mov	r0, r18
     55e:	02 c0       	rjmp	.+4      	; 0x564 <_Z12show_messagePA16_bb+0xc8>
     560:	88 0f       	add	r24, r24
     562:	99 1f       	adc	r25, r25
     564:	0a 94       	dec	r0
     566:	e2 f7       	brpl	.-8      	; 0x560 <_Z12show_messagePA16_bb+0xc4>
     568:	48 2b       	or	r20, r24
     56a:	59 2b       	or	r21, r25
  {
    // putting first 8*8 portion of display into split3
    for (int i = 0; i < splitrows; i++)
    {
      split3[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
     56c:	2f 5f       	subi	r18, 0xFF	; 255
     56e:	3f 4f       	sbci	r19, 0xFF	; 255
     570:	26 17       	cp	r18, r22
     572:	37 07       	cpc	r19, r23
     574:	89 f7       	brne	.-30     	; 0x558 <_Z12show_messagePA16_bb+0xbc>
     576:	f8 01       	movw	r30, r16
     578:	51 83       	std	Z+1, r21	; 0x01
     57a:	40 83       	st	Z, r20
     57c:	61 96       	adiw	r28, 0x11	; 17
  }

  void split()
  {
    // putting first 8*8 portion of display into split3
    for (int i = 0; i < splitrows; i++)
     57e:	aa 15       	cp	r26, r10
     580:	bb 05       	cpc	r27, r11
     582:	e9 f6       	brne	.-70     	; 0x53e <_Z12show_messagePA16_bb+0xa2>
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
    {
      split2[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
     584:	ea e6       	ldi	r30, 0x6A	; 106
     586:	f1 e0       	ldi	r31, 0x01	; 1
     588:	66 81       	ldd	r22, Z+6	; 0x06
     58a:	77 81       	ldd	r23, Z+7	; 0x07
     58c:	d4 01       	movw	r26, r8
     58e:	a9 55       	subi	r26, 0x59	; 89
     590:	bd 4f       	sbci	r27, 0xFD	; 253
     592:	c2 81       	ldd	r28, Z+2	; 0x02
     594:	d3 81       	ldd	r29, Z+3	; 0x03
     596:	c6 1b       	sub	r28, r22
     598:	d7 0b       	sbc	r29, r23
     59a:	ce 58       	subi	r28, 0x8E	; 142
     59c:	de 4f       	sbci	r29, 0xFE	; 254
     59e:	0f 2e       	mov	r0, r31
     5a0:	f7 ea       	ldi	r31, 0xA7	; 167
     5a2:	af 2e       	mov	r10, r31
     5a4:	f2 e0       	ldi	r31, 0x02	; 2
     5a6:	bf 2e       	mov	r11, r31
     5a8:	f0 2d       	mov	r31, r0
     5aa:	12 97       	sbiw	r26, 0x02	; 2
     5ac:	8d 01       	movw	r16, r26
        split3[splitrows - i - 1] |= (ara[i][j] << j); // Using bitmasking to transform columns into a single integer
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
    {
      split2[splitrows - i - 1] = 0;
     5ae:	11 96       	adiw	r26, 0x01	; 1
     5b0:	1c 92       	st	X, r1
     5b2:	1e 92       	st	-X, r1
      for (int j = 0; j < splitcols; j++)
     5b4:	16 16       	cp	r1, r22
     5b6:	17 06       	cpc	r1, r23
     5b8:	bc f4       	brge	.+46     	; 0x5e8 <_Z12show_messagePA16_bb+0x14c>
     5ba:	fe 01       	movw	r30, r28
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
        split2[splitrows - i - 1] |= (ara[i][cols - splitcols + j] << j);
     5c4:	81 91       	ld	r24, Z+
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	02 2e       	mov	r0, r18
     5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <_Z12show_messagePA16_bb+0x134>
     5cc:	88 0f       	add	r24, r24
     5ce:	99 1f       	adc	r25, r25
     5d0:	0a 94       	dec	r0
     5d2:	e2 f7       	brpl	.-8      	; 0x5cc <_Z12show_messagePA16_bb+0x130>
     5d4:	48 2b       	or	r20, r24
     5d6:	59 2b       	or	r21, r25
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
    {
      split2[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
     5d8:	2f 5f       	subi	r18, 0xFF	; 255
     5da:	3f 4f       	sbci	r19, 0xFF	; 255
     5dc:	26 17       	cp	r18, r22
     5de:	37 07       	cpc	r19, r23
     5e0:	89 f7       	brne	.-30     	; 0x5c4 <_Z12show_messagePA16_bb+0x128>
     5e2:	f8 01       	movw	r30, r16
     5e4:	51 83       	std	Z+1, r21	; 0x01
     5e6:	40 83       	st	Z, r20
     5e8:	61 96       	adiw	r28, 0x11	; 17
      split3[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
        split3[splitrows - i - 1] |= (ara[i][j] << j); // Using bitmasking to transform columns into a single integer
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
     5ea:	aa 15       	cp	r26, r10
     5ec:	bb 05       	cpc	r27, r11
     5ee:	e9 f6       	brne	.-70     	; 0x5aa <_Z12show_messagePA16_bb+0x10e>
    }
    // split4
    for (int i = 0; i < splitrows; i++)
    {
      split4[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
     5f0:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <display+0x6>
     5f4:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <display+0x7>
     5f8:	d7 01       	movw	r26, r14
     5fa:	aa 0f       	add	r26, r26
     5fc:	bb 1f       	adc	r27, r27
     5fe:	a1 53       	subi	r26, 0x31	; 49
     600:	bd 4f       	sbci	r27, 0xFD	; 253
     602:	81 e1       	ldi	r24, 0x11	; 17
     604:	8c 9d       	mul	r24, r12
     606:	e0 01       	movw	r28, r0
     608:	8d 9d       	mul	r24, r13
     60a:	d0 0d       	add	r29, r0
     60c:	11 24       	eor	r1, r1
     60e:	c6 0f       	add	r28, r22
     610:	d7 1f       	adc	r29, r23
     612:	cf 59       	subi	r28, 0x9F	; 159
     614:	de 4f       	sbci	r29, 0xFE	; 254
     616:	00 e0       	ldi	r16, 0x00	; 0
     618:	10 e0       	ldi	r17, 0x00	; 0
     61a:	12 97       	sbiw	r26, 0x02	; 2
     61c:	5d 01       	movw	r10, r26
        split2[splitrows - i - 1] |= (ara[i][cols - splitcols + j] << j);
    }
    // split4
    for (int i = 0; i < splitrows; i++)
    {
      split4[splitrows - i - 1] = 0;
     61e:	11 96       	adiw	r26, 0x01	; 1
     620:	1c 92       	st	X, r1
     622:	1e 92       	st	-X, r1
      for (int j = 0; j < splitcols; j++)
     624:	16 16       	cp	r1, r22
     626:	17 06       	cpc	r1, r23
     628:	bc f4       	brge	.+46     	; 0x658 <_Z12show_messagePA16_bb+0x1bc>
     62a:	fe 01       	movw	r30, r28
     62c:	40 e0       	ldi	r20, 0x00	; 0
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	20 e0       	ldi	r18, 0x00	; 0
     632:	30 e0       	ldi	r19, 0x00	; 0
        split4[splitrows - i - 1] |= (ara[rows - 1 - i][splitcols - 1 - j] << j);
     634:	82 91       	ld	r24, -Z
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	02 2e       	mov	r0, r18
     63a:	02 c0       	rjmp	.+4      	; 0x640 <_Z12show_messagePA16_bb+0x1a4>
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	0a 94       	dec	r0
     642:	e2 f7       	brpl	.-8      	; 0x63c <_Z12show_messagePA16_bb+0x1a0>
     644:	48 2b       	or	r20, r24
     646:	59 2b       	or	r21, r25
    }
    // split4
    for (int i = 0; i < splitrows; i++)
    {
      split4[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
     648:	2f 5f       	subi	r18, 0xFF	; 255
     64a:	3f 4f       	sbci	r19, 0xFF	; 255
     64c:	26 17       	cp	r18, r22
     64e:	37 07       	cpc	r19, r23
     650:	89 f7       	brne	.-30     	; 0x634 <_Z12show_messagePA16_bb+0x198>
     652:	f5 01       	movw	r30, r10
     654:	51 83       	std	Z+1, r21	; 0x01
     656:	40 83       	st	Z, r20
      split2[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
        split2[splitrows - i - 1] |= (ara[i][cols - splitcols + j] << j);
    }
    // split4
    for (int i = 0; i < splitrows; i++)
     658:	0f 5f       	subi	r16, 0xFF	; 255
     65a:	1f 4f       	sbci	r17, 0xFF	; 255
     65c:	61 97       	sbiw	r28, 0x11	; 17
     65e:	0e 15       	cp	r16, r14
     660:	1f 05       	cpc	r17, r15
     662:	dc f2       	brlt	.-74     	; 0x61a <_Z12show_messagePA16_bb+0x17e>
      split4[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
        split4[splitrows - i - 1] |= (ara[rows - 1 - i][splitcols - 1 - j] << j);
    }
    // last portion to the first matrix
    for (int i = rows - splitrows; i < rows; i++)
     664:	c6 01       	movw	r24, r12
     666:	8e 19       	sub	r24, r14
     668:	9f 09       	sbc	r25, r15
     66a:	8c 15       	cp	r24, r12
     66c:	9d 05       	cpc	r25, r13
     66e:	0c f0       	brlt	.+2      	; 0x672 <_Z12show_messagePA16_bb+0x1d6>
     670:	9b c0       	rjmp	.+310    	; 0x7a8 <_Z12show_messagePA16_bb+0x30c>
    {
      split1[i - rows + splitrows] = 0;
      for (int j = cols - splitcols; j < cols; j++)
     672:	ea e6       	ldi	r30, 0x6A	; 106
     674:	f1 e0       	ldi	r31, 0x01	; 1
     676:	c2 81       	ldd	r28, Z+2	; 0x02
     678:	d3 81       	ldd	r29, Z+3	; 0x03
     67a:	06 81       	ldd	r16, Z+6	; 0x06
     67c:	17 81       	ldd	r17, Z+7	; 0x07
     67e:	be 01       	movw	r22, r28
     680:	60 1b       	sub	r22, r16
     682:	71 0b       	sbc	r23, r17
     684:	dc 01       	movw	r26, r24
     686:	ac 19       	sub	r26, r12
     688:	bd 09       	sbc	r27, r13
     68a:	ae 0d       	add	r26, r14
     68c:	bf 1d       	adc	r27, r15
     68e:	aa 0f       	add	r26, r26
     690:	bb 1f       	adc	r27, r27
     692:	ad 56       	subi	r26, 0x6D	; 109
     694:	bd 4f       	sbci	r27, 0xFD	; 253
     696:	21 e1       	ldi	r18, 0x11	; 17
     698:	28 9f       	mul	r18, r24
     69a:	60 01       	movw	r12, r0
     69c:	29 9f       	mul	r18, r25
     69e:	d0 0c       	add	r13, r0
     6a0:	11 24       	eor	r1, r1
     6a2:	cb 01       	movw	r24, r22
     6a4:	8c 0d       	add	r24, r12
     6a6:	9d 1d       	adc	r25, r13
     6a8:	9c 01       	movw	r18, r24
     6aa:	2e 58       	subi	r18, 0x8E	; 142
     6ac:	3e 4f       	sbci	r19, 0xFE	; 254
     6ae:	69 01       	movw	r12, r18
     6b0:	c7 01       	movw	r24, r14
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	fc 01       	movw	r30, r24
     6b8:	ed 56       	subi	r30, 0x6D	; 109
     6ba:	fd 4f       	sbci	r31, 0xFD	; 253
     6bc:	5f 01       	movw	r10, r30
     6be:	7d 01       	movw	r14, r26
        split4[splitrows - i - 1] |= (ara[rows - 1 - i][splitcols - 1 - j] << j);
    }
    // last portion to the first matrix
    for (int i = rows - splitrows; i < rows; i++)
    {
      split1[i - rows + splitrows] = 0;
     6c0:	11 96       	adiw	r26, 0x01	; 1
     6c2:	1c 92       	st	X, r1
     6c4:	1e 92       	st	-X, r1
      for (int j = cols - splitcols; j < cols; j++)
     6c6:	6c 17       	cp	r22, r28
     6c8:	7d 07       	cpc	r23, r29
     6ca:	b4 f4       	brge	.+44     	; 0x6f8 <_Z12show_messagePA16_bb+0x25c>
     6cc:	98 01       	movw	r18, r16
     6ce:	21 50       	subi	r18, 0x01	; 1
     6d0:	31 09       	sbc	r19, r1
     6d2:	f6 01       	movw	r30, r12
     6d4:	40 e0       	ldi	r20, 0x00	; 0
     6d6:	50 e0       	ldi	r21, 0x00	; 0
        split1[i - rows + splitrows] |= (ara[i][j] << (cols - j - 1));
     6d8:	81 91       	ld	r24, Z+
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	02 2e       	mov	r0, r18
     6de:	02 c0       	rjmp	.+4      	; 0x6e4 <_Z12show_messagePA16_bb+0x248>
     6e0:	88 0f       	add	r24, r24
     6e2:	99 1f       	adc	r25, r25
     6e4:	0a 94       	dec	r0
     6e6:	e2 f7       	brpl	.-8      	; 0x6e0 <_Z12show_messagePA16_bb+0x244>
     6e8:	48 2b       	or	r20, r24
     6ea:	59 2b       	or	r21, r25
     6ec:	21 50       	subi	r18, 0x01	; 1
     6ee:	31 09       	sbc	r19, r1
     6f0:	98 f7       	brcc	.-26     	; 0x6d8 <_Z12show_messagePA16_bb+0x23c>
     6f2:	f7 01       	movw	r30, r14
     6f4:	51 83       	std	Z+1, r21	; 0x01
     6f6:	40 83       	st	Z, r20
     6f8:	12 96       	adiw	r26, 0x02	; 2
     6fa:	f1 e1       	ldi	r31, 0x11	; 17
     6fc:	cf 0e       	add	r12, r31
     6fe:	d1 1c       	adc	r13, r1
      split4[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
        split4[splitrows - i - 1] |= (ara[rows - 1 - i][splitcols - 1 - j] << j);
    }
    // last portion to the first matrix
    for (int i = rows - splitrows; i < rows; i++)
     700:	aa 16       	cp	r10, r26
     702:	bb 06       	cpc	r11, r27
     704:	e1 f6       	brne	.-72     	; 0x6be <_Z12show_messagePA16_bb+0x222>
     706:	50 c0       	rjmp	.+160    	; 0x7a8 <_Z12show_messagePA16_bb+0x30c>
  void send_to_driver()
  {
    split();
    for (uint8_t i = 1; i <= 8; i++)
    {
      select_Load();
     708:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z11select_Loadv>
     70c:	f8 01       	movw	r30, r16

      MAX7219_send2(i, split4[i - 1]);
     70e:	84 ad       	ldd	r24, Z+60	; 0x3c

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
     710:	cf b9       	out	0x0f, r28	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
     712:	77 9b       	sbis	0x0e, 7	; 14
     714:	fe cf       	rjmp	.-4      	; 0x712 <_Z12show_messagePA16_bb+0x276>

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
     716:	8f b9       	out	0x0f, r24	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
     718:	77 9b       	sbis	0x0e, 7	; 14
     71a:	fe cf       	rjmp	.-4      	; 0x718 <_Z12show_messagePA16_bb+0x27c>
    for (uint8_t i = 1; i <= 8; i++)
    {
      select_Load();

      MAX7219_send2(i, split4[i - 1]);
      MAX7219_send2(i, split3[i - 1]);
     71c:	80 a5       	ldd	r24, Z+40	; 0x28

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
     71e:	cf b9       	out	0x0f, r28	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
     720:	77 9b       	sbis	0x0e, 7	; 14
     722:	fe cf       	rjmp	.-4      	; 0x720 <_Z12show_messagePA16_bb+0x284>

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
     724:	8f b9       	out	0x0f, r24	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
     726:	77 9b       	sbis	0x0e, 7	; 14
     728:	fe cf       	rjmp	.-4      	; 0x726 <_Z12show_messagePA16_bb+0x28a>
    {
      select_Load();

      MAX7219_send2(i, split4[i - 1]);
      MAX7219_send2(i, split3[i - 1]);
      MAX7219_send2(i, split2[i - 1]);
     72a:	84 89       	ldd	r24, Z+20	; 0x14

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
     72c:	cf b9       	out	0x0f, r28	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
     72e:	77 9b       	sbis	0x0e, 7	; 14
     730:	fe cf       	rjmp	.-4      	; 0x72e <_Z12show_messagePA16_bb+0x292>

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
     732:	8f b9       	out	0x0f, r24	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
     734:	77 9b       	sbis	0x0e, 7	; 14
     736:	fe cf       	rjmp	.-4      	; 0x734 <_Z12show_messagePA16_bb+0x298>
     738:	0e 5f       	subi	r16, 0xFE	; 254
     73a:	1f 4f       	sbci	r17, 0xFF	; 255
      select_Load();

      MAX7219_send2(i, split4[i - 1]);
      MAX7219_send2(i, split3[i - 1]);
      MAX7219_send2(i, split2[i - 1]);
      MAX7219_send2(i, split1[i - 1]);
     73c:	80 81       	ld	r24, Z

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
     73e:	cf b9       	out	0x0f, r28	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
     740:	77 9b       	sbis	0x0e, 7	; 14
     742:	fe cf       	rjmp	.-4      	; 0x740 <_Z12show_messagePA16_bb+0x2a4>

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
     744:	8f b9       	out	0x0f, r24	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
     746:	77 9b       	sbis	0x0e, 7	; 14
     748:	fe cf       	rjmp	.-4      	; 0x746 <_Z12show_messagePA16_bb+0x2aa>
      MAX7219_send2(i, split4[i - 1]);
      MAX7219_send2(i, split3[i - 1]);
      MAX7219_send2(i, split2[i - 1]);
      MAX7219_send2(i, split1[i - 1]);

      deSelect_Load();
     74a:	0e 94 81 00 	call	0x102	; 0x102 <_Z13deSelect_Loadv>
  }

  void send_to_driver()
  {
    split();
    for (uint8_t i = 1; i <= 8; i++)
     74e:	cf 5f       	subi	r28, 0xFF	; 255
     750:	c9 30       	cpi	r28, 0x09	; 9
     752:	d1 f6       	brne	.-76     	; 0x708 <_Z12show_messagePA16_bb+0x26c>

void show_message(bool (*ara)[dimension], bool wait_for_button = true)
{
  display.setArray(ara);
  display.send_to_driver();
  if (wait_for_button)
     754:	77 20       	and	r7, r7
     756:	19 f0       	breq	.+6      	; 0x75e <_Z12show_messagePA16_bb+0x2c2>
    while (!(PINA & (1 << START_BUTTON_PIN)))
     758:	cc 9b       	sbis	0x19, 4	; 25
     75a:	fe cf       	rjmp	.-4      	; 0x758 <_Z12show_messagePA16_bb+0x2bc>
     75c:	29 c0       	rjmp	.+82     	; 0x7b0 <_Z12show_messagePA16_bb+0x314>
     75e:	2f e9       	ldi	r18, 0x9F	; 159
     760:	36 e8       	ldi	r19, 0x86	; 134
     762:	81 e0       	ldi	r24, 0x01	; 1
     764:	21 50       	subi	r18, 0x01	; 1
     766:	30 40       	sbci	r19, 0x00	; 0
     768:	80 40       	sbci	r24, 0x00	; 0
     76a:	e1 f7       	brne	.-8      	; 0x764 <_Z12show_messagePA16_bb+0x2c8>
     76c:	00 c0       	rjmp	.+0      	; 0x76e <_Z12show_messagePA16_bb+0x2d2>
     76e:	00 00       	nop
     770:	1f c0       	rjmp	.+62     	; 0x7b0 <_Z12show_messagePA16_bb+0x314>

  inline void turnoff()
  {
    // Turn off all LEDs
    for (uint8_t i = 1; i <= 8; i++)
      MAX7219_send(i, 0x00);
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	8c 2f       	mov	r24, r28
     776:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z12MAX7219_sendhh>
  }

  inline void turnoff()
  {
    // Turn off all LEDs
    for (uint8_t i = 1; i <= 8; i++)
     77a:	cf 5f       	subi	r28, 0xFF	; 255
     77c:	c9 30       	cpi	r28, 0x09	; 9
     77e:	c9 f7       	brne	.-14     	; 0x772 <_Z12show_messagePA16_bb+0x2d6>
     780:	9f e5       	ldi	r25, 0x5F	; 95
     782:	aa ee       	ldi	r26, 0xEA	; 234
     784:	b0 e0       	ldi	r27, 0x00	; 0
     786:	91 50       	subi	r25, 0x01	; 1
     788:	a0 40       	sbci	r26, 0x00	; 0
     78a:	b0 40       	sbci	r27, 0x00	; 0
     78c:	e1 f7       	brne	.-8      	; 0x786 <_Z12show_messagePA16_bb+0x2ea>
     78e:	00 c0       	rjmp	.+0      	; 0x790 <_Z12show_messagePA16_bb+0x2f4>
     790:	00 00       	nop
  int split1[10];
  int split2[10];
  int split3[10];
  int split4[10]; // 10 for out_of_bound safety

  void resetArray() { memset(ara, 0, sizeof ara); }
     792:	81 e2       	ldi	r24, 0x21	; 33
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	e2 e7       	ldi	r30, 0x72	; 114
     798:	f1 e0       	ldi	r31, 0x01	; 1
     79a:	df 01       	movw	r26, r30
     79c:	9c 01       	movw	r18, r24
     79e:	1d 92       	st	X+, r1
     7a0:	21 50       	subi	r18, 0x01	; 1
     7a2:	30 40       	sbci	r19, 0x00	; 0
     7a4:	e1 f7       	brne	.-8      	; 0x79e <_Z12show_messagePA16_bb+0x302>
  else
    _delay_ms(500);
  display.turnoff();
  _delay_ms(300);
  display.resetArray();
}
     7a6:	0f c0       	rjmp	.+30     	; 0x7c6 <_Z12show_messagePA16_bb+0x32a>
     7a8:	03 e9       	ldi	r16, 0x93	; 147
     7aa:	12 e0       	ldi	r17, 0x02	; 2
    }
    // last portion to the first matrix
    for (int i = rows - splitrows; i < rows; i++)
    {
      split1[i - rows + splitrows] = 0;
      for (int j = cols - splitcols; j < cols; j++)
     7ac:	c1 e0       	ldi	r28, 0x01	; 1
     7ae:	ac cf       	rjmp	.-168    	; 0x708 <_Z12show_messagePA16_bb+0x26c>
     7b0:	c1 e0       	ldi	r28, 0x01	; 1
     7b2:	df cf       	rjmp	.-66     	; 0x772 <_Z12show_messagePA16_bb+0x2d6>
  }

  void split()
  {
    // putting first 8*8 portion of display into split3
    for (int i = 0; i < splitrows; i++)
     7b4:	e0 90 6e 01 	lds	r14, 0x016E	; 0x80016e <display+0x4>
     7b8:	f0 90 6f 01 	lds	r15, 0x016F	; 0x80016f <display+0x5>
     7bc:	1e 14       	cp	r1, r14
     7be:	1f 04       	cpc	r1, r15
     7c0:	0c f4       	brge	.+2      	; 0x7c4 <_Z12show_messagePA16_bb+0x328>
     7c2:	ab ce       	rjmp	.-682    	; 0x51a <_Z12show_messagePA16_bb+0x7e>
     7c4:	4f cf       	rjmp	.-354    	; 0x664 <_Z12show_messagePA16_bb+0x1c8>
  else
    _delay_ms(500);
  display.turnoff();
  _delay_ms(300);
  display.resetArray();
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	df 90       	pop	r13
     7d4:	cf 90       	pop	r12
     7d6:	bf 90       	pop	r11
     7d8:	af 90       	pop	r10
     7da:	9f 90       	pop	r9
     7dc:	8f 90       	pop	r8
     7de:	7f 90       	pop	r7
     7e0:	08 95       	ret

000007e2 <_Z8level_upv>:

int speed = 8;
int bullet_speed = 3;
void level_up()
{
     7e2:	8f 92       	push	r8
     7e4:	9f 92       	push	r9
     7e6:	af 92       	push	r10
     7e8:	bf 92       	push	r11
     7ea:	cf 92       	push	r12
     7ec:	df 92       	push	r13
     7ee:	ef 92       	push	r14
     7f0:	ff 92       	push	r15
     7f2:	0f 93       	push	r16
     7f4:	1f 93       	push	r17
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
  for (int i = 0; i < MAX_BULLETS; i++)
    bullets[i].active = false;
     7fa:	e1 ef       	ldi	r30, 0xF1	; 241
     7fc:	f2 e0       	ldi	r31, 0x02	; 2
     7fe:	14 82       	std	Z+4, r1	; 0x04
     800:	11 86       	std	Z+9, r1	; 0x09
     802:	16 86       	std	Z+14, r1	; 0x0e
     804:	13 8a       	std	Z+19, r1	; 0x13

  level++;
     806:	c0 91 41 03 	lds	r28, 0x0341	; 0x800341 <level>
     80a:	d0 91 42 03 	lds	r29, 0x0342	; 0x800342 <level+0x1>
     80e:	ce 01       	movw	r24, r28
     810:	01 96       	adiw	r24, 0x01	; 1
     812:	90 93 42 03 	sts	0x0342, r25	; 0x800342 <level+0x1>
     816:	80 93 41 03 	sts	0x0341, r24	; 0x800341 <level>
  if (speed >= 0)
     81a:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <speed>
     81e:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <speed+0x1>
     822:	33 23       	and	r19, r19
     824:	0c f4       	brge	.+2      	; 0x828 <_Z8level_upv+0x46>
     826:	92 c1       	rjmp	.+804    	; 0xb4c <__stack+0x2ed>
    speed -= 2;
     828:	22 50       	subi	r18, 0x02	; 2
     82a:	31 09       	sbc	r19, r1
     82c:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <speed+0x1>
     830:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <speed>
  brick_count = 0;
     834:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <brick_count+0x1>
     838:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <brick_count>

  if (level == 2)
     83c:	82 30       	cpi	r24, 0x02	; 2
     83e:	91 05       	cpc	r25, r1
     840:	09 f0       	breq	.+2      	; 0x844 <_Z8level_upv+0x62>
     842:	4e c0       	rjmp	.+156    	; 0x8e0 <__stack+0x81>
     844:	e0 90 3f 03 	lds	r14, 0x033F	; 0x80033f <brick_count>
     848:	f0 90 40 03 	lds	r15, 0x0340	; 0x800340 <brick_count+0x1>
     84c:	cd e1       	ldi	r28, 0x1D	; 29
     84e:	d3 e0       	ldi	r29, 0x03	; 3
}

int speed = 8;
int bullet_speed = 3;
void level_up()
{
     850:	a1 2c       	mov	r10, r1
     852:	b1 2c       	mov	r11, r1
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
    else
      rows[rowIndex] &= ~(1 << colIndex);
     854:	01 e0       	ldi	r16, 0x01	; 1
     856:	10 e0       	ldi	r17, 0x00	; 0
  {
    // parallel line pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
      {
        if ((i + j) % 2 == 0 || (i + j) % 3 == 0)
     858:	0f 2e       	mov	r0, r31
     85a:	f3 e0       	ldi	r31, 0x03	; 3
     85c:	cf 2e       	mov	r12, r31
     85e:	d1 2c       	mov	r13, r1
     860:	f0 2d       	mov	r31, r0
     862:	95 01       	movw	r18, r10
}

int speed = 8;
int bullet_speed = 3;
void level_up()
{
     864:	e0 e0       	ldi	r30, 0x00	; 0
     866:	f0 e0       	ldi	r31, 0x00	; 0
  {
    // parallel line pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
      {
        if ((i + j) % 2 == 0 || (i + j) % 3 == 0)
     868:	82 2f       	mov	r24, r18
     86a:	93 2f       	mov	r25, r19
     86c:	20 ff       	sbrs	r18, 0
     86e:	05 c0       	rjmp	.+10     	; 0x87a <__stack+0x1b>
     870:	b6 01       	movw	r22, r12
     872:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <__divmodhi4>
     876:	89 2b       	or	r24, r25
     878:	81 f4       	brne	.+32     	; 0x89a <__stack+0x3b>
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
    else
      rows[rowIndex] &= ~(1 << colIndex);
     87a:	c8 01       	movw	r24, r16
     87c:	0e 2e       	mov	r0, r30
     87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
     880:	88 0f       	add	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	0a 94       	dec	r0
     886:	e2 f7       	brpl	.-8      	; 0x880 <__stack+0x21>
     888:	80 95       	com	r24
     88a:	90 95       	com	r25
     88c:	48 81       	ld	r20, Y
     88e:	59 81       	ldd	r21, Y+1	; 0x01
     890:	84 23       	and	r24, r20
     892:	95 23       	and	r25, r21
     894:	99 83       	std	Y+1, r25	; 0x01
     896:	88 83       	st	Y, r24
     898:	10 c0       	rjmp	.+32     	; 0x8ba <__stack+0x5b>

  // Function to set a specific bit
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
     89a:	48 81       	ld	r20, Y
     89c:	59 81       	ldd	r21, Y+1	; 0x01
     89e:	c8 01       	movw	r24, r16
     8a0:	0e 2e       	mov	r0, r30
     8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
     8a4:	88 0f       	add	r24, r24
     8a6:	99 1f       	adc	r25, r25
     8a8:	0a 94       	dec	r0
     8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
     8ac:	84 2b       	or	r24, r20
     8ae:	95 2b       	or	r25, r21
     8b0:	99 83       	std	Y+1, r25	; 0x01
     8b2:	88 83       	st	Y, r24
      for (int j = 0; j < dimension; j++)
      {
        if ((i + j) % 2 == 0 || (i + j) % 3 == 0)
          bricks.setBit(i, j, 0);
        else
          bricks.setBit(i, j, 1), brick_count++;
     8b4:	4f ef       	ldi	r20, 0xFF	; 255
     8b6:	e4 1a       	sub	r14, r20
     8b8:	f4 0a       	sbc	r15, r20

  if (level == 2)
  {
    // parallel line pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
     8ba:	31 96       	adiw	r30, 0x01	; 1
     8bc:	2f 5f       	subi	r18, 0xFF	; 255
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	e0 31       	cpi	r30, 0x10	; 16
     8c2:	f1 05       	cpc	r31, r1
     8c4:	89 f6       	brne	.-94     	; 0x868 <__stack+0x9>
  brick_count = 0;

  if (level == 2)
  {
    // parallel line pattern
    for (int i = 0; i < dimension / 2; i++)
     8c6:	8f ef       	ldi	r24, 0xFF	; 255
     8c8:	a8 1a       	sub	r10, r24
     8ca:	b8 0a       	sbc	r11, r24
     8cc:	22 96       	adiw	r28, 0x02	; 2
     8ce:	98 e0       	ldi	r25, 0x08	; 8
     8d0:	a9 16       	cp	r10, r25
     8d2:	b1 04       	cpc	r11, r1
     8d4:	31 f6       	brne	.-116    	; 0x862 <__stack+0x3>
     8d6:	f0 92 40 03 	sts	0x0340, r15	; 0x800340 <brick_count+0x1>
     8da:	e0 92 3f 03 	sts	0x033F, r14	; 0x80033f <brick_count>
     8de:	0b c1       	rjmp	.+534    	; 0xaf6 <__stack+0x297>
          bricks.setBit(i, j, 0);
        else
          bricks.setBit(i, j, 1), brick_count++;
      }
  }
  else if (level == 1)
     8e0:	81 30       	cpi	r24, 0x01	; 1
     8e2:	91 05       	cpc	r25, r1
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <__stack+0x89>
     8e6:	4e c0       	rjmp	.+156    	; 0x984 <__stack+0x125>
     8e8:	60 91 3f 03 	lds	r22, 0x033F	; 0x80033f <brick_count>
     8ec:	70 91 40 03 	lds	r23, 0x0340	; 0x800340 <brick_count+0x1>
     8f0:	ed e1       	ldi	r30, 0x1D	; 29
     8f2:	f3 e0       	ldi	r31, 0x03	; 3
     8f4:	40 e0       	ldi	r20, 0x00	; 0
     8f6:	50 e0       	ldi	r21, 0x00	; 0

  // Function to set a specific bit
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
     8f8:	a1 e0       	ldi	r26, 0x01	; 1
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
  {
    // pyramid pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
      {
        if ((i >= j && i < (dimension - j)) || (i < j && i >= (dimension - j - 1)))
     8fc:	0f e0       	ldi	r16, 0x0F	; 15
     8fe:	10 e0       	ldi	r17, 0x00	; 0
     900:	c0 e1       	ldi	r28, 0x10	; 16
     902:	d0 e0       	ldi	r29, 0x00	; 0
          bricks.setBit(i, j, 0);
        else
          bricks.setBit(i, j, 1), brick_count++;
      }
  }
  else if (level == 1)
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	90 e0       	ldi	r25, 0x00	; 0
  {
    // pyramid pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
      {
        if ((i >= j && i < (dimension - j)) || (i < j && i >= (dimension - j - 1)))
     908:	48 17       	cp	r20, r24
     90a:	59 07       	cpc	r21, r25
     90c:	3c f0       	brlt	.+14     	; 0x91c <__stack+0xbd>
     90e:	9e 01       	movw	r18, r28
     910:	28 1b       	sub	r18, r24
     912:	39 0b       	sbc	r19, r25
     914:	42 17       	cp	r20, r18
     916:	53 07       	cpc	r21, r19
     918:	3c f0       	brlt	.+14     	; 0x928 <__stack+0xc9>
     91a:	16 c0       	rjmp	.+44     	; 0x948 <__stack+0xe9>
     91c:	98 01       	movw	r18, r16
     91e:	28 1b       	sub	r18, r24
     920:	39 0b       	sbc	r19, r25
     922:	42 17       	cp	r20, r18
     924:	53 07       	cpc	r21, r19
     926:	84 f0       	brlt	.+32     	; 0x948 <__stack+0xe9>
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
    else
      rows[rowIndex] &= ~(1 << colIndex);
     928:	9d 01       	movw	r18, r26
     92a:	08 2e       	mov	r0, r24
     92c:	02 c0       	rjmp	.+4      	; 0x932 <__stack+0xd3>
     92e:	22 0f       	add	r18, r18
     930:	33 1f       	adc	r19, r19
     932:	0a 94       	dec	r0
     934:	e2 f7       	brpl	.-8      	; 0x92e <__stack+0xcf>
     936:	20 95       	com	r18
     938:	30 95       	com	r19
     93a:	e0 80       	ld	r14, Z
     93c:	f1 80       	ldd	r15, Z+1	; 0x01
     93e:	2e 21       	and	r18, r14
     940:	3f 21       	and	r19, r15
     942:	31 83       	std	Z+1, r19	; 0x01
     944:	20 83       	st	Z, r18
     946:	0f c0       	rjmp	.+30     	; 0x966 <__stack+0x107>

  // Function to set a specific bit
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
     948:	e0 80       	ld	r14, Z
     94a:	f1 80       	ldd	r15, Z+1	; 0x01
     94c:	9d 01       	movw	r18, r26
     94e:	08 2e       	mov	r0, r24
     950:	02 c0       	rjmp	.+4      	; 0x956 <__stack+0xf7>
     952:	22 0f       	add	r18, r18
     954:	33 1f       	adc	r19, r19
     956:	0a 94       	dec	r0
     958:	e2 f7       	brpl	.-8      	; 0x952 <__stack+0xf3>
     95a:	2e 29       	or	r18, r14
     95c:	3f 29       	or	r19, r15
     95e:	31 83       	std	Z+1, r19	; 0x01
     960:	20 83       	st	Z, r18
      for (int j = 0; j < dimension; j++)
      {
        if ((i >= j && i < (dimension - j)) || (i < j && i >= (dimension - j - 1)))
          bricks.setBit(i, j, 0);
        else
          bricks.setBit(i, j, 1), brick_count++;
     962:	6f 5f       	subi	r22, 0xFF	; 255
     964:	7f 4f       	sbci	r23, 0xFF	; 255
  }
  else if (level == 1)
  {
    // pyramid pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	80 31       	cpi	r24, 0x10	; 16
     96a:	91 05       	cpc	r25, r1
     96c:	69 f6       	brne	.-102    	; 0x908 <__stack+0xa9>
      }
  }
  else if (level == 1)
  {
    // pyramid pattern
    for (int i = 0; i < dimension / 2; i++)
     96e:	4f 5f       	subi	r20, 0xFF	; 255
     970:	5f 4f       	sbci	r21, 0xFF	; 255
     972:	32 96       	adiw	r30, 0x02	; 2
     974:	48 30       	cpi	r20, 0x08	; 8
     976:	51 05       	cpc	r21, r1
     978:	29 f6       	brne	.-118    	; 0x904 <__stack+0xa5>
     97a:	70 93 40 03 	sts	0x0340, r23	; 0x800340 <brick_count+0x1>
     97e:	60 93 3f 03 	sts	0x033F, r22	; 0x80033f <brick_count>
     982:	b9 c0       	rjmp	.+370    	; 0xaf6 <__stack+0x297>
          bricks.setBit(i, j, 0);
        else
          bricks.setBit(i, j, 1), brick_count++;
      }
  }
  else if (level == 3)
     984:	03 97       	sbiw	r24, 0x03	; 3
     986:	09 f0       	breq	.+2      	; 0x98a <__stack+0x12b>
     988:	3f c0       	rjmp	.+126    	; 0xa08 <__stack+0x1a9>
     98a:	60 91 3f 03 	lds	r22, 0x033F	; 0x80033f <brick_count>
     98e:	70 91 40 03 	lds	r23, 0x0340	; 0x800340 <brick_count+0x1>
     992:	ed e1       	ldi	r30, 0x1D	; 29
     994:	f3 e0       	ldi	r31, 0x03	; 3
     996:	40 e0       	ldi	r20, 0x00	; 0
     998:	50 e0       	ldi	r21, 0x00	; 0
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
    else
      rows[rowIndex] &= ~(1 << colIndex);
     99a:	a1 e0       	ldi	r26, 0x01	; 1
     99c:	b0 e0       	ldi	r27, 0x00	; 0
          bricks.setBit(i, j, 0);
        else
          bricks.setBit(i, j, 1), brick_count++;
      }
  }
  else if (level == 3)
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	90 e0       	ldi	r25, 0x00	; 0
  {
    // checkboard pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
      {
        if ((i + j) % 2 == 0)
     9a2:	9a 01       	movw	r18, r20
     9a4:	28 0f       	add	r18, r24
     9a6:	39 1f       	adc	r19, r25
     9a8:	20 fd       	sbrc	r18, 0
     9aa:	10 c0       	rjmp	.+32     	; 0x9cc <__stack+0x16d>

  // Function to set a specific bit
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
     9ac:	c0 81       	ld	r28, Z
     9ae:	d1 81       	ldd	r29, Z+1	; 0x01
     9b0:	9d 01       	movw	r18, r26
     9b2:	08 2e       	mov	r0, r24
     9b4:	02 c0       	rjmp	.+4      	; 0x9ba <__stack+0x15b>
     9b6:	22 0f       	add	r18, r18
     9b8:	33 1f       	adc	r19, r19
     9ba:	0a 94       	dec	r0
     9bc:	e2 f7       	brpl	.-8      	; 0x9b6 <__stack+0x157>
     9be:	2c 2b       	or	r18, r28
     9c0:	3d 2b       	or	r19, r29
     9c2:	31 83       	std	Z+1, r19	; 0x01
     9c4:	20 83       	st	Z, r18
    // checkboard pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
      {
        if ((i + j) % 2 == 0)
          bricks.setBit(i, j, 1), brick_count++;
     9c6:	6f 5f       	subi	r22, 0xFF	; 255
     9c8:	7f 4f       	sbci	r23, 0xFF	; 255
     9ca:	0f c0       	rjmp	.+30     	; 0x9ea <__stack+0x18b>
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
    else
      rows[rowIndex] &= ~(1 << colIndex);
     9cc:	9d 01       	movw	r18, r26
     9ce:	08 2e       	mov	r0, r24
     9d0:	02 c0       	rjmp	.+4      	; 0x9d6 <__stack+0x177>
     9d2:	22 0f       	add	r18, r18
     9d4:	33 1f       	adc	r19, r19
     9d6:	0a 94       	dec	r0
     9d8:	e2 f7       	brpl	.-8      	; 0x9d2 <__stack+0x173>
     9da:	20 95       	com	r18
     9dc:	30 95       	com	r19
     9de:	c0 81       	ld	r28, Z
     9e0:	d1 81       	ldd	r29, Z+1	; 0x01
     9e2:	2c 23       	and	r18, r28
     9e4:	3d 23       	and	r19, r29
     9e6:	31 83       	std	Z+1, r19	; 0x01
     9e8:	20 83       	st	Z, r18
  }
  else if (level == 3)
  {
    // checkboard pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
     9ea:	01 96       	adiw	r24, 0x01	; 1
     9ec:	80 31       	cpi	r24, 0x10	; 16
     9ee:	91 05       	cpc	r25, r1
     9f0:	c1 f6       	brne	.-80     	; 0x9a2 <__stack+0x143>
      }
  }
  else if (level == 3)
  {
    // checkboard pattern
    for (int i = 0; i < dimension / 2; i++)
     9f2:	4f 5f       	subi	r20, 0xFF	; 255
     9f4:	5f 4f       	sbci	r21, 0xFF	; 255
     9f6:	32 96       	adiw	r30, 0x02	; 2
     9f8:	48 30       	cpi	r20, 0x08	; 8
     9fa:	51 05       	cpc	r21, r1
     9fc:	81 f6       	brne	.-96     	; 0x99e <__stack+0x13f>
     9fe:	70 93 40 03 	sts	0x0340, r23	; 0x800340 <brick_count+0x1>
     a02:	60 93 3f 03 	sts	0x033F, r22	; 0x80033f <brick_count>
     a06:	77 c0       	rjmp	.+238    	; 0xaf6 <__stack+0x297>
  else
  {
    // random pattern
    // Adjust the probability of brick generation based on the level
    // Start with 50% probability and increase by 10% for each level above 3
    double brick_probability = 0.5 + (level - 4) * 0.1;
     a08:	be 01       	movw	r22, r28
     a0a:	63 50       	subi	r22, 0x03	; 3
     a0c:	71 09       	sbc	r23, r1
     a0e:	07 2e       	mov	r0, r23
     a10:	00 0c       	add	r0, r0
     a12:	88 0b       	sbc	r24, r24
     a14:	99 0b       	sbc	r25, r25
     a16:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__floatsisf>
     a1a:	2d ec       	ldi	r18, 0xCD	; 205
     a1c:	3c ec       	ldi	r19, 0xCC	; 204
     a1e:	4c ec       	ldi	r20, 0xCC	; 204
     a20:	5d e3       	ldi	r21, 0x3D	; 61
     a22:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <__mulsf3>
     a26:	20 e0       	ldi	r18, 0x00	; 0
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	40 e0       	ldi	r20, 0x00	; 0
     a2c:	5f e3       	ldi	r21, 0x3F	; 63
     a2e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <__addsf3>
     a32:	4b 01       	movw	r8, r22
     a34:	5c 01       	movw	r10, r24

    for (int i = 0; i < dimension / 2 + level - 3; i++)
     a36:	26 96       	adiw	r28, 0x06	; 6
     a38:	1c 16       	cp	r1, r28
     a3a:	1d 06       	cpc	r1, r29
     a3c:	0c f0       	brlt	.+2      	; 0xa40 <__stack+0x1e1>
     a3e:	5b c0       	rjmp	.+182    	; 0xaf6 <__stack+0x297>
     a40:	0d e1       	ldi	r16, 0x1D	; 29
     a42:	13 e0       	ldi	r17, 0x03	; 3
     a44:	c1 2c       	mov	r12, r1
     a46:	d1 2c       	mov	r13, r1
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
    else
      rows[rowIndex] &= ~(1 << colIndex);
     a48:	ee 24       	eor	r14, r14
     a4a:	e3 94       	inc	r14
     a4c:	f1 2c       	mov	r15, r1
    // random pattern
    // Adjust the probability of brick generation based on the level
    // Start with 50% probability and increase by 10% for each level above 3
    double brick_probability = 0.5 + (level - 4) * 0.1;

    for (int i = 0; i < dimension / 2 + level - 3; i++)
     a4e:	c0 e0       	ldi	r28, 0x00	; 0
     a50:	d0 e0       	ldi	r29, 0x00	; 0
      for (int j = 0; j < dimension; j++)
      {
        if ((rand() / (double)RAND_MAX) <= brick_probability)
     a52:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <rand>
     a56:	bc 01       	movw	r22, r24
     a58:	99 0f       	add	r25, r25
     a5a:	88 0b       	sbc	r24, r24
     a5c:	99 0b       	sbc	r25, r25
     a5e:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <__floatsisf>
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	3e ef       	ldi	r19, 0xFE	; 254
     a66:	4f ef       	ldi	r20, 0xFF	; 255
     a68:	56 e4       	ldi	r21, 0x46	; 70
     a6a:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <__divsf3>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	c5 01       	movw	r24, r10
     a74:	b4 01       	movw	r22, r8
     a76:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__gesf2>
     a7a:	88 23       	and	r24, r24
     a7c:	cc f0       	brlt	.+50     	; 0xab0 <__stack+0x251>

  // Function to set a specific bit
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
     a7e:	f8 01       	movw	r30, r16
     a80:	20 81       	ld	r18, Z
     a82:	31 81       	ldd	r19, Z+1	; 0x01
     a84:	c7 01       	movw	r24, r14
     a86:	0c 2e       	mov	r0, r28
     a88:	02 c0       	rjmp	.+4      	; 0xa8e <__stack+0x22f>
     a8a:	88 0f       	add	r24, r24
     a8c:	99 1f       	adc	r25, r25
     a8e:	0a 94       	dec	r0
     a90:	e2 f7       	brpl	.-8      	; 0xa8a <__stack+0x22b>
     a92:	82 2b       	or	r24, r18
     a94:	93 2b       	or	r25, r19
     a96:	f8 01       	movw	r30, r16
     a98:	91 83       	std	Z+1, r25	; 0x01
     a9a:	80 83       	st	Z, r24

    for (int i = 0; i < dimension / 2 + level - 3; i++)
      for (int j = 0; j < dimension; j++)
      {
        if ((rand() / (double)RAND_MAX) <= brick_probability)
          bricks.setBit(i, j, 1), brick_count++;
     a9c:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <brick_count>
     aa0:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <brick_count+0x1>
     aa4:	01 96       	adiw	r24, 0x01	; 1
     aa6:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <brick_count+0x1>
     aaa:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <brick_count>
     aae:	10 c0       	rjmp	.+32     	; 0xad0 <__stack+0x271>
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
    else
      rows[rowIndex] &= ~(1 << colIndex);
     ab0:	c7 01       	movw	r24, r14
     ab2:	0c 2e       	mov	r0, r28
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <__stack+0x25b>
     ab6:	88 0f       	add	r24, r24
     ab8:	99 1f       	adc	r25, r25
     aba:	0a 94       	dec	r0
     abc:	e2 f7       	brpl	.-8      	; 0xab6 <__stack+0x257>
     abe:	80 95       	com	r24
     ac0:	90 95       	com	r25
     ac2:	f8 01       	movw	r30, r16
     ac4:	20 81       	ld	r18, Z
     ac6:	31 81       	ldd	r19, Z+1	; 0x01
     ac8:	82 23       	and	r24, r18
     aca:	93 23       	and	r25, r19
     acc:	91 83       	std	Z+1, r25	; 0x01
     ace:	80 83       	st	Z, r24
    // Adjust the probability of brick generation based on the level
    // Start with 50% probability and increase by 10% for each level above 3
    double brick_probability = 0.5 + (level - 4) * 0.1;

    for (int i = 0; i < dimension / 2 + level - 3; i++)
      for (int j = 0; j < dimension; j++)
     ad0:	21 96       	adiw	r28, 0x01	; 1
     ad2:	c0 31       	cpi	r28, 0x10	; 16
     ad4:	d1 05       	cpc	r29, r1
     ad6:	09 f0       	breq	.+2      	; 0xada <__stack+0x27b>
     ad8:	bc cf       	rjmp	.-136    	; 0xa52 <__stack+0x1f3>
    // random pattern
    // Adjust the probability of brick generation based on the level
    // Start with 50% probability and increase by 10% for each level above 3
    double brick_probability = 0.5 + (level - 4) * 0.1;

    for (int i = 0; i < dimension / 2 + level - 3; i++)
     ada:	ff ef       	ldi	r31, 0xFF	; 255
     adc:	cf 1a       	sub	r12, r31
     ade:	df 0a       	sbc	r13, r31
     ae0:	0e 5f       	subi	r16, 0xFE	; 254
     ae2:	1f 4f       	sbci	r17, 0xFF	; 255
     ae4:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <level>
     ae8:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <level+0x1>
     aec:	05 96       	adiw	r24, 0x05	; 5
     aee:	c8 16       	cp	r12, r24
     af0:	d9 06       	cpc	r13, r25
     af2:	0c f4       	brge	.+2      	; 0xaf6 <__stack+0x297>
     af4:	ac cf       	rjmp	.-168    	; 0xa4e <__stack+0x1ef>
  int left = 0;
  int right = 15;
  int up = 0;
  int down = 15;

  int center_col() { return (left + right) / 2; } // returns the center column, useful for paddle initial position
     af6:	e5 e1       	ldi	r30, 0x15	; 21
     af8:	f3 e0       	ldi	r31, 0x03	; 3
     afa:	20 81       	ld	r18, Z
     afc:	31 81       	ldd	r19, Z+1	; 0x01
     afe:	82 81       	ldd	r24, Z+2	; 0x02
     b00:	93 81       	ldd	r25, Z+3	; 0x03
     b02:	82 0f       	add	r24, r18
     b04:	93 1f       	adc	r25, r19
     b06:	99 23       	and	r25, r25
     b08:	0c f4       	brge	.+2      	; 0xb0c <__stack+0x2ad>
     b0a:	01 96       	adiw	r24, 0x01	; 1
     b0c:	95 95       	asr	r25
     b0e:	87 95       	ror	r24
{
  int position; // position of the center of the paddle
  int size;
  int row;

  void init() { position = wall.center_col(); }
     b10:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <paddle+0x1>
     b14:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <paddle>
  int row, col;
  int row_dir, col_dir;

  void init() // sets the starting position of the ball
  {
    row = wall.down;
     b18:	e7 e0       	ldi	r30, 0x07	; 7
     b1a:	f3 e0       	ldi	r31, 0x03	; 3
     b1c:	20 91 1b 03 	lds	r18, 0x031B	; 0x80031b <wall+0x6>
     b20:	30 91 1c 03 	lds	r19, 0x031C	; 0x80031c <wall+0x7>
     b24:	31 83       	std	Z+1, r19	; 0x01
     b26:	20 83       	st	Z, r18
    col = paddle.position;
     b28:	93 83       	std	Z+3, r25	; 0x03
     b2a:	82 83       	std	Z+2, r24	; 0x02
    row_dir = -1;
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	9f ef       	ldi	r25, 0xFF	; 255
     b30:	95 83       	std	Z+5, r25	; 0x05
     b32:	84 83       	std	Z+4, r24	; 0x04
    col_dir = 0;
     b34:	17 82       	std	Z+7, r1	; 0x07
     b36:	16 82       	std	Z+6, r1	; 0x06
     b38:	2f e9       	ldi	r18, 0x9F	; 159
     b3a:	46 e8       	ldi	r20, 0x86	; 134
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	21 50       	subi	r18, 0x01	; 1
     b40:	40 40       	sbci	r20, 0x00	; 0
     b42:	80 40       	sbci	r24, 0x00	; 0
     b44:	e1 f7       	brne	.-8      	; 0xb3e <__stack+0x2df>
     b46:	00 c0       	rjmp	.+0      	; 0xb48 <__stack+0x2e9>
     b48:	00 00       	nop
  }

  paddle.init();
  ball.init();
  _delay_ms(500);
}
     b4a:	09 c0       	rjmp	.+18     	; 0xb5e <__stack+0x2ff>
    bullets[i].active = false;

  level++;
  if (speed >= 0)
    speed -= 2;
  brick_count = 0;
     b4c:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <brick_count+0x1>
     b50:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <brick_count>

  if (level == 2)
     b54:	82 30       	cpi	r24, 0x02	; 2
     b56:	91 05       	cpc	r25, r1
     b58:	09 f0       	breq	.+2      	; 0xb5c <__stack+0x2fd>
     b5a:	c2 ce       	rjmp	.-636    	; 0x8e0 <__stack+0x81>
     b5c:	73 ce       	rjmp	.-794    	; 0x844 <_Z8level_upv+0x62>
  }

  paddle.init();
  ball.init();
  _delay_ms(500);
}
     b5e:	df 91       	pop	r29
     b60:	cf 91       	pop	r28
     b62:	1f 91       	pop	r17
     b64:	0f 91       	pop	r16
     b66:	ff 90       	pop	r15
     b68:	ef 90       	pop	r14
     b6a:	df 90       	pop	r13
     b6c:	cf 90       	pop	r12
     b6e:	bf 90       	pop	r11
     b70:	af 90       	pop	r10
     b72:	9f 90       	pop	r9
     b74:	8f 90       	pop	r8
     b76:	08 95       	ret

00000b78 <_Z9game_initv>:

bool get_set_go[dimension][dimension];

void game_init()
{
     b78:	3f 92       	push	r3
     b7a:	4f 92       	push	r4
     b7c:	5f 92       	push	r5
     b7e:	6f 92       	push	r6
     b80:	7f 92       	push	r7
     b82:	8f 92       	push	r8
     b84:	9f 92       	push	r9
     b86:	af 92       	push	r10
     b88:	bf 92       	push	r11
     b8a:	cf 92       	push	r12
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
  PORTA |= (1 << RESET_BUTTON);
     b9a:	dd 9a       	sbi	0x1b, 5	; 27
  level_up();
     b9c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_Z8level_upv>

  // Initialize bullets
  for (int i = 0; i < MAX_BULLETS; i++)
    bullets[i].active = 0; // Bullet is inactive initially
     ba0:	e1 ef       	ldi	r30, 0xF1	; 241
     ba2:	f2 e0       	ldi	r31, 0x02	; 2
     ba4:	14 82       	std	Z+4, r1	; 0x04
     ba6:	11 86       	std	Z+9, r1	; 0x09
     ba8:	16 86       	std	Z+14, r1	; 0x0e
     baa:	13 8a       	std	Z+19, r1	; 0x13

  // showing get set go
  memset(get_set_go, 0, sizeof get_set_go);
     bac:	ca e6       	ldi	r28, 0x6A	; 106
     bae:	d0 e0       	ldi	r29, 0x00	; 0
     bb0:	00 e0       	ldi	r16, 0x00	; 0
     bb2:	11 e0       	ldi	r17, 0x01	; 1
     bb4:	fe 01       	movw	r30, r28
     bb6:	c8 01       	movw	r24, r16
     bb8:	11 92       	st	Z+, r1
     bba:	01 97       	sbiw	r24, 0x01	; 1
     bbc:	e9 f7       	brne	.-6      	; 0xbb8 <_Z9game_initv+0x40>
  get_set_go[0][1] = 1, get_set_go[0][2] = 1, get_set_go[0][3] = 1;
     bbe:	33 24       	eor	r3, r3
     bc0:	33 94       	inc	r3
     bc2:	39 82       	std	Y+1, r3	; 0x01
     bc4:	3a 82       	std	Y+2, r3	; 0x02
     bc6:	3b 82       	std	Y+3, r3	; 0x03
  get_set_go[0][5] = 1, get_set_go[0][6] = 1, get_set_go[0][7] = 1;
     bc8:	3d 82       	std	Y+5, r3	; 0x05
     bca:	3e 82       	std	Y+6, r3	; 0x06
     bcc:	3f 82       	std	Y+7, r3	; 0x07
  get_set_go[0][8] = 1, get_set_go[0][10] = 1, get_set_go[0][11] = 1;
     bce:	38 86       	std	Y+8, r3	; 0x08
     bd0:	3a 86       	std	Y+10, r3	; 0x0a
     bd2:	3b 86       	std	Y+11, r3	; 0x0b
  get_set_go[0][12] = 1, get_set_go[0][13] = 1, get_set_go[0][14] = 1;
     bd4:	3c 86       	std	Y+12, r3	; 0x0c
     bd6:	3d 86       	std	Y+13, r3	; 0x0d
     bd8:	3e 86       	std	Y+14, r3	; 0x0e
  get_set_go[1][0] = 1, get_set_go[1][5] = 1, get_set_go[1][12] = 1;
     bda:	38 8a       	std	Y+16, r3	; 0x10
     bdc:	3d 8a       	std	Y+21, r3	; 0x15
     bde:	3c 8e       	std	Y+28, r3	; 0x1c
  get_set_go[2][0] = 1, get_set_go[2][2] = 1, get_set_go[2][3] = 1;
     be0:	38 a2       	std	Y+32, r3	; 0x20
     be2:	3a a2       	std	Y+34, r3	; 0x22
     be4:	3b a2       	std	Y+35, r3	; 0x23
  get_set_go[2][5] = 1, get_set_go[2][6] = 1, get_set_go[2][7] = 1;
     be6:	3d a2       	std	Y+37, r3	; 0x25
     be8:	3e a2       	std	Y+38, r3	; 0x26
     bea:	3f a2       	std	Y+39, r3	; 0x27
  get_set_go[2][12] = 1, get_set_go[3][0] = 1, get_set_go[3][3] = 1;
     bec:	3c a6       	std	Y+44, r3	; 0x2c
     bee:	38 aa       	std	Y+48, r3	; 0x30
     bf0:	3b aa       	std	Y+51, r3	; 0x33
  get_set_go[3][5] = 1, get_set_go[3][12] = 1, get_set_go[4][1] = 1;
     bf2:	3d aa       	std	Y+53, r3	; 0x35
     bf4:	3c ae       	std	Y+60, r3	; 0x3c
     bf6:	30 92 ab 00 	sts	0x00AB, r3	; 0x8000ab <__data_end+0x41>
  get_set_go[4][2] = 1, get_set_go[4][3] = 1, get_set_go[4][5] = 1;
     bfa:	30 92 ac 00 	sts	0x00AC, r3	; 0x8000ac <__data_end+0x42>
     bfe:	30 92 ad 00 	sts	0x00AD, r3	; 0x8000ad <__data_end+0x43>
     c02:	30 92 af 00 	sts	0x00AF, r3	; 0x8000af <__data_end+0x45>
  get_set_go[4][6] = 1, get_set_go[4][7] = 1, get_set_go[4][8] = 1;
     c06:	30 92 b0 00 	sts	0x00B0, r3	; 0x8000b0 <__data_end+0x46>
     c0a:	e1 eb       	ldi	r30, 0xB1	; 177
     c0c:	f0 e0       	ldi	r31, 0x00	; 0
     c0e:	30 82       	st	Z, r3
     c10:	e2 eb       	ldi	r30, 0xB2	; 178
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	30 82       	st	Z, r3
  get_set_go[4][12] = 1, get_set_go[6][0] = 1, get_set_go[6][1] = 1;
     c16:	30 92 b6 00 	sts	0x00B6, r3	; 0x8000b6 <__data_end+0x4c>
     c1a:	30 92 ca 00 	sts	0x00CA, r3	; 0x8000ca <__data_end+0x60>
     c1e:	30 92 cb 00 	sts	0x00CB, r3	; 0x8000cb <__data_end+0x61>
  get_set_go[6][2] = 1, get_set_go[6][3] = 1, get_set_go[6][5] = 1;
     c22:	30 92 cc 00 	sts	0x00CC, r3	; 0x8000cc <__data_end+0x62>
     c26:	30 92 cd 00 	sts	0x00CD, r3	; 0x8000cd <__data_end+0x63>
     c2a:	30 92 cf 00 	sts	0x00CF, r3	; 0x8000cf <__data_end+0x65>
  get_set_go[6][6] = 1, get_set_go[6][7] = 1, get_set_go[6][8] = 1;
     c2e:	30 92 d0 00 	sts	0x00D0, r3	; 0x8000d0 <__data_end+0x66>
     c32:	e1 ed       	ldi	r30, 0xD1	; 209
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	30 82       	st	Z, r3
     c38:	e2 ed       	ldi	r30, 0xD2	; 210
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	30 82       	st	Z, r3
  get_set_go[6][10] = 1, get_set_go[6][11] = 1, get_set_go[6][12] = 1;
     c3e:	30 92 d4 00 	sts	0x00D4, r3	; 0x8000d4 <__data_end+0x6a>
     c42:	30 92 d5 00 	sts	0x00D5, r3	; 0x8000d5 <__data_end+0x6b>
     c46:	30 92 d6 00 	sts	0x00D6, r3	; 0x8000d6 <__data_end+0x6c>
  get_set_go[6][13] = 1, get_set_go[6][14] = 1, get_set_go[7][0] = 1;
     c4a:	30 92 d7 00 	sts	0x00D7, r3	; 0x8000d7 <__data_end+0x6d>
     c4e:	30 92 d8 00 	sts	0x00D8, r3	; 0x8000d8 <__data_end+0x6e>
     c52:	30 92 da 00 	sts	0x00DA, r3	; 0x8000da <__data_end+0x70>
  get_set_go[7][5] = 1, get_set_go[7][12] = 1, get_set_go[8][0] = 1;
     c56:	30 92 df 00 	sts	0x00DF, r3	; 0x8000df <__data_end+0x75>
     c5a:	30 92 e6 00 	sts	0x00E6, r3	; 0x8000e6 <__data_end+0x7c>
     c5e:	30 92 ea 00 	sts	0x00EA, r3	; 0x8000ea <__data_end+0x80>
  get_set_go[8][1] = 1, get_set_go[8][2] = 1, get_set_go[8][3] = 1;
     c62:	30 92 eb 00 	sts	0x00EB, r3	; 0x8000eb <__data_end+0x81>
     c66:	30 92 ec 00 	sts	0x00EC, r3	; 0x8000ec <__data_end+0x82>
     c6a:	30 92 ed 00 	sts	0x00ED, r3	; 0x8000ed <__data_end+0x83>
  get_set_go[8][5] = 1, get_set_go[8][6] = 1, get_set_go[8][7] = 1;
     c6e:	ef ee       	ldi	r30, 0xEF	; 239
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	30 82       	st	Z, r3
     c74:	e0 ef       	ldi	r30, 0xF0	; 240
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	30 82       	st	Z, r3
     c7a:	e1 ef       	ldi	r30, 0xF1	; 241
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	30 82       	st	Z, r3
  get_set_go[8][12] = 1, get_set_go[9][3] = 1, get_set_go[9][5] = 1;
     c80:	30 92 f6 00 	sts	0x00F6, r3	; 0x8000f6 <__data_end+0x8c>
     c84:	30 92 fd 00 	sts	0x00FD, r3	; 0x8000fd <__data_end+0x93>
     c88:	ef ef       	ldi	r30, 0xFF	; 255
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	30 82       	st	Z, r3
  get_set_go[9][12] = 1, get_set_go[10][0] = 1, get_set_go[10][1] = 1;
     c8e:	30 92 06 01 	sts	0x0106, r3	; 0x800106 <__data_end+0x9c>
     c92:	30 92 0a 01 	sts	0x010A, r3	; 0x80010a <__data_end+0xa0>
     c96:	30 92 0b 01 	sts	0x010B, r3	; 0x80010b <__data_end+0xa1>
  get_set_go[10][2] = 1, get_set_go[10][3] = 1, get_set_go[10][5] = 1;
     c9a:	30 92 0c 01 	sts	0x010C, r3	; 0x80010c <__data_end+0xa2>
     c9e:	30 92 0d 01 	sts	0x010D, r3	; 0x80010d <__data_end+0xa3>
     ca2:	ef e0       	ldi	r30, 0x0F	; 15
     ca4:	f1 e0       	ldi	r31, 0x01	; 1
     ca6:	30 82       	st	Z, r3
  get_set_go[10][6] = 1, get_set_go[10][7] = 1, get_set_go[10][8] = 1;
     ca8:	e0 e1       	ldi	r30, 0x10	; 16
     caa:	f1 e0       	ldi	r31, 0x01	; 1
     cac:	30 82       	st	Z, r3
     cae:	0f 2e       	mov	r0, r31
     cb0:	f1 e1       	ldi	r31, 0x11	; 17
     cb2:	4f 2e       	mov	r4, r31
     cb4:	f1 e0       	ldi	r31, 0x01	; 1
     cb6:	5f 2e       	mov	r5, r31
     cb8:	f0 2d       	mov	r31, r0
     cba:	f2 01       	movw	r30, r4
     cbc:	30 82       	st	Z, r3
     cbe:	0f 2e       	mov	r0, r31
     cc0:	f2 e1       	ldi	r31, 0x12	; 18
     cc2:	6f 2e       	mov	r6, r31
     cc4:	f1 e0       	ldi	r31, 0x01	; 1
     cc6:	7f 2e       	mov	r7, r31
     cc8:	f0 2d       	mov	r31, r0
     cca:	f3 01       	movw	r30, r6
     ccc:	30 82       	st	Z, r3
  get_set_go[10][12] = 1, get_set_go[12][4] = 1, get_set_go[12][5] = 1;
     cce:	30 92 16 01 	sts	0x0116, r3	; 0x800116 <__data_end+0xac>
     cd2:	0f 2e       	mov	r0, r31
     cd4:	fe e2       	ldi	r31, 0x2E	; 46
     cd6:	8f 2e       	mov	r8, r31
     cd8:	f1 e0       	ldi	r31, 0x01	; 1
     cda:	9f 2e       	mov	r9, r31
     cdc:	f0 2d       	mov	r31, r0
     cde:	f4 01       	movw	r30, r8
     ce0:	30 82       	st	Z, r3
     ce2:	0f 2e       	mov	r0, r31
     ce4:	ff e2       	ldi	r31, 0x2F	; 47
     ce6:	af 2e       	mov	r10, r31
     ce8:	f1 e0       	ldi	r31, 0x01	; 1
     cea:	bf 2e       	mov	r11, r31
     cec:	f0 2d       	mov	r31, r0
     cee:	f5 01       	movw	r30, r10
     cf0:	30 82       	st	Z, r3
  get_set_go[12][6] = 1, get_set_go[12][9] = 1, get_set_go[12][10] = 1;
     cf2:	0f 2e       	mov	r0, r31
     cf4:	f0 e3       	ldi	r31, 0x30	; 48
     cf6:	cf 2e       	mov	r12, r31
     cf8:	f1 e0       	ldi	r31, 0x01	; 1
     cfa:	df 2e       	mov	r13, r31
     cfc:	f0 2d       	mov	r31, r0
     cfe:	f6 01       	movw	r30, r12
     d00:	30 82       	st	Z, r3
     d02:	30 92 33 01 	sts	0x0133, r3	; 0x800133 <__data_end+0xc9>
     d06:	30 92 34 01 	sts	0x0134, r3	; 0x800134 <__data_end+0xca>
  get_set_go[12][11] = 1, get_set_go[13][3] = 1, get_set_go[13][8] = 1;
     d0a:	30 92 35 01 	sts	0x0135, r3	; 0x800135 <__data_end+0xcb>
     d0e:	30 92 3d 01 	sts	0x013D, r3	; 0x80013d <__data_end+0xd3>
     d12:	e2 e4       	ldi	r30, 0x42	; 66
     d14:	f1 e0       	ldi	r31, 0x01	; 1
     d16:	30 82       	st	Z, r3
  get_set_go[13][12] = 1, get_set_go[14][3] = 1, get_set_go[14][5] = 1;
     d18:	30 92 46 01 	sts	0x0146, r3	; 0x800146 <__data_end+0xdc>
     d1c:	30 92 4d 01 	sts	0x014D, r3	; 0x80014d <__data_end+0xe3>
     d20:	ef e4       	ldi	r30, 0x4F	; 79
     d22:	f1 e0       	ldi	r31, 0x01	; 1
     d24:	30 82       	st	Z, r3
  get_set_go[14][6] = 1, get_set_go[14][8] = 1, get_set_go[14][12] = 1;
     d26:	e0 e5       	ldi	r30, 0x50	; 80
     d28:	f1 e0       	ldi	r31, 0x01	; 1
     d2a:	30 82       	st	Z, r3
     d2c:	e2 e5       	ldi	r30, 0x52	; 82
     d2e:	f1 e0       	ldi	r31, 0x01	; 1
     d30:	30 82       	st	Z, r3
     d32:	30 92 56 01 	sts	0x0156, r3	; 0x800156 <__data_end+0xec>
  get_set_go[15][4] = 1, get_set_go[15][5] = 1, get_set_go[15][6] = 1;
     d36:	30 92 5e 01 	sts	0x015E, r3	; 0x80015e <__data_end+0xf4>
     d3a:	30 92 5f 01 	sts	0x015F, r3	; 0x80015f <__data_end+0xf5>
     d3e:	30 92 60 01 	sts	0x0160, r3	; 0x800160 <__data_end+0xf6>
  get_set_go[15][9] = 1, get_set_go[15][10] = 1, get_set_go[15][11] = 1;
     d42:	30 92 63 01 	sts	0x0163, r3	; 0x800163 <__data_end+0xf9>
     d46:	30 92 64 01 	sts	0x0164, r3	; 0x800164 <__data_end+0xfa>
     d4a:	30 92 65 01 	sts	0x0165, r3	; 0x800165 <__data_end+0xfb>
  show_message(get_set_go);
     d4e:	61 e0       	ldi	r22, 0x01	; 1
     d50:	ce 01       	movw	r24, r28
     d52:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z12show_messagePA16_bb>

  // showing 3
  memset(get_set_go, 0, sizeof get_set_go);
     d56:	fe 01       	movw	r30, r28
     d58:	c8 01       	movw	r24, r16
     d5a:	11 92       	st	Z+, r1
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	e9 f7       	brne	.-6      	; 0xd5a <_Z9game_initv+0x1e2>
  get_set_go[1][5] = 1, get_set_go[1][6] = 1, get_set_go[1][7] = 1;
     d60:	3d 8a       	std	Y+21, r3	; 0x15
     d62:	3e 8a       	std	Y+22, r3	; 0x16
     d64:	3f 8a       	std	Y+23, r3	; 0x17
  get_set_go[2][4] = 1, get_set_go[2][5] = 1, get_set_go[2][6] = 1;
     d66:	3c a2       	std	Y+36, r3	; 0x24
     d68:	3d a2       	std	Y+37, r3	; 0x25
     d6a:	3e a2       	std	Y+38, r3	; 0x26
  get_set_go[2][7] = 1, get_set_go[2][8] = 1, get_set_go[3][4] = 1;
     d6c:	3f a2       	std	Y+39, r3	; 0x27
     d6e:	38 a6       	std	Y+40, r3	; 0x28
     d70:	3c aa       	std	Y+52, r3	; 0x34
  get_set_go[3][8] = 1, get_set_go[3][9] = 1, get_set_go[4][9] = 1;
     d72:	38 ae       	std	Y+56, r3	; 0x38
     d74:	39 ae       	std	Y+57, r3	; 0x39
     d76:	0f 2e       	mov	r0, r31
     d78:	f3 eb       	ldi	r31, 0xB3	; 179
     d7a:	ef 2e       	mov	r14, r31
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	ff 2e       	mov	r15, r31
     d80:	f0 2d       	mov	r31, r0
     d82:	f7 01       	movw	r30, r14
     d84:	30 82       	st	Z, r3
  get_set_go[4][10] = 1, get_set_go[5][9] = 1, get_set_go[5][10] = 1;
     d86:	30 92 b4 00 	sts	0x00B4, r3	; 0x8000b4 <__data_end+0x4a>
     d8a:	e3 ec       	ldi	r30, 0xC3	; 195
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	30 82       	st	Z, r3
     d90:	30 92 c4 00 	sts	0x00C4, r3	; 0x8000c4 <__data_end+0x5a>
  get_set_go[6][8] = 1, get_set_go[6][9] = 1, get_set_go[7][6] = 1;
     d94:	e2 ed       	ldi	r30, 0xD2	; 210
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	30 82       	st	Z, r3
     d9a:	30 92 d3 00 	sts	0x00D3, r3	; 0x8000d3 <__data_end+0x69>
     d9e:	e0 ee       	ldi	r30, 0xE0	; 224
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	30 82       	st	Z, r3
  get_set_go[7][7] = 1, get_set_go[7][8] = 1, get_set_go[8][8] = 1;
     da4:	e1 ee       	ldi	r30, 0xE1	; 225
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	30 82       	st	Z, r3
     daa:	e2 ee       	ldi	r30, 0xE2	; 226
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	30 82       	st	Z, r3
     db0:	e2 ef       	ldi	r30, 0xF2	; 242
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	30 82       	st	Z, r3
  get_set_go[8][9] = 1, get_set_go[9][9] = 1, get_set_go[9][10] = 1;
     db6:	30 92 f3 00 	sts	0x00F3, r3	; 0x8000f3 <__data_end+0x89>
     dba:	30 92 03 01 	sts	0x0103, r3	; 0x800103 <__data_end+0x99>
     dbe:	30 92 04 01 	sts	0x0104, r3	; 0x800104 <__data_end+0x9a>
  get_set_go[10][9] = 1, get_set_go[10][10] = 1, get_set_go[11][4] = 1;
     dc2:	e3 e1       	ldi	r30, 0x13	; 19
     dc4:	f1 e0       	ldi	r31, 0x01	; 1
     dc6:	30 82       	st	Z, r3
     dc8:	30 92 14 01 	sts	0x0114, r3	; 0x800114 <__data_end+0xaa>
     dcc:	ee e1       	ldi	r30, 0x1E	; 30
     dce:	f1 e0       	ldi	r31, 0x01	; 1
     dd0:	30 82       	st	Z, r3
  get_set_go[11][8] = 1, get_set_go[11][9] = 1, get_set_go[12][4] = 1;
     dd2:	e2 e2       	ldi	r30, 0x22	; 34
     dd4:	f1 e0       	ldi	r31, 0x01	; 1
     dd6:	30 82       	st	Z, r3
     dd8:	e3 e2       	ldi	r30, 0x23	; 35
     dda:	f1 e0       	ldi	r31, 0x01	; 1
     ddc:	30 82       	st	Z, r3
     dde:	f4 01       	movw	r30, r8
     de0:	30 82       	st	Z, r3
  get_set_go[12][5] = 1, get_set_go[12][6] = 1, get_set_go[12][7] = 1;
     de2:	f5 01       	movw	r30, r10
     de4:	30 82       	st	Z, r3
     de6:	f6 01       	movw	r30, r12
     de8:	30 82       	st	Z, r3
     dea:	0f 2e       	mov	r0, r31
     dec:	f1 e3       	ldi	r31, 0x31	; 49
     dee:	af 2e       	mov	r10, r31
     df0:	f1 e0       	ldi	r31, 0x01	; 1
     df2:	bf 2e       	mov	r11, r31
     df4:	f0 2d       	mov	r31, r0
     df6:	f5 01       	movw	r30, r10
     df8:	30 82       	st	Z, r3
  get_set_go[12][8] = 1, get_set_go[13][5] = 1, get_set_go[13][6] = 1;
     dfa:	0f 2e       	mov	r0, r31
     dfc:	f2 e3       	ldi	r31, 0x32	; 50
     dfe:	8f 2e       	mov	r8, r31
     e00:	f1 e0       	ldi	r31, 0x01	; 1
     e02:	9f 2e       	mov	r9, r31
     e04:	f0 2d       	mov	r31, r0
     e06:	f4 01       	movw	r30, r8
     e08:	30 82       	st	Z, r3
     e0a:	ef e3       	ldi	r30, 0x3F	; 63
     e0c:	f1 e0       	ldi	r31, 0x01	; 1
     e0e:	30 82       	st	Z, r3
     e10:	e0 e4       	ldi	r30, 0x40	; 64
     e12:	f1 e0       	ldi	r31, 0x01	; 1
     e14:	30 82       	st	Z, r3
  get_set_go[13][7] = 1;
     e16:	e1 e4       	ldi	r30, 0x41	; 65
     e18:	f1 e0       	ldi	r31, 0x01	; 1
     e1a:	30 82       	st	Z, r3
  show_message(get_set_go, false);
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	ce 01       	movw	r24, r28
     e20:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z12show_messagePA16_bb>

  // showing 2
  memset(get_set_go, 0, sizeof get_set_go);
     e24:	fe 01       	movw	r30, r28
     e26:	c8 01       	movw	r24, r16
     e28:	11 92       	st	Z+, r1
     e2a:	01 97       	sbiw	r24, 0x01	; 1
     e2c:	e9 f7       	brne	.-6      	; 0xe28 <_Z9game_initv+0x2b0>
  get_set_go[1][6] = 1, get_set_go[1][7] = 1, get_set_go[2][5] = 1;
     e2e:	3e 8a       	std	Y+22, r3	; 0x16
     e30:	3f 8a       	std	Y+23, r3	; 0x17
     e32:	3d a2       	std	Y+37, r3	; 0x25
  get_set_go[2][6] = 1, get_set_go[2][7] = 1, get_set_go[2][8] = 1;
     e34:	3e a2       	std	Y+38, r3	; 0x26
     e36:	3f a2       	std	Y+39, r3	; 0x27
     e38:	38 a6       	std	Y+40, r3	; 0x28
  get_set_go[3][4] = 1, get_set_go[3][5] = 1, get_set_go[3][8] = 1;
     e3a:	3c aa       	std	Y+52, r3	; 0x34
     e3c:	3d aa       	std	Y+53, r3	; 0x35
     e3e:	38 ae       	std	Y+56, r3	; 0x38
  get_set_go[3][9] = 1, get_set_go[4][8] = 1, get_set_go[4][9] = 1;
     e40:	39 ae       	std	Y+57, r3	; 0x39
     e42:	e2 eb       	ldi	r30, 0xB2	; 178
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	30 82       	st	Z, r3
     e48:	f7 01       	movw	r30, r14
     e4a:	30 82       	st	Z, r3
  get_set_go[5][8] = 1, get_set_go[5][9] = 1, get_set_go[6][7] = 1;
     e4c:	0f 2e       	mov	r0, r31
     e4e:	f2 ec       	ldi	r31, 0xC2	; 194
     e50:	ef 2e       	mov	r14, r31
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	ff 2e       	mov	r15, r31
     e56:	f0 2d       	mov	r31, r0
     e58:	f7 01       	movw	r30, r14
     e5a:	30 82       	st	Z, r3
     e5c:	e3 ec       	ldi	r30, 0xC3	; 195
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	30 82       	st	Z, r3
     e62:	e1 ed       	ldi	r30, 0xD1	; 209
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	30 82       	st	Z, r3
  get_set_go[6][8] = 1, get_set_go[7][6] = 1, get_set_go[7][7] = 1;
     e68:	e2 ed       	ldi	r30, 0xD2	; 210
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	30 82       	st	Z, r3
     e6e:	e0 ee       	ldi	r30, 0xE0	; 224
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	30 82       	st	Z, r3
     e74:	e1 ee       	ldi	r30, 0xE1	; 225
     e76:	f0 e0       	ldi	r31, 0x00	; 0
     e78:	30 82       	st	Z, r3
  get_set_go[8][5] = 1, get_set_go[8][6] = 1, get_set_go[9][4] = 1;
     e7a:	ef ee       	ldi	r30, 0xEF	; 239
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	30 82       	st	Z, r3
     e80:	e0 ef       	ldi	r30, 0xF0	; 240
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	30 82       	st	Z, r3
     e86:	30 92 fe 00 	sts	0x00FE, r3	; 0x8000fe <__data_end+0x94>
  get_set_go[9][5] = 1, get_set_go[10][4] = 1, get_set_go[10][5] = 1;
     e8a:	ef ef       	ldi	r30, 0xFF	; 255
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	30 82       	st	Z, r3
     e90:	30 92 0e 01 	sts	0x010E, r3	; 0x80010e <__data_end+0xa4>
     e94:	ef e0       	ldi	r30, 0x0F	; 15
     e96:	f1 e0       	ldi	r31, 0x01	; 1
     e98:	30 82       	st	Z, r3
  get_set_go[10][6] = 1, get_set_go[10][7] = 1, get_set_go[10][8] = 1;
     e9a:	e0 e1       	ldi	r30, 0x10	; 16
     e9c:	f1 e0       	ldi	r31, 0x01	; 1
     e9e:	30 82       	st	Z, r3
     ea0:	f2 01       	movw	r30, r4
     ea2:	30 82       	st	Z, r3
     ea4:	f3 01       	movw	r30, r6
     ea6:	30 82       	st	Z, r3
  get_set_go[10][9] = 1, get_set_go[11][4] = 1, get_set_go[11][5] = 1;
     ea8:	e3 e1       	ldi	r30, 0x13	; 19
     eaa:	f1 e0       	ldi	r31, 0x01	; 1
     eac:	30 82       	st	Z, r3
     eae:	ee e1       	ldi	r30, 0x1E	; 30
     eb0:	f1 e0       	ldi	r31, 0x01	; 1
     eb2:	30 82       	st	Z, r3
     eb4:	30 92 1f 01 	sts	0x011F, r3	; 0x80011f <__data_end+0xb5>
  get_set_go[11][6] = 1, get_set_go[11][7] = 1, get_set_go[11][8] = 1;
     eb8:	30 92 20 01 	sts	0x0120, r3	; 0x800120 <__data_end+0xb6>
     ebc:	0f 2e       	mov	r0, r31
     ebe:	f1 e2       	ldi	r31, 0x21	; 33
     ec0:	cf 2e       	mov	r12, r31
     ec2:	f1 e0       	ldi	r31, 0x01	; 1
     ec4:	df 2e       	mov	r13, r31
     ec6:	f0 2d       	mov	r31, r0
     ec8:	f6 01       	movw	r30, r12
     eca:	30 82       	st	Z, r3
     ecc:	e2 e2       	ldi	r30, 0x22	; 34
     ece:	f1 e0       	ldi	r31, 0x01	; 1
     ed0:	30 82       	st	Z, r3
  get_set_go[11][9] = 1;
     ed2:	e3 e2       	ldi	r30, 0x23	; 35
     ed4:	f1 e0       	ldi	r31, 0x01	; 1
     ed6:	30 82       	st	Z, r3
  show_message(get_set_go, false);
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	ce 01       	movw	r24, r28
     edc:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z12show_messagePA16_bb>

  // showing 1
  memset(get_set_go, 0, sizeof get_set_go);
     ee0:	fe 01       	movw	r30, r28
     ee2:	c8 01       	movw	r24, r16
     ee4:	11 92       	st	Z+, r1
     ee6:	01 97       	sbiw	r24, 0x01	; 1
     ee8:	e9 f7       	brne	.-6      	; 0xee4 <_Z9game_initv+0x36c>
  get_set_go[1][7] = 1, get_set_go[1][8] = 1, get_set_go[2][6] = 1;
     eea:	3f 8a       	std	Y+23, r3	; 0x17
     eec:	38 8e       	std	Y+24, r3	; 0x18
     eee:	3e a2       	std	Y+38, r3	; 0x26
  get_set_go[2][7] = 1, get_set_go[2][8] = 1, get_set_go[3][5] = 1;
     ef0:	3f a2       	std	Y+39, r3	; 0x27
     ef2:	38 a6       	std	Y+40, r3	; 0x28
     ef4:	3d aa       	std	Y+53, r3	; 0x35
  get_set_go[3][6] = 1, get_set_go[3][7] = 1, get_set_go[3][8] = 1;
     ef6:	3e aa       	std	Y+54, r3	; 0x36
     ef8:	3f aa       	std	Y+55, r3	; 0x37
     efa:	38 ae       	std	Y+56, r3	; 0x38
  get_set_go[4][7] = 1, get_set_go[4][8] = 1, get_set_go[5][7] = 1;
     efc:	e1 eb       	ldi	r30, 0xB1	; 177
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	30 82       	st	Z, r3
     f02:	e2 eb       	ldi	r30, 0xB2	; 178
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	30 82       	st	Z, r3
     f08:	30 92 c1 00 	sts	0x00C1, r3	; 0x8000c1 <__data_end+0x57>
  get_set_go[5][8] = 1, get_set_go[6][7] = 1, get_set_go[6][8] = 1;
     f0c:	f7 01       	movw	r30, r14
     f0e:	30 82       	st	Z, r3
     f10:	e1 ed       	ldi	r30, 0xD1	; 209
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	30 82       	st	Z, r3
     f16:	e2 ed       	ldi	r30, 0xD2	; 210
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	30 82       	st	Z, r3
  get_set_go[7][7] = 1, get_set_go[7][8] = 1, get_set_go[8][7] = 1;
     f1c:	e1 ee       	ldi	r30, 0xE1	; 225
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	30 82       	st	Z, r3
     f22:	e2 ee       	ldi	r30, 0xE2	; 226
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	30 82       	st	Z, r3
     f28:	e1 ef       	ldi	r30, 0xF1	; 241
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	30 82       	st	Z, r3
  get_set_go[8][8] = 1, get_set_go[9][7] = 1, get_set_go[9][8] = 1;
     f2e:	e2 ef       	ldi	r30, 0xF2	; 242
     f30:	f0 e0       	ldi	r31, 0x00	; 0
     f32:	30 82       	st	Z, r3
     f34:	30 92 01 01 	sts	0x0101, r3	; 0x800101 <__data_end+0x97>
     f38:	30 92 02 01 	sts	0x0102, r3	; 0x800102 <__data_end+0x98>
  get_set_go[10][7] = 1, get_set_go[10][8] = 1, get_set_go[11][7] = 1;
     f3c:	f2 01       	movw	r30, r4
     f3e:	30 82       	st	Z, r3
     f40:	f3 01       	movw	r30, r6
     f42:	30 82       	st	Z, r3
     f44:	f6 01       	movw	r30, r12
     f46:	30 82       	st	Z, r3
  get_set_go[11][8] = 1, get_set_go[12][7] = 1, get_set_go[12][8] = 1;
     f48:	e2 e2       	ldi	r30, 0x22	; 34
     f4a:	f1 e0       	ldi	r31, 0x01	; 1
     f4c:	30 82       	st	Z, r3
     f4e:	f5 01       	movw	r30, r10
     f50:	30 82       	st	Z, r3
     f52:	f4 01       	movw	r30, r8
     f54:	30 82       	st	Z, r3
  get_set_go[13][5] = 1, get_set_go[13][6] = 1, get_set_go[13][7] = 1;
     f56:	ef e3       	ldi	r30, 0x3F	; 63
     f58:	f1 e0       	ldi	r31, 0x01	; 1
     f5a:	30 82       	st	Z, r3
     f5c:	e0 e4       	ldi	r30, 0x40	; 64
     f5e:	f1 e0       	ldi	r31, 0x01	; 1
     f60:	30 82       	st	Z, r3
     f62:	e1 e4       	ldi	r30, 0x41	; 65
     f64:	f1 e0       	ldi	r31, 0x01	; 1
     f66:	30 82       	st	Z, r3
  get_set_go[13][8] = 1, get_set_go[13][9] = 1, get_set_go[13][10] = 1;
     f68:	e2 e4       	ldi	r30, 0x42	; 66
     f6a:	f1 e0       	ldi	r31, 0x01	; 1
     f6c:	30 82       	st	Z, r3
     f6e:	30 92 43 01 	sts	0x0143, r3	; 0x800143 <__data_end+0xd9>
     f72:	30 92 44 01 	sts	0x0144, r3	; 0x800144 <__data_end+0xda>
  get_set_go[14][5] = 1, get_set_go[14][6] = 1, get_set_go[14][7] = 1;
     f76:	ef e4       	ldi	r30, 0x4F	; 79
     f78:	f1 e0       	ldi	r31, 0x01	; 1
     f7a:	30 82       	st	Z, r3
     f7c:	e0 e5       	ldi	r30, 0x50	; 80
     f7e:	f1 e0       	ldi	r31, 0x01	; 1
     f80:	30 82       	st	Z, r3
     f82:	30 92 51 01 	sts	0x0151, r3	; 0x800151 <__data_end+0xe7>
  get_set_go[14][8] = 1, get_set_go[14][9] = 1, get_set_go[14][10] = 1;
     f86:	e2 e5       	ldi	r30, 0x52	; 82
     f88:	f1 e0       	ldi	r31, 0x01	; 1
     f8a:	30 82       	st	Z, r3
     f8c:	30 92 53 01 	sts	0x0153, r3	; 0x800153 <__data_end+0xe9>
     f90:	30 92 54 01 	sts	0x0154, r3	; 0x800154 <__data_end+0xea>
  show_message(get_set_go, false);
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	ce 01       	movw	r24, r28
     f98:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z12show_messagePA16_bb>
}
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ff 90       	pop	r15
     fa6:	ef 90       	pop	r14
     fa8:	df 90       	pop	r13
     faa:	cf 90       	pop	r12
     fac:	bf 90       	pop	r11
     fae:	af 90       	pop	r10
     fb0:	9f 90       	pop	r9
     fb2:	8f 90       	pop	r8
     fb4:	7f 90       	pop	r7
     fb6:	6f 90       	pop	r6
     fb8:	5f 90       	pop	r5
     fba:	4f 90       	pop	r4
     fbc:	3f 90       	pop	r3
     fbe:	08 95       	ret

00000fc0 <_Z9game_overv>:
void game_over()
{
  memset(get_set_go, 0, sizeof get_set_go);
     fc0:	ea e6       	ldi	r30, 0x6A	; 106
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	91 e0       	ldi	r25, 0x01	; 1
     fc8:	df 01       	movw	r26, r30
     fca:	9c 01       	movw	r18, r24
     fcc:	1d 92       	st	X+, r1
     fce:	21 50       	subi	r18, 0x01	; 1
     fd0:	30 40       	sbci	r19, 0x00	; 0
     fd2:	e1 f7       	brne	.-8      	; 0xfcc <_Z9game_overv+0xc>
  get_set_go[1][1] = 1, get_set_go[1][2] = 1, get_set_go[1][4] = 1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	81 8b       	std	Z+17, r24	; 0x11
     fd8:	82 8b       	std	Z+18, r24	; 0x12
     fda:	84 8b       	std	Z+20, r24	; 0x14
  get_set_go[1][7] = 1, get_set_go[1][11] = 1, get_set_go[1][13] = 1;
     fdc:	87 8b       	std	Z+23, r24	; 0x17
     fde:	83 8f       	std	Z+27, r24	; 0x1b
     fe0:	85 8f       	std	Z+29, r24	; 0x1d
  get_set_go[1][14] = 1, get_set_go[1][15] = 1, get_set_go[2][0] = 1;
     fe2:	86 8f       	std	Z+30, r24	; 0x1e
     fe4:	87 8f       	std	Z+31, r24	; 0x1f
     fe6:	80 a3       	std	Z+32, r24	; 0x20
  get_set_go[2][3] = 1, get_set_go[2][5] = 1, get_set_go[2][7] = 1;
     fe8:	83 a3       	std	Z+35, r24	; 0x23
     fea:	85 a3       	std	Z+37, r24	; 0x25
     fec:	87 a3       	std	Z+39, r24	; 0x27
  get_set_go[2][8] = 1, get_set_go[2][10] = 1, get_set_go[2][11] = 1;
     fee:	80 a7       	std	Z+40, r24	; 0x28
     ff0:	82 a7       	std	Z+42, r24	; 0x2a
     ff2:	83 a7       	std	Z+43, r24	; 0x2b
  get_set_go[2][13] = 1, get_set_go[3][0] = 1, get_set_go[3][3] = 1;
     ff4:	85 a7       	std	Z+45, r24	; 0x2d
     ff6:	80 ab       	std	Z+48, r24	; 0x30
     ff8:	83 ab       	std	Z+51, r24	; 0x33
  get_set_go[3][4] = 1, get_set_go[3][5] = 1, get_set_go[3][7] = 1;
     ffa:	84 ab       	std	Z+52, r24	; 0x34
     ffc:	85 ab       	std	Z+53, r24	; 0x35
     ffe:	87 ab       	std	Z+55, r24	; 0x37
  get_set_go[3][9] = 1, get_set_go[3][11] = 1, get_set_go[3][13] = 1;
    1000:	81 af       	std	Z+57, r24	; 0x39
    1002:	83 af       	std	Z+59, r24	; 0x3b
    1004:	85 af       	std	Z+61, r24	; 0x3d
  get_set_go[3][14] = 1, get_set_go[4][0] = 1, get_set_go[4][2] = 1;
    1006:	86 af       	std	Z+62, r24	; 0x3e
    1008:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__data_end+0x40>
    100c:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <__data_end+0x42>
  get_set_go[4][3] = 1, get_set_go[4][5] = 1, get_set_go[4][7] = 1;
    1010:	80 93 ad 00 	sts	0x00AD, r24	; 0x8000ad <__data_end+0x43>
    1014:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <__data_end+0x45>
    1018:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__data_end+0x47>
  get_set_go[4][11] = 1, get_set_go[4][13] = 1, get_set_go[5][1] = 1;
    101c:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <__data_end+0x4b>
    1020:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <__data_end+0x4d>
    1024:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__data_end+0x51>
  get_set_go[5][2] = 1, get_set_go[5][3] = 1, get_set_go[5][5] = 1;
    1028:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__data_end+0x52>
    102c:	80 93 bd 00 	sts	0x00BD, r24	; 0x8000bd <__data_end+0x53>
    1030:	80 93 bf 00 	sts	0x00BF, r24	; 0x8000bf <__data_end+0x55>
  get_set_go[5][7] = 1, get_set_go[5][11] = 1, get_set_go[5][13] = 1;
    1034:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__data_end+0x57>
    1038:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__data_end+0x5b>
    103c:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <__data_end+0x5d>
  get_set_go[5][14] = 1, get_set_go[5][15] = 1, get_set_go[9][1] = 1;
    1040:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__data_end+0x5e>
    1044:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__data_end+0x5f>
    1048:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <__data_end+0x91>
  get_set_go[9][2] = 1, get_set_go[9][5] = 1, get_set_go[9][8] = 1;
    104c:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <__data_end+0x92>
    1050:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <__data_end+0x95>
    1054:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end+0x98>
  get_set_go[9][9] = 1, get_set_go[9][10] = 1, get_set_go[9][11] = 1;
    1058:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <__data_end+0x99>
    105c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end+0x9a>
    1060:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__data_end+0x9b>
  get_set_go[9][13] = 1, get_set_go[9][14] = 1, get_set_go[9][15] = 1;
    1064:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__data_end+0x9d>
    1068:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__data_end+0x9e>
    106c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <__data_end+0x9f>
  get_set_go[10][0] = 1, get_set_go[10][3] = 1, get_set_go[10][5] = 1;
    1070:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end+0xa0>
    1074:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <__data_end+0xa3>
    1078:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <__data_end+0xa5>
  get_set_go[10][8] = 1, get_set_go[10][9] = 1, get_set_go[10][13] = 1;
    107c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end+0xa8>
    1080:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <__data_end+0xa9>
    1084:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <__data_end+0xad>
  get_set_go[10][15] = 1, get_set_go[11][0] = 1, get_set_go[11][3] = 1;
    1088:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <__data_end+0xaf>
    108c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <__data_end+0xb0>
    1090:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <__data_end+0xb3>
  get_set_go[11][5] = 1, get_set_go[11][8] = 1, get_set_go[11][9] = 1;
    1094:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <__data_end+0xb5>
    1098:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <__data_end+0xb8>
    109c:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <__data_end+0xb9>
  get_set_go[11][10] = 1, get_set_go[11][13] = 1, get_set_go[11][14] = 1;
    10a0:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end+0xba>
    10a4:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <__data_end+0xbd>
    10a8:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__data_end+0xbe>
  get_set_go[11][15] = 1, get_set_go[12][0] = 1, get_set_go[12][3] = 1;
    10ac:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <__data_end+0xbf>
    10b0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__data_end+0xc0>
    10b4:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <__data_end+0xc3>
  get_set_go[12][5] = 1, get_set_go[12][8] = 1, get_set_go[12][9] = 1;
    10b8:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <__data_end+0xc5>
    10bc:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end+0xc8>
    10c0:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <__data_end+0xc9>
  get_set_go[12][13] = 1, get_set_go[12][14] = 1, get_set_go[13][1] = 1;
    10c4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <__data_end+0xcd>
    10c8:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <__data_end+0xce>
    10cc:	80 93 3b 01 	sts	0x013B, r24	; 0x80013b <__data_end+0xd1>
  get_set_go[13][2] = 1, get_set_go[13][6] = 1, get_set_go[13][7] = 1;
    10d0:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end+0xd2>
    10d4:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <__data_end+0xd6>
    10d8:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <__data_end+0xd7>
  get_set_go[13][9] = 1, get_set_go[13][10] = 1, get_set_go[13][11] = 1;
    10dc:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__data_end+0xd9>
    10e0:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end+0xda>
    10e4:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <__data_end+0xdb>
  get_set_go[13][13] = 1, get_set_go[13][15] = 1;
    10e8:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <__data_end+0xdd>
    10ec:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <__data_end+0xdf>
  show_message(get_set_go);
    10f0:	61 e0       	ldi	r22, 0x01	; 1
    10f2:	cf 01       	movw	r24, r30
    10f4:	0e 94 4e 02 	call	0x49c	; 0x49c <_Z12show_messagePA16_bb>
  reset(); // start all over
    10f8:	0e 94 55 00 	call	0xaa	; 0xaa <_Z5resetv>

000010fc <main>:
}

int main()
{
    10fc:	cf 93       	push	r28
    10fe:	df 93       	push	r29
    1100:	cd b7       	in	r28, 0x3d	; 61
    1102:	de b7       	in	r29, 0x3e	; 62
    1104:	28 97       	sbiw	r28, 0x08	; 8
    1106:	0f b6       	in	r0, 0x3f	; 63
    1108:	f8 94       	cli
    110a:	de bf       	out	0x3e, r29	; 62
    110c:	0f be       	out	0x3f, r0	; 63
    110e:	cd bf       	out	0x3d, r28	; 61
    ; // Wait for the watchdog timer to reset the microcontroller
}

inline void disableJTAG()
{
  MCUCSR |= (1 << JTD); // First write
    1110:	84 b7       	in	r24, 0x34	; 52
    1112:	80 68       	ori	r24, 0x80	; 128
    1114:	84 bf       	out	0x34, r24	; 52
  MCUCSR |= (1 << JTD); // Second write within four clock cycles
    1116:	84 b7       	in	r24, 0x34	; 52
    1118:	80 68       	ori	r24, 0x80	; 128
    111a:	84 bf       	out	0x34, r24	; 52
}

int main()
{
  disableJTAG();
  init_pins();
    111c:	0e 94 94 00 	call	0x128	; 0x128 <_Z9init_pinsv>
// LED DRIVER FROM HERE
// Function to initialize SPI communication
inline void SPI_init()
{
  // Set MOSI and SCK as output
  DDRB |= (1 << MOSI) | (1 << SCK);
    1120:	87 b3       	in	r24, 0x17	; 23
    1122:	80 6a       	ori	r24, 0xA0	; 160
    1124:	87 bb       	out	0x17, r24	; 23
  // Enable SPI, set as master, and clock to fosc/16
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
    1126:	81 e5       	ldi	r24, 0x51	; 81
    1128:	8d b9       	out	0x0d, r24	; 13
  // LED DRIVER FROM HERE
  // Initialize SPI communication
  SPI_init();

  // Set LOAD_PIN as output
  DDRB |= (1 << LOAD_PIN);
    112a:	bc 9a       	sbi	0x17, 4	; 23
  // Set LOAD_PIN high (deselect MAX7219 modules)
  PORTB |= (1 << LOAD_PIN);
    112c:	c4 9a       	sbi	0x18, 4	; 24

  // Initialize MAX7219 drivers
  initMAX7219();
    112e:	0e 94 83 00 	call	0x106	; 0x106 <_Z11initMAX7219v>
  bool pause_button;
  bool paused = false;

  int ball_counter = 0; // for slowing down the ball movement

  game_init();
    1132:	0e 94 bc 05 	call	0xb78	; 0xb78 <_Z9game_initv>
  bool left_button, right_button;
  bool prev_pause_button = false;
  bool pause_button;
  bool paused = false;

  int ball_counter = 0; // for slowing down the ball movement
    1136:	1d 82       	std	Y+5, r1	; 0x05
    1138:	1c 82       	std	Y+4, r1	; 0x04

  // for working on raising edge of push button
  bool left_button, right_button;
  bool prev_pause_button = false;
  bool pause_button;
  bool paused = false;
    113a:	1e 82       	std	Y+6, r1	; 0x06
  initMAX7219();
  // LED DRIVER ENDS HERE

  // for working on raising edge of push button
  bool left_button, right_button;
  bool prev_pause_button = false;
    113c:	90 e0       	ldi	r25, 0x00	; 0
    size = 5;
    row = wall.down;
    init();
  }

  int left() { return position - size / 2; }
    113e:	0f 2e       	mov	r0, r31
    1140:	ff e0       	ldi	r31, 0x0F	; 15
    1142:	2f 2e       	mov	r2, r31
    1144:	f3 e0       	ldi	r31, 0x03	; 3
    1146:	3f 2e       	mov	r3, r31
    1148:	f0 2d       	mov	r31, r0
    for (int i = paddle.left(); i <= paddle.right(); ++i)
      ara[paddle.row][i] = 1;
  }
  inline void ball_in_display()
  {
    if (ball.row <= wall.down)
    114a:	0f 2e       	mov	r0, r31
    114c:	f5 e1       	ldi	r31, 0x15	; 21
    114e:	cf 2e       	mov	r12, r31
    1150:	f3 e0       	ldi	r31, 0x03	; 3
    1152:	df 2e       	mov	r13, r31
    1154:	f0 2d       	mov	r31, r0
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
    else
      rows[rowIndex] &= ~(1 << colIndex);
    1156:	88 24       	eor	r8, r8
    1158:	83 94       	inc	r8
    115a:	91 2c       	mov	r9, r1
      col_dir = 1;
      goto collision;
    }
    if (nextcol() > wall.right)
    {
      col_dir = -1;
    115c:	66 24       	eor	r6, r6
    115e:	6a 94       	dec	r6
    1160:	76 2c       	mov	r7, r6
    1162:	01 c0       	rjmp	.+2      	; 0x1166 <main+0x6a>
    1164:	9b 81       	ldd	r25, Y+3	; 0x03
  game_init();
  // Main game loop
  while (1)
  {
    // Read button inputs
    left_button = PINA & (1 << LEFT_BUTTON_PIN);
    1166:	39 b3       	in	r19, 0x19	; 25
    right_button = PINA & (1 << RIGHT_BUTTON_PIN);
    1168:	29 b3       	in	r18, 0x19	; 25
    pause_button = PINA & (1 << START_BUTTON_PIN);
    116a:	89 b3       	in	r24, 0x19	; 25
    116c:	41 e0       	ldi	r20, 0x01	; 1
    116e:	4b 83       	std	Y+3, r20	; 0x03
    1170:	48 2f       	mov	r20, r24
    1172:	40 71       	andi	r20, 0x10	; 16
    1174:	84 ff       	sbrs	r24, 4
    1176:	1b 82       	std	Y+3, r1	; 0x03

    // pause and resume
    if (!prev_pause_button && pause_button)
    1178:	91 11       	cpse	r25, r1
    117a:	06 c0       	rjmp	.+12     	; 0x1188 <main+0x8c>
    117c:	44 23       	and	r20, r20
    117e:	21 f0       	breq	.+8      	; 0x1188 <main+0x8c>
      paused = !paused;
    1180:	81 e0       	ldi	r24, 0x01	; 1
    1182:	9e 81       	ldd	r25, Y+6	; 0x06
    1184:	98 27       	eor	r25, r24
    1186:	9e 83       	std	Y+6, r25	; 0x06
    prev_pause_button = pause_button;

    if (paused)
    1188:	ae 81       	ldd	r26, Y+6	; 0x06
    118a:	a1 11       	cpse	r26, r1
    118c:	eb cf       	rjmp	.-42     	; 0x1164 <main+0x68>
      continue;

    // paddle movement
    if (left_button) // level trigger
    118e:	30 ff       	sbrs	r19, 0
    1190:	18 c0       	rjmp	.+48     	; 0x11c2 <main+0xc6>
    size = 5;
    row = wall.down;
    init();
  }

  int left() { return position - size / 2; }
    1192:	f1 01       	movw	r30, r2
    1194:	40 81       	ld	r20, Z
    1196:	51 81       	ldd	r21, Z+1	; 0x01
  int right() { return position + size / 2; }

  inline void goleft()
  {
    if (left() > wall.left)
    1198:	82 81       	ldd	r24, Z+2	; 0x02
    119a:	93 81       	ldd	r25, Z+3	; 0x03
    119c:	99 23       	and	r25, r25
    119e:	0c f4       	brge	.+2      	; 0x11a2 <main+0xa6>
    11a0:	01 96       	adiw	r24, 0x01	; 1
    11a2:	95 95       	asr	r25
    11a4:	87 95       	ror	r24
    11a6:	ba 01       	movw	r22, r20
    11a8:	68 1b       	sub	r22, r24
    11aa:	79 0b       	sbc	r23, r25
    11ac:	d6 01       	movw	r26, r12
    11ae:	8d 91       	ld	r24, X+
    11b0:	9c 91       	ld	r25, X
    11b2:	86 17       	cp	r24, r22
    11b4:	97 07       	cpc	r25, r23
    11b6:	2c f4       	brge	.+10     	; 0x11c2 <main+0xc6>
      position--;
    11b8:	41 50       	subi	r20, 0x01	; 1
    11ba:	51 09       	sbc	r21, r1
    11bc:	f1 01       	movw	r30, r2
    11be:	51 83       	std	Z+1, r21	; 0x01
    11c0:	40 83       	st	Z, r20
      continue;

    // paddle movement
    if (left_button) // level trigger
      paddle.goleft();
    if (right_button)
    11c2:	21 ff       	sbrs	r18, 1
    11c4:	1a c0       	rjmp	.+52     	; 0x11fa <main+0xfe>
    row = wall.down;
    init();
  }

  int left() { return position - size / 2; }
  int right() { return position + size / 2; }
    11c6:	d1 01       	movw	r26, r2
    11c8:	2d 91       	ld	r18, X+
    11ca:	3c 91       	ld	r19, X
    11cc:	11 97       	sbiw	r26, 0x01	; 1
    if (left() > wall.left)
      position--;
  }
  inline void goright()
  {
    if (right() < wall.right)
    11ce:	12 96       	adiw	r26, 0x02	; 2
    11d0:	8d 91       	ld	r24, X+
    11d2:	9c 91       	ld	r25, X
    11d4:	13 97       	sbiw	r26, 0x03	; 3
    11d6:	99 23       	and	r25, r25
    11d8:	0c f4       	brge	.+2      	; 0x11dc <main+0xe0>
    11da:	01 96       	adiw	r24, 0x01	; 1
    11dc:	95 95       	asr	r25
    11de:	87 95       	ror	r24
    11e0:	82 0f       	add	r24, r18
    11e2:	93 1f       	adc	r25, r19
    11e4:	f6 01       	movw	r30, r12
    11e6:	42 81       	ldd	r20, Z+2	; 0x02
    11e8:	53 81       	ldd	r21, Z+3	; 0x03
    11ea:	84 17       	cp	r24, r20
    11ec:	95 07       	cpc	r25, r21
    11ee:	2c f4       	brge	.+10     	; 0x11fa <main+0xfe>
      position++;
    11f0:	2f 5f       	subi	r18, 0xFF	; 255
    11f2:	3f 4f       	sbci	r19, 0xFF	; 255
    11f4:	d1 01       	movw	r26, r2
    11f6:	2d 93       	st	X+, r18
    11f8:	3c 93       	st	X, r19
      paddle.goleft();
    if (right_button)
      paddle.goright();

    // Update ball position
    ball_counter++;
    11fa:	ec 81       	ldd	r30, Y+4	; 0x04
    11fc:	fd 81       	ldd	r31, Y+5	; 0x05
    11fe:	31 96       	adiw	r30, 0x01	; 1
    1200:	fd 83       	std	Y+5, r31	; 0x05
    1202:	ec 83       	std	Y+4, r30	; 0x04
    if (ball_counter >= speed)
    1204:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <speed>
    1208:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <speed+0x1>
    120c:	e8 17       	cp	r30, r24
    120e:	f9 07       	cpc	r31, r25
    1210:	0c f4       	brge	.+2      	; 0x1214 <main+0x118>
    1212:	1a c1       	rjmp	.+564    	; 0x1448 <main+0x34c>
  Ball() { init(); }

  int nextcol() { return col + col_dir; }
  int nextrow() { return row + row_dir; }
  bool valid_index(int row, int col) { return row < dimension && col < dimension && row >= 0 && col >= 0; }
  void update() { row = nextrow(), col = nextcol(); }
    1214:	a7 e0       	ldi	r26, 0x07	; 7
    1216:	b3 e0       	ldi	r27, 0x03	; 3
    1218:	2d 91       	ld	r18, X+
    121a:	3c 91       	ld	r19, X
    121c:	11 97       	sbiw	r26, 0x01	; 1
    121e:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <ball+0x4>
    1222:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <ball+0x5>
    1226:	82 0f       	add	r24, r18
    1228:	93 1f       	adc	r25, r19
    122a:	8d 93       	st	X+, r24
    122c:	9c 93       	st	X, r25
    122e:	20 91 09 03 	lds	r18, 0x0309	; 0x800309 <ball+0x2>
    1232:	30 91 0a 03 	lds	r19, 0x030A	; 0x80030a <ball+0x3>
    1236:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <ball+0x6>
    123a:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <ball+0x7>
    123e:	82 0f       	add	r24, r18
    1240:	93 1f       	adc	r25, r19
    1242:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <ball+0x3>
    1246:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <ball+0x2>
    col_dir = 0;
  }

  Ball() { init(); }

  int nextcol() { return col + col_dir; }
    124a:	60 91 09 03 	lds	r22, 0x0309	; 0x800309 <ball+0x2>
    124e:	70 91 0a 03 	lds	r23, 0x030A	; 0x80030a <ball+0x3>
    1252:	80 91 0d 03 	lds	r24, 0x030D	; 0x80030d <ball+0x6>
    1256:	90 91 0e 03 	lds	r25, 0x030E	; 0x80030e <ball+0x7>
    125a:	ab 01       	movw	r20, r22
    125c:	48 0f       	add	r20, r24
    125e:	59 1f       	adc	r21, r25
  int nextrow() { return row + row_dir; }
    1260:	e7 e0       	ldi	r30, 0x07	; 7
    1262:	f3 e0       	ldi	r31, 0x03	; 3
    1264:	20 81       	ld	r18, Z
    1266:	31 81       	ldd	r19, Z+1	; 0x01
    1268:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <ball+0x4>
    126c:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <ball+0x5>
    1270:	82 0f       	add	r24, r18
    1272:	93 1f       	adc	r25, r19
  void collision_check()
  {
  collision:
    // Check for collision with paddle
    int ncol = nextcol();
    if (nextrow() == paddle.row &&
    1274:	d1 01       	movw	r26, r2
    1276:	14 96       	adiw	r26, 0x04	; 4
    1278:	2d 91       	ld	r18, X+
    127a:	3c 91       	ld	r19, X
    127c:	15 97       	sbiw	r26, 0x05	; 5
    127e:	82 17       	cp	r24, r18
    1280:	93 07       	cpc	r25, r19
    1282:	09 f0       	breq	.+2      	; 0x1286 <main+0x18a>
    1284:	46 c0       	rjmp	.+140    	; 0x1312 <main+0x216>
    size = 5;
    row = wall.down;
    init();
  }

  int left() { return position - size / 2; }
    1286:	ed 91       	ld	r30, X+
    1288:	fc 91       	ld	r31, X
    128a:	11 97       	sbiw	r26, 0x01	; 1
    128c:	12 96       	adiw	r26, 0x02	; 2
    128e:	2d 91       	ld	r18, X+
    1290:	3c 91       	ld	r19, X
    1292:	13 97       	sbiw	r26, 0x03	; 3
    1294:	33 23       	and	r19, r19
    1296:	14 f4       	brge	.+4      	; 0x129c <main+0x1a0>
    1298:	2f 5f       	subi	r18, 0xFF	; 255
    129a:	3f 4f       	sbci	r19, 0xFF	; 255
    129c:	35 95       	asr	r19
    129e:	27 95       	ror	r18
    12a0:	df 01       	movw	r26, r30
    12a2:	a2 1b       	sub	r26, r18
    12a4:	b3 0b       	sbc	r27, r19
  void collision_check()
  {
  collision:
    // Check for collision with paddle
    int ncol = nextcol();
    if (nextrow() == paddle.row &&
    12a6:	4a 17       	cp	r20, r26
    12a8:	5b 07       	cpc	r21, r27
    12aa:	34 f0       	brlt	.+12     	; 0x12b8 <main+0x1bc>
        ((ncol >= paddle.left() && ncol <= paddle.right()) ||
    12ac:	8f 01       	movw	r16, r30
    12ae:	02 0f       	add	r16, r18
    12b0:	13 1f       	adc	r17, r19
    12b2:	04 17       	cp	r16, r20
    12b4:	15 07       	cpc	r17, r21
    12b6:	44 f4       	brge	.+16     	; 0x12c8 <main+0x1cc>
    12b8:	6a 17       	cp	r22, r26
    12ba:	7b 07       	cpc	r23, r27
    12bc:	54 f1       	brlt	.+84     	; 0x1312 <main+0x216>
  void collision_check()
  {
  collision:
    // Check for collision with paddle
    int ncol = nextcol();
    if (nextrow() == paddle.row &&
    12be:	2e 0f       	add	r18, r30
    12c0:	3f 1f       	adc	r19, r31
    12c2:	26 17       	cp	r18, r22
    12c4:	37 07       	cpc	r19, r23
    12c6:	2c f1       	brlt	.+74     	; 0x1312 <main+0x216>
        ((ncol >= paddle.left() && ncol <= paddle.right()) ||
         (col >= paddle.left() && col <= paddle.right())))
    {
      if (col < paddle.position)
    12c8:	6e 17       	cp	r22, r30
    12ca:	7f 07       	cpc	r23, r31
    12cc:	4c f4       	brge	.+18     	; 0x12e0 <main+0x1e4>
      {
        row_dir = -1;
    12ce:	70 92 0c 03 	sts	0x030C, r7	; 0x80030c <ball+0x5>
    12d2:	60 92 0b 03 	sts	0x030B, r6	; 0x80030b <ball+0x4>
        col_dir = -1;
    12d6:	70 92 0e 03 	sts	0x030E, r7	; 0x80030e <ball+0x7>
    12da:	60 92 0d 03 	sts	0x030D, r6	; 0x80030d <ball+0x6>
    12de:	b5 cf       	rjmp	.-150    	; 0x124a <main+0x14e>
      }
      else if (col == paddle.position)
    12e0:	6e 17       	cp	r22, r30
    12e2:	7f 07       	cpc	r23, r31
    12e4:	49 f4       	brne	.+18     	; 0x12f8 <main+0x1fc>
      {
        row_dir = -1;
    12e6:	70 92 0c 03 	sts	0x030C, r7	; 0x80030c <ball+0x5>
    12ea:	60 92 0b 03 	sts	0x030B, r6	; 0x80030b <ball+0x4>
        col_dir = 0;
    12ee:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <ball+0x7>
    12f2:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <ball+0x6>
    12f6:	a9 cf       	rjmp	.-174    	; 0x124a <main+0x14e>
      }
      else if (col > paddle.position)
    12f8:	e6 17       	cp	r30, r22
    12fa:	f7 07       	cpc	r31, r23
    12fc:	0c f0       	brlt	.+2      	; 0x1300 <main+0x204>
    12fe:	a5 cf       	rjmp	.-182    	; 0x124a <main+0x14e>
      {
        row_dir = -1;
    1300:	70 92 0c 03 	sts	0x030C, r7	; 0x80030c <ball+0x5>
    1304:	60 92 0b 03 	sts	0x030B, r6	; 0x80030b <ball+0x4>
        col_dir = 1;
    1308:	90 92 0e 03 	sts	0x030E, r9	; 0x80030e <ball+0x7>
    130c:	80 92 0d 03 	sts	0x030D, r8	; 0x80030d <ball+0x6>
    1310:	9c cf       	rjmp	.-200    	; 0x124a <main+0x14e>

      goto collision;
    }

    // Check for collision with walls
    if (nextrow() < wall.up)
    1312:	f6 01       	movw	r30, r12
    1314:	24 81       	ldd	r18, Z+4	; 0x04
    1316:	35 81       	ldd	r19, Z+5	; 0x05
    1318:	82 17       	cp	r24, r18
    131a:	93 07       	cpc	r25, r19
    131c:	2c f4       	brge	.+10     	; 0x1328 <main+0x22c>
    {
      row_dir = 1;
    131e:	90 92 0c 03 	sts	0x030C, r9	; 0x80030c <ball+0x5>
    1322:	80 92 0b 03 	sts	0x030B, r8	; 0x80030b <ball+0x4>
    1326:	91 cf       	rjmp	.-222    	; 0x124a <main+0x14e>
      goto collision; // Reflect ball downwards
    }
    if (nextcol() < wall.left)
    1328:	20 81       	ld	r18, Z
    132a:	31 81       	ldd	r19, Z+1	; 0x01
    132c:	42 17       	cp	r20, r18
    132e:	53 07       	cpc	r21, r19
    1330:	2c f4       	brge	.+10     	; 0x133c <main+0x240>
    { // Reflect ball horizontally
      col_dir = 1;
    1332:	90 92 0e 03 	sts	0x030E, r9	; 0x80030e <ball+0x7>
    1336:	80 92 0d 03 	sts	0x030D, r8	; 0x80030d <ball+0x6>
    133a:	87 cf       	rjmp	.-242    	; 0x124a <main+0x14e>
      goto collision;
    }
    if (nextcol() > wall.right)
    133c:	f6 01       	movw	r30, r12
    133e:	22 81       	ldd	r18, Z+2	; 0x02
    1340:	33 81       	ldd	r19, Z+3	; 0x03
    1342:	24 17       	cp	r18, r20
    1344:	35 07       	cpc	r19, r21
    1346:	2c f4       	brge	.+10     	; 0x1352 <main+0x256>
    {
      col_dir = -1;
    1348:	70 92 0e 03 	sts	0x030E, r7	; 0x80030e <ball+0x7>
    134c:	60 92 0d 03 	sts	0x030D, r6	; 0x80030d <ball+0x6>
    1350:	7c cf       	rjmp	.-264    	; 0x124a <main+0x14e>

  Ball() { init(); }

  int nextcol() { return col + col_dir; }
  int nextrow() { return row + row_dir; }
  bool valid_index(int row, int col) { return row < dimension && col < dimension && row >= 0 && col >= 0; }
    1352:	80 31       	cpi	r24, 0x10	; 16
    1354:	91 05       	cpc	r25, r1
    1356:	a0 f5       	brcc	.+104    	; 0x13c0 <main+0x2c4>
    1358:	40 31       	cpi	r20, 0x10	; 16
    135a:	51 05       	cpc	r21, r1
    135c:	08 f4       	brcc	.+2      	; 0x1360 <main+0x264>
    135e:	c7 c2       	rjmp	.+1422   	; 0x18ee <main+0x7f2>
    1360:	2f c0       	rjmp	.+94     	; 0x13c0 <main+0x2c4>

    // collision with bricks
    int nrow = nextrow(), ncol2 = nextcol();
    if (valid_index(nrow, ncol2) && bricks[nrow][ncol2])
    {
      PORTA |= (1 << SCORE_BUTTON_PIN); // to sound the beeper
    1362:	da 9a       	sbi	0x1b, 2	; 27
    1364:	a7 ea       	ldi	r26, 0xA7	; 167
    1366:	b1 e6       	ldi	r27, 0x61	; 97
    1368:	11 97       	sbiw	r26, 0x01	; 1
    136a:	f1 f7       	brne	.-4      	; 0x1368 <main+0x26c>
    136c:	00 c0       	rjmp	.+0      	; 0x136e <main+0x272>
    136e:	00 00       	nop
  void setBit(size_t rowIndex, size_t colIndex, bool value)
  {
    if (value)
      rows[rowIndex] |= (1 << colIndex);
    else
      rows[rowIndex] &= ~(1 << colIndex);
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	fc 01       	movw	r30, r24
    1376:	e3 5e       	subi	r30, 0xE3	; 227
    1378:	fc 4f       	sbci	r31, 0xFC	; 252
    137a:	c4 01       	movw	r24, r8
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <main+0x286>
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	4a 95       	dec	r20
    1384:	e2 f7       	brpl	.-8      	; 0x137e <main+0x282>
    1386:	80 95       	com	r24
    1388:	90 95       	com	r25
    138a:	20 81       	ld	r18, Z
    138c:	31 81       	ldd	r19, Z+1	; 0x01
    138e:	82 23       	and	r24, r18
    1390:	93 23       	and	r25, r19
    1392:	91 83       	std	Z+1, r25	; 0x01
    1394:	80 83       	st	Z, r24
    {
      PORTA |= (1 << SCORE_BUTTON_PIN); // to sound the beeper
      _delay_ms(100);

      bricks.setBit(nrow, ncol2, 0);
      --brick_count;
    1396:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <brick_count>
    139a:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <brick_count+0x1>
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	90 93 40 03 	sts	0x0340, r25	; 0x800340 <brick_count+0x1>
    13a4:	80 93 3f 03 	sts	0x033F, r24	; 0x80033f <brick_count>
      row_dir = -row_dir;
    13a8:	80 91 0b 03 	lds	r24, 0x030B	; 0x80030b <ball+0x4>
    13ac:	90 91 0c 03 	lds	r25, 0x030C	; 0x80030c <ball+0x5>
    13b0:	91 95       	neg	r25
    13b2:	81 95       	neg	r24
    13b4:	91 09       	sbc	r25, r1
    13b6:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <ball+0x5>
    13ba:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <ball+0x4>
    13be:	45 cf       	rjmp	.-374    	; 0x124a <main+0x14e>
    {
      ball.update();
      ball.collision_check();

      // check if bricks finished
      if (!brick_count)
    13c0:	80 91 3f 03 	lds	r24, 0x033F	; 0x80033f <brick_count>
    13c4:	90 91 40 03 	lds	r25, 0x0340	; 0x800340 <brick_count+0x1>
    13c8:	89 2b       	or	r24, r25
    13ca:	11 f4       	brne	.+4      	; 0x13d0 <main+0x2d4>
        level_up();
    13cc:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <_Z8level_upv>

      // check if ball gone down
      if (ball.row > wall.down)
    13d0:	e7 e0       	ldi	r30, 0x07	; 7
    13d2:	f3 e0       	ldi	r31, 0x03	; 3
    13d4:	20 81       	ld	r18, Z
    13d6:	31 81       	ldd	r19, Z+1	; 0x01
    13d8:	d6 01       	movw	r26, r12
    13da:	16 96       	adiw	r26, 0x06	; 6
    13dc:	8d 91       	ld	r24, X+
    13de:	9c 91       	ld	r25, X
    13e0:	17 97       	sbiw	r26, 0x07	; 7
    13e2:	82 17       	cp	r24, r18
    13e4:	93 07       	cpc	r25, r19
    13e6:	74 f5       	brge	.+92     	; 0x1444 <main+0x348>
      {
        PORTA |= (1 << LIFE_BUTTON_PIN); // to sound the beeper
    13e8:	db 9a       	sbi	0x1b, 3	; 27
    13ea:	e7 ea       	ldi	r30, 0xA7	; 167
    13ec:	f1 e6       	ldi	r31, 0x61	; 97
    13ee:	31 97       	sbiw	r30, 0x01	; 1
    13f0:	f1 f7       	brne	.-4      	; 0x13ee <main+0x2f2>
    13f2:	00 c0       	rjmp	.+0      	; 0x13f4 <main+0x2f8>
    13f4:	00 00       	nop
        _delay_ms(100);
        // PORTA &= ~(1 << LIFE_BUTTON_PIN); // to sound the beeper
        if (life)
    13f6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <life>
    13fa:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <life+0x1>
    13fe:	00 97       	sbiw	r24, 0x00	; 0
    1400:	f9 f0       	breq	.+62     	; 0x1440 <main+0x344>
        {
          life--;
    1402:	01 97       	sbiw	r24, 0x01	; 1
    1404:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <life+0x1>
    1408:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <life>
  int row, col;
  int row_dir, col_dir;

  void init() // sets the starting position of the ball
  {
    row = wall.down;
    140c:	16 96       	adiw	r26, 0x06	; 6
    140e:	8d 91       	ld	r24, X+
    1410:	9c 91       	ld	r25, X
    1412:	17 97       	sbiw	r26, 0x07	; 7
    1414:	e7 e0       	ldi	r30, 0x07	; 7
    1416:	f3 e0       	ldi	r31, 0x03	; 3
    1418:	91 83       	std	Z+1, r25	; 0x01
    141a:	80 83       	st	Z, r24
    col = paddle.position;
    141c:	d1 01       	movw	r26, r2
    141e:	8d 91       	ld	r24, X+
    1420:	9c 91       	ld	r25, X
    1422:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <ball+0x3>
    1426:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <ball+0x2>
    row_dir = -1;
    142a:	70 92 0c 03 	sts	0x030C, r7	; 0x80030c <ball+0x5>
    142e:	60 92 0b 03 	sts	0x030B, r6	; 0x80030b <ball+0x4>
    col_dir = 0;
    1432:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <ball+0x7>
    1436:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <ball+0x6>
        }
        else
          game_over();
      }

      ball_counter = 0;
    143a:	1d 82       	std	Y+5, r1	; 0x05
    143c:	1c 82       	std	Y+4, r1	; 0x04
    143e:	04 c0       	rjmp	.+8      	; 0x1448 <main+0x34c>
        {
          life--;
          ball.init(); // reviving if life remains
        }
        else
          game_over();
    1440:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <_Z9game_overv>
      }

      ball_counter = 0;
    1444:	1d 82       	std	Y+5, r1	; 0x05
    1446:	1c 82       	std	Y+4, r1	; 0x04
    }

    bullets_counter++;
    1448:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <bullets_counter>
    144c:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <bullets_counter+0x1>
    1450:	01 96       	adiw	r24, 0x01	; 1
    1452:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <bullets_counter+0x1>
    1456:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <bullets_counter>
    if (bullets_counter >= bullet_speed)
    145a:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <bullet_speed>
    145e:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <bullet_speed+0x1>
    1462:	82 17       	cp	r24, r18
    1464:	93 07       	cpc	r25, r19
    1466:	34 f0       	brlt	.+12     	; 0x1474 <main+0x378>
    {
      update_bullets();
    1468:	0e 94 a5 00 	call	0x14a	; 0x14a <_Z14update_bulletsv>
      bullets_counter = 0;
    146c:	10 92 06 03 	sts	0x0306, r1	; 0x800306 <bullets_counter+0x1>
    1470:	10 92 05 03 	sts	0x0305, r1	; 0x800305 <bullets_counter>
    }

    // Update life gain
    init_life_gain();
    1474:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <_Z14init_life_gainv>
    catch_life();
    1478:	0e 94 ab 01 	call	0x356	; 0x356 <_Z10catch_lifev>
    update_life_gain();
    147c:	0e 94 24 02 	call	0x448	; 0x448 <_Z16update_life_gainv>
  }
  Display() { resetArray(); } // initializing with 0

  inline void bricks_in_display()
  {
    for (int i = 0; i < rows; ++i)
    1480:	ea e6       	ldi	r30, 0x6A	; 106
    1482:	f1 e0       	ldi	r31, 0x01	; 1
    1484:	01 90       	ld	r0, Z+
    1486:	f0 81       	ld	r31, Z
    1488:	e0 2d       	mov	r30, r0
    148a:	fa 83       	std	Y+2, r31	; 0x02
    148c:	e9 83       	std	Y+1, r30	; 0x01
    148e:	1e 16       	cp	r1, r30
    1490:	1f 06       	cpc	r1, r31
    1492:	5c f5       	brge	.+86     	; 0x14ea <main+0x3ee>
      for (int j = 0; j < cols; ++j)
    1494:	40 91 6c 01 	lds	r20, 0x016C	; 0x80016c <display+0x2>
    1498:	50 91 6d 01 	lds	r21, 0x016D	; 0x80016d <display+0x3>
    149c:	02 e7       	ldi	r16, 0x72	; 114
    149e:	11 e0       	ldi	r17, 0x01	; 1
    14a0:	ad e1       	ldi	r26, 0x1D	; 29
    14a2:	b3 e0       	ldi	r27, 0x03	; 3
    14a4:	cf 01       	movw	r24, r30
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	9c 01       	movw	r18, r24
    14ac:	23 5e       	subi	r18, 0xE3	; 227
    14ae:	3c 4f       	sbci	r19, 0xFC	; 252
    14b0:	79 01       	movw	r14, r18
    14b2:	14 16       	cp	r1, r20
    14b4:	15 06       	cpc	r1, r21
    14b6:	9c f4       	brge	.+38     	; 0x14de <main+0x3e2>
    int row;
    Proxy(int x) { row = x; }
    bool operator[](size_t colIndex) { return 1 & (row >> colIndex); }
  };

  Proxy operator[](size_t rowIndex) { return Proxy(rows[rowIndex]); }
    14b8:	6d 91       	ld	r22, X+
    14ba:	7c 91       	ld	r23, X
    14bc:	11 97       	sbiw	r26, 0x01	; 1
    14be:	f8 01       	movw	r30, r16
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	90 e0       	ldi	r25, 0x00	; 0

  inline void bricks_in_display()
  {
    for (int i = 0; i < rows; ++i)
      for (int j = 0; j < cols; ++j)
        ara[i][j] = bricks[i][j];
    14c4:	9b 01       	movw	r18, r22
    14c6:	08 2e       	mov	r0, r24
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <main+0x3d2>
    14ca:	35 95       	asr	r19
    14cc:	27 95       	ror	r18
    14ce:	0a 94       	dec	r0
    14d0:	e2 f7       	brpl	.-8      	; 0x14ca <main+0x3ce>
    14d2:	21 70       	andi	r18, 0x01	; 1
    14d4:	21 93       	st	Z+, r18
  Display() { resetArray(); } // initializing with 0

  inline void bricks_in_display()
  {
    for (int i = 0; i < rows; ++i)
      for (int j = 0; j < cols; ++j)
    14d6:	01 96       	adiw	r24, 0x01	; 1
    14d8:	84 17       	cp	r24, r20
    14da:	95 07       	cpc	r25, r21
    14dc:	99 f7       	brne	.-26     	; 0x14c4 <main+0x3c8>
    14de:	0f 5e       	subi	r16, 0xEF	; 239
    14e0:	1f 4f       	sbci	r17, 0xFF	; 255
    14e2:	12 96       	adiw	r26, 0x02	; 2
  }
  Display() { resetArray(); } // initializing with 0

  inline void bricks_in_display()
  {
    for (int i = 0; i < rows; ++i)
    14e4:	ae 15       	cp	r26, r14
    14e6:	bf 05       	cpc	r27, r15
    14e8:	21 f7       	brne	.-56     	; 0x14b2 <main+0x3b6>
    size = 5;
    row = wall.down;
    init();
  }

  int left() { return position - size / 2; }
    14ea:	d1 01       	movw	r26, r2
    14ec:	2d 91       	ld	r18, X+
    14ee:	3c 91       	ld	r19, X
    14f0:	11 97       	sbiw	r26, 0x01	; 1
    14f2:	12 96       	adiw	r26, 0x02	; 2
    14f4:	8d 91       	ld	r24, X+
    14f6:	9c 91       	ld	r25, X
    14f8:	13 97       	sbiw	r26, 0x03	; 3
    14fa:	99 23       	and	r25, r25
    14fc:	0c f4       	brge	.+2      	; 0x1500 <main+0x404>
    14fe:	01 96       	adiw	r24, 0x01	; 1
    1500:	ac 01       	movw	r20, r24
    1502:	55 95       	asr	r21
    1504:	47 95       	ror	r20
    1506:	c9 01       	movw	r24, r18
    1508:	84 1b       	sub	r24, r20
    150a:	95 0b       	sbc	r25, r21
  int right() { return position + size / 2; }
    150c:	42 0f       	add	r20, r18
    150e:	53 1f       	adc	r21, r19
      for (int j = 0; j < cols; ++j)
        ara[i][j] = bricks[i][j];
  }
  inline void paddle_in_display()
  {
    for (int i = paddle.left(); i <= paddle.right(); ++i)
    1510:	48 17       	cp	r20, r24
    1512:	59 07       	cpc	r21, r25
    1514:	a4 f0       	brlt	.+40     	; 0x153e <main+0x442>
    1516:	f1 01       	movw	r30, r2
    1518:	64 81       	ldd	r22, Z+4	; 0x04
    151a:	75 81       	ldd	r23, Z+5	; 0x05
    151c:	e1 e1       	ldi	r30, 0x11	; 17
    151e:	e6 9f       	mul	r30, r22
    1520:	90 01       	movw	r18, r0
    1522:	e7 9f       	mul	r30, r23
    1524:	30 0d       	add	r19, r0
    1526:	11 24       	eor	r1, r1
    1528:	28 0f       	add	r18, r24
    152a:	39 1f       	adc	r19, r25
    152c:	f9 01       	movw	r30, r18
    152e:	ee 58       	subi	r30, 0x8E	; 142
    1530:	fe 4f       	sbci	r31, 0xFE	; 254
      ara[paddle.row][i] = 1;
    1532:	21 e0       	ldi	r18, 0x01	; 1
    1534:	21 93       	st	Z+, r18
      for (int j = 0; j < cols; ++j)
        ara[i][j] = bricks[i][j];
  }
  inline void paddle_in_display()
  {
    for (int i = paddle.left(); i <= paddle.right(); ++i)
    1536:	01 96       	adiw	r24, 0x01	; 1
    1538:	48 17       	cp	r20, r24
    153a:	59 07       	cpc	r21, r25
    153c:	dc f7       	brge	.-10     	; 0x1534 <main+0x438>
      ara[paddle.row][i] = 1;
  }
  inline void ball_in_display()
  {
    if (ball.row <= wall.down)
    153e:	a7 e0       	ldi	r26, 0x07	; 7
    1540:	b3 e0       	ldi	r27, 0x03	; 3
    1542:	8d 91       	ld	r24, X+
    1544:	9c 91       	ld	r25, X
    1546:	f6 01       	movw	r30, r12
    1548:	46 81       	ldd	r20, Z+6	; 0x06
    154a:	57 81       	ldd	r21, Z+7	; 0x07
    154c:	48 17       	cp	r20, r24
    154e:	59 07       	cpc	r21, r25
    1550:	0c f4       	brge	.+2      	; 0x1554 <main+0x458>
    1552:	dd c1       	rjmp	.+954    	; 0x190e <main+0x812>
      ara[ball.row][ball.col] = 1;
    1554:	21 e1       	ldi	r18, 0x11	; 17
    1556:	28 9f       	mul	r18, r24
    1558:	f0 01       	movw	r30, r0
    155a:	29 9f       	mul	r18, r25
    155c:	f0 0d       	add	r31, r0
    155e:	11 24       	eor	r1, r1
    1560:	e6 59       	subi	r30, 0x96	; 150
    1562:	fe 4f       	sbci	r31, 0xFE	; 254
    1564:	80 91 09 03 	lds	r24, 0x0309	; 0x800309 <ball+0x2>
    1568:	90 91 0a 03 	lds	r25, 0x030A	; 0x80030a <ball+0x3>
    156c:	e8 0f       	add	r30, r24
    156e:	f9 1f       	adc	r31, r25
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	80 87       	std	Z+8, r24	; 0x08
    1574:	cc c1       	rjmp	.+920    	; 0x190e <main+0x812>
  }
  inline void bullet_in_display()
  {
    for (int i = 0; i < MAX_BULLETS; i++)
    {
      if (bullets[i].active && bullets[i].row >= 0)
    1576:	84 81       	ldd	r24, Z+4	; 0x04
    1578:	88 23       	and	r24, r24
    157a:	99 f0       	breq	.+38     	; 0x15a2 <main+0x4a6>
    157c:	80 81       	ld	r24, Z
    157e:	91 81       	ldd	r25, Z+1	; 0x01
    1580:	99 23       	and	r25, r25
    1582:	7c f0       	brlt	.+30     	; 0x15a2 <main+0x4a6>
        ara[bullets[i].row][bullets[i].col] = 1;
    1584:	78 9f       	mul	r23, r24
    1586:	d0 01       	movw	r26, r0
    1588:	79 9f       	mul	r23, r25
    158a:	b0 0d       	add	r27, r0
    158c:	11 24       	eor	r1, r1
    158e:	8d 01       	movw	r16, r26
    1590:	06 59       	subi	r16, 0x96	; 150
    1592:	1e 4f       	sbci	r17, 0xFE	; 254
    1594:	82 81       	ldd	r24, Z+2	; 0x02
    1596:	93 81       	ldd	r25, Z+3	; 0x03
    1598:	d8 01       	movw	r26, r16
    159a:	a8 0f       	add	r26, r24
    159c:	b9 1f       	adc	r27, r25
    159e:	18 96       	adiw	r26, 0x08	; 8
    15a0:	6c 93       	st	X, r22
    15a2:	35 96       	adiw	r30, 0x05	; 5
    if (ball.row <= wall.down)
      ara[ball.row][ball.col] = 1;
  }
  inline void bullet_in_display()
  {
    for (int i = 0; i < MAX_BULLETS; i++)
    15a4:	23 e0       	ldi	r18, 0x03	; 3
    15a6:	e5 30       	cpi	r30, 0x05	; 5
    15a8:	f2 07       	cpc	r31, r18
    15aa:	29 f7       	brne	.-54     	; 0x1576 <main+0x47a>
        ara[bullets[i].row][bullets[i].col] = 1;
    }
  }
  void life_gain_in_display()
  {
    if (life_gain.active)
    15ac:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <life_gain+0x4>
    15b0:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <life_gain+0x5>
    15b4:	89 2b       	or	r24, r25
    15b6:	09 f4       	brne	.+2      	; 0x15ba <main+0x4be>
    15b8:	b5 c1       	rjmp	.+874    	; 0x1924 <main+0x828>
    {
      if (life_gain.row >= 0 && life_gain.row <= wall.down)
    15ba:	a7 ee       	ldi	r26, 0xE7	; 231
    15bc:	b2 e0       	ldi	r27, 0x02	; 2
    15be:	8d 91       	ld	r24, X+
    15c0:	9c 91       	ld	r25, X
    15c2:	99 23       	and	r25, r25
    15c4:	a4 f0       	brlt	.+40     	; 0x15ee <main+0x4f2>
    15c6:	48 17       	cp	r20, r24
    15c8:	59 07       	cpc	r21, r25
    15ca:	8c f0       	brlt	.+34     	; 0x15ee <main+0x4f2>
      {
        ara[life_gain.row][life_gain.col] = 1;
    15cc:	21 e1       	ldi	r18, 0x11	; 17
    15ce:	28 9f       	mul	r18, r24
    15d0:	b0 01       	movw	r22, r0
    15d2:	29 9f       	mul	r18, r25
    15d4:	70 0d       	add	r23, r0
    15d6:	11 24       	eor	r1, r1
    15d8:	66 59       	subi	r22, 0x96	; 150
    15da:	7e 4f       	sbci	r23, 0xFE	; 254
    15dc:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <life_gain+0x2>
    15e0:	30 91 ea 02 	lds	r19, 0x02EA	; 0x8002ea <life_gain+0x3>
    15e4:	fb 01       	movw	r30, r22
    15e6:	e2 0f       	add	r30, r18
    15e8:	f3 1f       	adc	r31, r19
    15ea:	61 e0       	ldi	r22, 0x01	; 1
    15ec:	60 87       	std	Z+8, r22	; 0x08
      }
      if (life_gain.row - 1 >= 0 && life_gain.row - 1 <= wall.down)
    15ee:	9c 01       	movw	r18, r24
    15f0:	21 50       	subi	r18, 0x01	; 1
    15f2:	31 09       	sbc	r19, r1
    15f4:	aa f0       	brmi	.+42     	; 0x1620 <main+0x524>
    15f6:	42 17       	cp	r20, r18
    15f8:	53 07       	cpc	r21, r19
    15fa:	94 f0       	brlt	.+36     	; 0x1620 <main+0x524>
      {
        ara[life_gain.row - 1][life_gain.col] = 1;
    15fc:	60 91 e9 02 	lds	r22, 0x02E9	; 0x8002e9 <life_gain+0x2>
    1600:	70 91 ea 02 	lds	r23, 0x02EA	; 0x8002ea <life_gain+0x3>
    1604:	a1 e1       	ldi	r26, 0x11	; 17
    1606:	a2 9f       	mul	r26, r18
    1608:	f0 01       	movw	r30, r0
    160a:	a3 9f       	mul	r26, r19
    160c:	f0 0d       	add	r31, r0
    160e:	11 24       	eor	r1, r1
    1610:	e6 59       	subi	r30, 0x96	; 150
    1612:	fe 4f       	sbci	r31, 0xFE	; 254
    1614:	e6 0f       	add	r30, r22
    1616:	f7 1f       	adc	r31, r23
    1618:	21 e0       	ldi	r18, 0x01	; 1
    161a:	20 87       	std	Z+8, r18	; 0x08
        ara[life_gain.row - 1][life_gain.col - 1] = 1;
    161c:	27 83       	std	Z+7, r18	; 0x07
        ara[life_gain.row - 1][life_gain.col + 1] = 1;
    161e:	21 87       	std	Z+9, r18	; 0x09
      }
      if (life_gain.row - 2 >= 0 && life_gain.row - 2 <= wall.down)
    1620:	02 97       	sbiw	r24, 0x02	; 2
    1622:	9a f0       	brmi	.+38     	; 0x164a <main+0x54e>
    1624:	48 17       	cp	r20, r24
    1626:	59 07       	cpc	r21, r25
    1628:	84 f0       	brlt	.+32     	; 0x164a <main+0x54e>
      {
        ara[life_gain.row - 2][life_gain.col] = 1;
    162a:	21 e1       	ldi	r18, 0x11	; 17
    162c:	28 9f       	mul	r18, r24
    162e:	f0 01       	movw	r30, r0
    1630:	29 9f       	mul	r18, r25
    1632:	f0 0d       	add	r31, r0
    1634:	11 24       	eor	r1, r1
    1636:	e6 59       	subi	r30, 0x96	; 150
    1638:	fe 4f       	sbci	r31, 0xFE	; 254
    163a:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <life_gain+0x2>
    163e:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <life_gain+0x3>
    1642:	e8 0f       	add	r30, r24
    1644:	f9 1f       	adc	r31, r25
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	80 87       	std	Z+8, r24	; 0x08
  }

  void split()
  {
    // putting first 8*8 portion of display into split3
    for (int i = 0; i < splitrows; i++)
    164a:	40 90 6e 01 	lds	r4, 0x016E	; 0x80016e <display+0x4>
    164e:	50 90 6f 01 	lds	r5, 0x016F	; 0x80016f <display+0x5>
    1652:	14 14       	cp	r1, r4
    1654:	15 04       	cpc	r1, r5
    1656:	0c f0       	brlt	.+2      	; 0x165a <main+0x55e>
    1658:	bd c0       	rjmp	.+378    	; 0x17d4 <main+0x6d8>
    {
      split3[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
    165a:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <display+0x6>
    165e:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <display+0x7>
    1662:	f2 01       	movw	r30, r4
    1664:	ee 0f       	add	r30, r30
    1666:	ff 1f       	adc	r31, r31
    1668:	f8 87       	std	Y+8, r31	; 0x08
    166a:	ef 83       	std	Y+7, r30	; 0x07
    166c:	df 01       	movw	r26, r30
    166e:	a5 54       	subi	r26, 0x45	; 69
    1670:	bd 4f       	sbci	r27, 0xFD	; 253
    1672:	0f 2e       	mov	r0, r31
    1674:	f2 e7       	ldi	r31, 0x72	; 114
    1676:	ef 2e       	mov	r14, r31
    1678:	f1 e0       	ldi	r31, 0x01	; 1
    167a:	ff 2e       	mov	r15, r31
    167c:	f0 2d       	mov	r31, r0
    167e:	0f 2e       	mov	r0, r31
    1680:	fb eb       	ldi	r31, 0xBB	; 187
    1682:	af 2e       	mov	r10, r31
    1684:	f2 e0       	ldi	r31, 0x02	; 2
    1686:	bf 2e       	mov	r11, r31
    1688:	f0 2d       	mov	r31, r0
    168a:	12 97       	sbiw	r26, 0x02	; 2
    168c:	8d 01       	movw	r16, r26
  void split()
  {
    // putting first 8*8 portion of display into split3
    for (int i = 0; i < splitrows; i++)
    {
      split3[splitrows - i - 1] = 0;
    168e:	11 96       	adiw	r26, 0x01	; 1
    1690:	1c 92       	st	X, r1
    1692:	1e 92       	st	-X, r1
      for (int j = 0; j < splitcols; j++)
    1694:	16 16       	cp	r1, r22
    1696:	17 06       	cpc	r1, r23
    1698:	bc f4       	brge	.+46     	; 0x16c8 <main+0x5cc>
    169a:	f7 01       	movw	r30, r14
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	50 e0       	ldi	r21, 0x00	; 0
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
        split3[splitrows - i - 1] |= (ara[i][j] << j); // Using bitmasking to transform columns into a single integer
    16a4:	81 91       	ld	r24, Z+
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <main+0x5b4>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <main+0x5b0>
    16b4:	48 2b       	or	r20, r24
    16b6:	59 2b       	or	r21, r25
  {
    // putting first 8*8 portion of display into split3
    for (int i = 0; i < splitrows; i++)
    {
      split3[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
    16b8:	2f 5f       	subi	r18, 0xFF	; 255
    16ba:	3f 4f       	sbci	r19, 0xFF	; 255
    16bc:	26 17       	cp	r18, r22
    16be:	37 07       	cpc	r19, r23
    16c0:	89 f7       	brne	.-30     	; 0x16a4 <main+0x5a8>
    16c2:	f8 01       	movw	r30, r16
    16c4:	51 83       	std	Z+1, r21	; 0x01
    16c6:	40 83       	st	Z, r20
    16c8:	f1 e1       	ldi	r31, 0x11	; 17
    16ca:	ef 0e       	add	r14, r31
    16cc:	f1 1c       	adc	r15, r1
  }

  void split()
  {
    // putting first 8*8 portion of display into split3
    for (int i = 0; i < splitrows; i++)
    16ce:	aa 15       	cp	r26, r10
    16d0:	bb 05       	cpc	r27, r11
    16d2:	d9 f6       	brne	.-74     	; 0x168a <main+0x58e>
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
    {
      split2[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
    16d4:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <display+0x6>
    16d8:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <display+0x7>
    16dc:	af 81       	ldd	r26, Y+7	; 0x07
    16de:	b8 85       	ldd	r27, Y+8	; 0x08
    16e0:	a9 55       	subi	r26, 0x59	; 89
    16e2:	bd 4f       	sbci	r27, 0xFD	; 253
    16e4:	e0 90 6c 01 	lds	r14, 0x016C	; 0x80016c <display+0x2>
    16e8:	f0 90 6d 01 	lds	r15, 0x016D	; 0x80016d <display+0x3>
    16ec:	c7 01       	movw	r24, r14
    16ee:	86 1b       	sub	r24, r22
    16f0:	97 0b       	sbc	r25, r23
    16f2:	9c 01       	movw	r18, r24
    16f4:	2e 58       	subi	r18, 0x8E	; 142
    16f6:	3e 4f       	sbci	r19, 0xFE	; 254
    16f8:	79 01       	movw	r14, r18
    16fa:	0f 2e       	mov	r0, r31
    16fc:	f7 ea       	ldi	r31, 0xA7	; 167
    16fe:	af 2e       	mov	r10, r31
    1700:	f2 e0       	ldi	r31, 0x02	; 2
    1702:	bf 2e       	mov	r11, r31
    1704:	f0 2d       	mov	r31, r0
    1706:	12 97       	sbiw	r26, 0x02	; 2
    1708:	8d 01       	movw	r16, r26
        split3[splitrows - i - 1] |= (ara[i][j] << j); // Using bitmasking to transform columns into a single integer
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
    {
      split2[splitrows - i - 1] = 0;
    170a:	11 96       	adiw	r26, 0x01	; 1
    170c:	1c 92       	st	X, r1
    170e:	1e 92       	st	-X, r1
      for (int j = 0; j < splitcols; j++)
    1710:	16 16       	cp	r1, r22
    1712:	17 06       	cpc	r1, r23
    1714:	bc f4       	brge	.+46     	; 0x1744 <main+0x648>
    1716:	f7 01       	movw	r30, r14
    1718:	40 e0       	ldi	r20, 0x00	; 0
    171a:	50 e0       	ldi	r21, 0x00	; 0
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
        split2[splitrows - i - 1] |= (ara[i][cols - splitcols + j] << j);
    1720:	81 91       	ld	r24, Z+
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	02 2e       	mov	r0, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <main+0x630>
    1728:	88 0f       	add	r24, r24
    172a:	99 1f       	adc	r25, r25
    172c:	0a 94       	dec	r0
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <main+0x62c>
    1730:	48 2b       	or	r20, r24
    1732:	59 2b       	or	r21, r25
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
    {
      split2[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
    1734:	2f 5f       	subi	r18, 0xFF	; 255
    1736:	3f 4f       	sbci	r19, 0xFF	; 255
    1738:	26 17       	cp	r18, r22
    173a:	37 07       	cpc	r19, r23
    173c:	89 f7       	brne	.-30     	; 0x1720 <main+0x624>
    173e:	f8 01       	movw	r30, r16
    1740:	51 83       	std	Z+1, r21	; 0x01
    1742:	40 83       	st	Z, r20
    1744:	f1 e1       	ldi	r31, 0x11	; 17
    1746:	ef 0e       	add	r14, r31
    1748:	f1 1c       	adc	r15, r1
      split3[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
        split3[splitrows - i - 1] |= (ara[i][j] << j); // Using bitmasking to transform columns into a single integer
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
    174a:	aa 15       	cp	r26, r10
    174c:	bb 05       	cpc	r27, r11
    174e:	d9 f6       	brne	.-74     	; 0x1706 <main+0x60a>
    }
    // split4
    for (int i = 0; i < splitrows; i++)
    {
      split4[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
    1750:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <display+0x6>
    1754:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <display+0x7>
    1758:	d2 01       	movw	r26, r4
    175a:	aa 0f       	add	r26, r26
    175c:	bb 1f       	adc	r27, r27
    175e:	a1 53       	subi	r26, 0x31	; 49
    1760:	bd 4f       	sbci	r27, 0xFD	; 253
    1762:	81 e1       	ldi	r24, 0x11	; 17
    1764:	29 81       	ldd	r18, Y+1	; 0x01
    1766:	3a 81       	ldd	r19, Y+2	; 0x02
    1768:	82 9f       	mul	r24, r18
    176a:	50 01       	movw	r10, r0
    176c:	83 9f       	mul	r24, r19
    176e:	b0 0c       	add	r11, r0
    1770:	11 24       	eor	r1, r1
    1772:	cb 01       	movw	r24, r22
    1774:	8a 0d       	add	r24, r10
    1776:	9b 1d       	adc	r25, r11
    1778:	fc 01       	movw	r30, r24
    177a:	ef 59       	subi	r30, 0x9F	; 159
    177c:	fe 4f       	sbci	r31, 0xFE	; 254
    177e:	5f 01       	movw	r10, r30
    1780:	e1 2c       	mov	r14, r1
    1782:	f1 2c       	mov	r15, r1
    1784:	12 97       	sbiw	r26, 0x02	; 2
    1786:	8d 01       	movw	r16, r26
        split2[splitrows - i - 1] |= (ara[i][cols - splitcols + j] << j);
    }
    // split4
    for (int i = 0; i < splitrows; i++)
    {
      split4[splitrows - i - 1] = 0;
    1788:	11 96       	adiw	r26, 0x01	; 1
    178a:	1c 92       	st	X, r1
    178c:	1e 92       	st	-X, r1
      for (int j = 0; j < splitcols; j++)
    178e:	16 16       	cp	r1, r22
    1790:	17 06       	cpc	r1, r23
    1792:	bc f4       	brge	.+46     	; 0x17c2 <main+0x6c6>
    1794:	f5 01       	movw	r30, r10
    1796:	40 e0       	ldi	r20, 0x00	; 0
    1798:	50 e0       	ldi	r21, 0x00	; 0
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
        split4[splitrows - i - 1] |= (ara[rows - 1 - i][splitcols - 1 - j] << j);
    179e:	82 91       	ld	r24, -Z
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	02 2e       	mov	r0, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <main+0x6ae>
    17a6:	88 0f       	add	r24, r24
    17a8:	99 1f       	adc	r25, r25
    17aa:	0a 94       	dec	r0
    17ac:	e2 f7       	brpl	.-8      	; 0x17a6 <main+0x6aa>
    17ae:	48 2b       	or	r20, r24
    17b0:	59 2b       	or	r21, r25
    }
    // split4
    for (int i = 0; i < splitrows; i++)
    {
      split4[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
    17b2:	2f 5f       	subi	r18, 0xFF	; 255
    17b4:	3f 4f       	sbci	r19, 0xFF	; 255
    17b6:	26 17       	cp	r18, r22
    17b8:	37 07       	cpc	r19, r23
    17ba:	89 f7       	brne	.-30     	; 0x179e <main+0x6a2>
    17bc:	f8 01       	movw	r30, r16
    17be:	51 83       	std	Z+1, r21	; 0x01
    17c0:	40 83       	st	Z, r20
      split2[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
        split2[splitrows - i - 1] |= (ara[i][cols - splitcols + j] << j);
    }
    // split4
    for (int i = 0; i < splitrows; i++)
    17c2:	ff ef       	ldi	r31, 0xFF	; 255
    17c4:	ef 1a       	sub	r14, r31
    17c6:	ff 0a       	sbc	r15, r31
    17c8:	21 e1       	ldi	r18, 0x11	; 17
    17ca:	a2 1a       	sub	r10, r18
    17cc:	b1 08       	sbc	r11, r1
    17ce:	e4 14       	cp	r14, r4
    17d0:	f5 04       	cpc	r15, r5
    17d2:	c4 f2       	brlt	.-80     	; 0x1784 <main+0x688>
      split4[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
        split4[splitrows - i - 1] |= (ara[rows - 1 - i][splitcols - 1 - j] << j);
    }
    // last portion to the first matrix
    for (int i = rows - splitrows; i < rows; i++)
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	9a 81       	ldd	r25, Y+2	; 0x02
    17d8:	84 19       	sub	r24, r4
    17da:	95 09       	sbc	r25, r5
    17dc:	a9 81       	ldd	r26, Y+1	; 0x01
    17de:	ba 81       	ldd	r27, Y+2	; 0x02
    17e0:	8a 17       	cp	r24, r26
    17e2:	9b 07       	cpc	r25, r27
    17e4:	0c f0       	brlt	.+2      	; 0x17e8 <main+0x6ec>
    17e6:	98 c0       	rjmp	.+304    	; 0x1918 <main+0x81c>
    {
      split1[i - rows + splitrows] = 0;
      for (int j = cols - splitcols; j < cols; j++)
    17e8:	a0 90 6c 01 	lds	r10, 0x016C	; 0x80016c <display+0x2>
    17ec:	b0 90 6d 01 	lds	r11, 0x016D	; 0x80016d <display+0x3>
    17f0:	e0 90 70 01 	lds	r14, 0x0170	; 0x800170 <display+0x6>
    17f4:	f0 90 71 01 	lds	r15, 0x0171	; 0x800171 <display+0x7>
    17f8:	85 01       	movw	r16, r10
    17fa:	0e 19       	sub	r16, r14
    17fc:	1f 09       	sbc	r17, r15
    17fe:	dc 01       	movw	r26, r24
    1800:	e9 81       	ldd	r30, Y+1	; 0x01
    1802:	fa 81       	ldd	r31, Y+2	; 0x02
    1804:	ae 1b       	sub	r26, r30
    1806:	bf 0b       	sbc	r27, r31
    1808:	a4 0d       	add	r26, r4
    180a:	b5 1d       	adc	r27, r5
    180c:	aa 0f       	add	r26, r26
    180e:	bb 1f       	adc	r27, r27
    1810:	ad 56       	subi	r26, 0x6D	; 109
    1812:	bd 4f       	sbci	r27, 0xFD	; 253
    1814:	21 e1       	ldi	r18, 0x11	; 17
    1816:	28 9f       	mul	r18, r24
    1818:	b0 01       	movw	r22, r0
    181a:	29 9f       	mul	r18, r25
    181c:	70 0d       	add	r23, r0
    181e:	11 24       	eor	r1, r1
    1820:	60 0f       	add	r22, r16
    1822:	71 1f       	adc	r23, r17
    1824:	6e 58       	subi	r22, 0x8E	; 142
    1826:	7e 4f       	sbci	r23, 0xFE	; 254
    1828:	c2 01       	movw	r24, r4
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	8d 56       	subi	r24, 0x6D	; 109
    1830:	9d 4f       	sbci	r25, 0xFD	; 253
    1832:	2c 01       	movw	r4, r24
    1834:	ba 83       	std	Y+2, r27	; 0x02
    1836:	a9 83       	std	Y+1, r26	; 0x01
        split4[splitrows - i - 1] |= (ara[rows - 1 - i][splitcols - 1 - j] << j);
    }
    // last portion to the first matrix
    for (int i = rows - splitrows; i < rows; i++)
    {
      split1[i - rows + splitrows] = 0;
    1838:	11 96       	adiw	r26, 0x01	; 1
    183a:	1c 92       	st	X, r1
    183c:	1e 92       	st	-X, r1
      for (int j = cols - splitcols; j < cols; j++)
    183e:	0a 15       	cp	r16, r10
    1840:	1b 05       	cpc	r17, r11
    1842:	bc f4       	brge	.+46     	; 0x1872 <main+0x776>
    1844:	97 01       	movw	r18, r14
    1846:	21 50       	subi	r18, 0x01	; 1
    1848:	31 09       	sbc	r19, r1
    184a:	fb 01       	movw	r30, r22
    184c:	40 e0       	ldi	r20, 0x00	; 0
    184e:	50 e0       	ldi	r21, 0x00	; 0
        split1[i - rows + splitrows] |= (ara[i][j] << (cols - j - 1));
    1850:	81 91       	ld	r24, Z+
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	02 2e       	mov	r0, r18
    1856:	02 c0       	rjmp	.+4      	; 0x185c <main+0x760>
    1858:	88 0f       	add	r24, r24
    185a:	99 1f       	adc	r25, r25
    185c:	0a 94       	dec	r0
    185e:	e2 f7       	brpl	.-8      	; 0x1858 <main+0x75c>
    1860:	48 2b       	or	r20, r24
    1862:	59 2b       	or	r21, r25
    1864:	21 50       	subi	r18, 0x01	; 1
    1866:	31 09       	sbc	r19, r1
    1868:	98 f7       	brcc	.-26     	; 0x1850 <main+0x754>
    186a:	e9 81       	ldd	r30, Y+1	; 0x01
    186c:	fa 81       	ldd	r31, Y+2	; 0x02
    186e:	51 83       	std	Z+1, r21	; 0x01
    1870:	40 83       	st	Z, r20
    1872:	12 96       	adiw	r26, 0x02	; 2
    1874:	6f 5e       	subi	r22, 0xEF	; 239
    1876:	7f 4f       	sbci	r23, 0xFF	; 255
      split4[splitrows - i - 1] = 0;
      for (int j = 0; j < splitcols; j++)
        split4[splitrows - i - 1] |= (ara[rows - 1 - i][splitcols - 1 - j] << j);
    }
    // last portion to the first matrix
    for (int i = rows - splitrows; i < rows; i++)
    1878:	a4 15       	cp	r26, r4
    187a:	b5 05       	cpc	r27, r5
    187c:	d9 f6       	brne	.-74     	; 0x1834 <main+0x738>
    187e:	4c c0       	rjmp	.+152    	; 0x1918 <main+0x81c>
  void send_to_driver()
  {
    split();
    for (uint8_t i = 1; i <= 8; i++)
    {
      select_Load();
    1880:	0e 94 7f 00 	call	0xfe	; 0xfe <_Z11select_Loadv>
    1884:	f8 01       	movw	r30, r16

      MAX7219_send2(i, split4[i - 1]);
    1886:	84 ad       	ldd	r24, Z+60	; 0x3c

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
    1888:	29 81       	ldd	r18, Y+1	; 0x01
    188a:	2f b9       	out	0x0f, r18	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
    188c:	77 9b       	sbis	0x0e, 7	; 14
    188e:	fe cf       	rjmp	.-4      	; 0x188c <main+0x790>

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
    1890:	8f b9       	out	0x0f, r24	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
    1892:	77 9b       	sbis	0x0e, 7	; 14
    1894:	fe cf       	rjmp	.-4      	; 0x1892 <main+0x796>
    for (uint8_t i = 1; i <= 8; i++)
    {
      select_Load();

      MAX7219_send2(i, split4[i - 1]);
      MAX7219_send2(i, split3[i - 1]);
    1896:	80 a5       	ldd	r24, Z+40	; 0x28

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
    1898:	39 81       	ldd	r19, Y+1	; 0x01
    189a:	3f b9       	out	0x0f, r19	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
    189c:	77 9b       	sbis	0x0e, 7	; 14
    189e:	fe cf       	rjmp	.-4      	; 0x189c <main+0x7a0>

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
    18a0:	8f b9       	out	0x0f, r24	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
    18a2:	77 9b       	sbis	0x0e, 7	; 14
    18a4:	fe cf       	rjmp	.-4      	; 0x18a2 <main+0x7a6>
    {
      select_Load();

      MAX7219_send2(i, split4[i - 1]);
      MAX7219_send2(i, split3[i - 1]);
      MAX7219_send2(i, split2[i - 1]);
    18a6:	84 89       	ldd	r24, Z+20	; 0x14

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
    18a8:	49 81       	ldd	r20, Y+1	; 0x01
    18aa:	4f b9       	out	0x0f, r20	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
    18ac:	77 9b       	sbis	0x0e, 7	; 14
    18ae:	fe cf       	rjmp	.-4      	; 0x18ac <main+0x7b0>

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
    18b0:	8f b9       	out	0x0f, r24	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
    18b2:	77 9b       	sbis	0x0e, 7	; 14
    18b4:	fe cf       	rjmp	.-4      	; 0x18b2 <main+0x7b6>
    18b6:	0e 5f       	subi	r16, 0xFE	; 254
    18b8:	1f 4f       	sbci	r17, 0xFF	; 255
      select_Load();

      MAX7219_send2(i, split4[i - 1]);
      MAX7219_send2(i, split3[i - 1]);
      MAX7219_send2(i, split2[i - 1]);
      MAX7219_send2(i, split1[i - 1]);
    18ba:	80 81       	ld	r24, Z

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
    18bc:	99 81       	ldd	r25, Y+1	; 0x01
    18be:	9f b9       	out	0x0f, r25	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
    18c0:	77 9b       	sbis	0x0e, 7	; 14
    18c2:	fe cf       	rjmp	.-4      	; 0x18c0 <main+0x7c4>

// Function to send data via SPI
inline void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
    18c4:	8f b9       	out	0x0f, r24	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
    18c6:	77 9b       	sbis	0x0e, 7	; 14
    18c8:	fe cf       	rjmp	.-4      	; 0x18c6 <main+0x7ca>
      MAX7219_send2(i, split4[i - 1]);
      MAX7219_send2(i, split3[i - 1]);
      MAX7219_send2(i, split2[i - 1]);
      MAX7219_send2(i, split1[i - 1]);

      deSelect_Load();
    18ca:	0e 94 81 00 	call	0x102	; 0x102 <_Z13deSelect_Loadv>
  }

  void send_to_driver()
  {
    split();
    for (uint8_t i = 1; i <= 8; i++)
    18ce:	a9 81       	ldd	r26, Y+1	; 0x01
    18d0:	af 5f       	subi	r26, 0xFF	; 255
    18d2:	a9 83       	std	Y+1, r26	; 0x01
    18d4:	a9 30       	cpi	r26, 0x09	; 9
    18d6:	a1 f6       	brne	.-88     	; 0x1880 <main+0x784>

    // sending to led driver
    display.send_to_driver();

    // turning off beeper
    PORTA &= ~(1 << SCORE_BUTTON_PIN);
    18d8:	da 98       	cbi	0x1b, 2	; 27
    PORTA &= ~(1 << LIFE_BUTTON_PIN);
    18da:	db 98       	cbi	0x1b, 3	; 27
    PORTA &= ~(1 << RESET_BUTTON);
    18dc:	dd 98       	cbi	0x1b, 5	; 27
    PORTC &= ~(1 << LIFE_GAIN_PIN);
    18de:	af 98       	cbi	0x15, 7	; 21
    18e0:	e3 ec       	ldi	r30, 0xC3	; 195
    18e2:	f9 e0       	ldi	r31, 0x09	; 9
    18e4:	31 97       	sbiw	r30, 0x01	; 1
    18e6:	f1 f7       	brne	.-4      	; 0x18e4 <main+0x7e8>
    18e8:	00 c0       	rjmp	.+0      	; 0x18ea <main+0x7ee>
    18ea:	00 00       	nop
    18ec:	3b cc       	rjmp	.-1930   	; 0x1164 <main+0x68>
    int row;
    Proxy(int x) { row = x; }
    bool operator[](size_t colIndex) { return 1 & (row >> colIndex); }
  };

  Proxy operator[](size_t rowIndex) { return Proxy(rows[rowIndex]); }
    18ee:	fc 01       	movw	r30, r24
    18f0:	ee 0f       	add	r30, r30
    18f2:	ff 1f       	adc	r31, r31
    18f4:	e3 5e       	subi	r30, 0xE3	; 227
    18f6:	fc 4f       	sbci	r31, 0xFC	; 252
      goto collision;
    }

    // collision with bricks
    int nrow = nextrow(), ncol2 = nextcol();
    if (valid_index(nrow, ncol2) && bricks[nrow][ncol2])
    18f8:	20 81       	ld	r18, Z
    18fa:	31 81       	ldd	r19, Z+1	; 0x01
    18fc:	04 2e       	mov	r0, r20
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <main+0x808>
    1900:	35 95       	asr	r19
    1902:	27 95       	ror	r18
    1904:	0a 94       	dec	r0
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <main+0x804>
    1908:	20 fd       	sbrc	r18, 0
    190a:	2b cd       	rjmp	.-1450   	; 0x1362 <main+0x266>
    190c:	59 cd       	rjmp	.-1358   	; 0x13c0 <main+0x2c4>
    190e:	e1 ef       	ldi	r30, 0xF1	; 241
    1910:	f2 e0       	ldi	r31, 0x02	; 2
  inline void bullet_in_display()
  {
    for (int i = 0; i < MAX_BULLETS; i++)
    {
      if (bullets[i].active && bullets[i].row >= 0)
        ara[bullets[i].row][bullets[i].col] = 1;
    1912:	71 e1       	ldi	r23, 0x11	; 17
    1914:	61 e0       	ldi	r22, 0x01	; 1
    1916:	2f ce       	rjmp	.-930    	; 0x1576 <main+0x47a>
    1918:	03 e9       	ldi	r16, 0x93	; 147
    191a:	12 e0       	ldi	r17, 0x02	; 2
    }
    // last portion to the first matrix
    for (int i = rows - splitrows; i < rows; i++)
    {
      split1[i - rows + splitrows] = 0;
      for (int j = cols - splitcols; j < cols; j++)
    191c:	ff 24       	eor	r15, r15
    191e:	f3 94       	inc	r15
    1920:	f9 82       	std	Y+1, r15	; 0x01
    1922:	ae cf       	rjmp	.-164    	; 0x1880 <main+0x784>
  }

  void split()
  {
    // putting first 8*8 portion of display into split3
    for (int i = 0; i < splitrows; i++)
    1924:	40 90 6e 01 	lds	r4, 0x016E	; 0x80016e <display+0x4>
    1928:	50 90 6f 01 	lds	r5, 0x016F	; 0x80016f <display+0x5>
    192c:	14 14       	cp	r1, r4
    192e:	15 04       	cpc	r1, r5
    1930:	0c f4       	brge	.+2      	; 0x1934 <main+0x838>
    1932:	93 ce       	rjmp	.-730    	; 0x165a <main+0x55e>
    1934:	4f cf       	rjmp	.-354    	; 0x17d4 <main+0x6d8>

00001936 <_GLOBAL__sub_I__Z5resetv>:
int level;
int brick_count;
#define dimension 16

// wrapper of 2d boolean to save space
struct bitarray
    1936:	ed e1       	ldi	r30, 0x1D	; 29
    1938:	f3 e0       	ldi	r31, 0x03	; 3
    193a:	82 e2       	ldi	r24, 0x22	; 34
    193c:	df 01       	movw	r26, r30
    193e:	1d 92       	st	X+, r1
    1940:	8a 95       	dec	r24
    1942:	e9 f7       	brne	.-6      	; 0x193e <_GLOBAL__sub_I__Z5resetv+0x8>
};

bitarray bricks;
// put brick in the display anywhere..

struct Wall
    1944:	e5 e1       	ldi	r30, 0x15	; 21
    1946:	f3 e0       	ldi	r31, 0x03	; 3
    1948:	11 82       	std	Z+1, r1	; 0x01
    194a:	10 82       	st	Z, r1
    194c:	8f e0       	ldi	r24, 0x0F	; 15
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	93 83       	std	Z+3, r25	; 0x03
    1952:	82 83       	std	Z+2, r24	; 0x02
    1954:	15 82       	std	Z+5, r1	; 0x05
    1956:	14 82       	std	Z+4, r1	; 0x04
    1958:	97 83       	std	Z+7, r25	; 0x07
    195a:	86 83       	std	Z+6, r24	; 0x06
  int row;

  void init() { position = wall.center_col(); }
  Paddle()
  {
    size = 5;
    195c:	ef e0       	ldi	r30, 0x0F	; 15
    195e:	f3 e0       	ldi	r31, 0x03	; 3
    1960:	25 e0       	ldi	r18, 0x05	; 5
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	33 83       	std	Z+3, r19	; 0x03
    1966:	22 83       	std	Z+2, r18	; 0x02
    row = wall.down;
    1968:	95 83       	std	Z+5, r25	; 0x05
    196a:	84 83       	std	Z+4, r24	; 0x04
{
  int position; // position of the center of the paddle
  int size;
  int row;

  void init() { position = wall.center_col(); }
    196c:	27 e0       	ldi	r18, 0x07	; 7
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	31 83       	std	Z+1, r19	; 0x01
    1972:	20 83       	st	Z, r18
  int row, col;
  int row_dir, col_dir;

  void init() // sets the starting position of the ball
  {
    row = wall.down;
    1974:	e7 e0       	ldi	r30, 0x07	; 7
    1976:	f3 e0       	ldi	r31, 0x03	; 3
    1978:	91 83       	std	Z+1, r25	; 0x01
    197a:	80 83       	st	Z, r24
    col = paddle.position;
    197c:	33 83       	std	Z+3, r19	; 0x03
    197e:	22 83       	std	Z+2, r18	; 0x02
    row_dir = -1;
    1980:	8f ef       	ldi	r24, 0xFF	; 255
    1982:	9f ef       	ldi	r25, 0xFF	; 255
    1984:	95 83       	std	Z+5, r25	; 0x05
    1986:	84 83       	std	Z+4, r24	; 0x04
    col_dir = 0;
    1988:	17 82       	std	Z+7, r1	; 0x07
    198a:	16 82       	std	Z+6, r1	; 0x06
  {
    for (int i = 0; i < rows; ++i)
      for (int j = 0; j < cols; ++j)
        ara[i][j] = ara1[i][j];
  }
  Display() { resetArray(); } // initializing with 0
    198c:	ea e6       	ldi	r30, 0x6A	; 106
    198e:	f1 e0       	ldi	r31, 0x01	; 1
    1990:	80 e1       	ldi	r24, 0x10	; 16
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	91 83       	std	Z+1, r25	; 0x01
    1996:	80 83       	st	Z, r24
    1998:	93 83       	std	Z+3, r25	; 0x03
    199a:	82 83       	std	Z+2, r24	; 0x02
    199c:	88 e0       	ldi	r24, 0x08	; 8
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	95 83       	std	Z+5, r25	; 0x05
    19a2:	84 83       	std	Z+4, r24	; 0x04
    19a4:	97 83       	std	Z+7, r25	; 0x07
    19a6:	86 83       	std	Z+6, r24	; 0x06
  int split1[10];
  int split2[10];
  int split3[10];
  int split4[10]; // 10 for out_of_bound safety

  void resetArray() { memset(ara, 0, sizeof ara); }
    19a8:	81 e2       	ldi	r24, 0x21	; 33
    19aa:	91 e0       	ldi	r25, 0x01	; 1
    19ac:	e2 e7       	ldi	r30, 0x72	; 114
    19ae:	f1 e0       	ldi	r31, 0x01	; 1
    19b0:	df 01       	movw	r26, r30
    19b2:	9c 01       	movw	r18, r24
    19b4:	1d 92       	st	X+, r1
    19b6:	21 50       	subi	r18, 0x01	; 1
    19b8:	30 40       	sbci	r19, 0x00	; 0
    19ba:	e1 f7       	brne	.-8      	; 0x19b4 <_GLOBAL__sub_I__Z5resetv+0x7e>
    19bc:	08 95       	ret

000019be <__subsf3>:
    19be:	50 58       	subi	r21, 0x80	; 128

000019c0 <__addsf3>:
    19c0:	bb 27       	eor	r27, r27
    19c2:	aa 27       	eor	r26, r26
    19c4:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <__addsf3x>
    19c8:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__fp_round>
    19cc:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__fp_pscA>
    19d0:	38 f0       	brcs	.+14     	; 0x19e0 <__addsf3+0x20>
    19d2:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__fp_pscB>
    19d6:	20 f0       	brcs	.+8      	; 0x19e0 <__addsf3+0x20>
    19d8:	39 f4       	brne	.+14     	; 0x19e8 <__addsf3+0x28>
    19da:	9f 3f       	cpi	r25, 0xFF	; 255
    19dc:	19 f4       	brne	.+6      	; 0x19e4 <__addsf3+0x24>
    19de:	26 f4       	brtc	.+8      	; 0x19e8 <__addsf3+0x28>
    19e0:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__fp_nan>
    19e4:	0e f4       	brtc	.+2      	; 0x19e8 <__addsf3+0x28>
    19e6:	e0 95       	com	r30
    19e8:	e7 fb       	bst	r30, 7
    19ea:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__fp_inf>

000019ee <__addsf3x>:
    19ee:	e9 2f       	mov	r30, r25
    19f0:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fp_split3>
    19f4:	58 f3       	brcs	.-42     	; 0x19cc <__addsf3+0xc>
    19f6:	ba 17       	cp	r27, r26
    19f8:	62 07       	cpc	r22, r18
    19fa:	73 07       	cpc	r23, r19
    19fc:	84 07       	cpc	r24, r20
    19fe:	95 07       	cpc	r25, r21
    1a00:	20 f0       	brcs	.+8      	; 0x1a0a <__addsf3x+0x1c>
    1a02:	79 f4       	brne	.+30     	; 0x1a22 <__addsf3x+0x34>
    1a04:	a6 f5       	brtc	.+104    	; 0x1a6e <__addsf3x+0x80>
    1a06:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__fp_zero>
    1a0a:	0e f4       	brtc	.+2      	; 0x1a0e <__addsf3x+0x20>
    1a0c:	e0 95       	com	r30
    1a0e:	0b 2e       	mov	r0, r27
    1a10:	ba 2f       	mov	r27, r26
    1a12:	a0 2d       	mov	r26, r0
    1a14:	0b 01       	movw	r0, r22
    1a16:	b9 01       	movw	r22, r18
    1a18:	90 01       	movw	r18, r0
    1a1a:	0c 01       	movw	r0, r24
    1a1c:	ca 01       	movw	r24, r20
    1a1e:	a0 01       	movw	r20, r0
    1a20:	11 24       	eor	r1, r1
    1a22:	ff 27       	eor	r31, r31
    1a24:	59 1b       	sub	r21, r25
    1a26:	99 f0       	breq	.+38     	; 0x1a4e <__addsf3x+0x60>
    1a28:	59 3f       	cpi	r21, 0xF9	; 249
    1a2a:	50 f4       	brcc	.+20     	; 0x1a40 <__addsf3x+0x52>
    1a2c:	50 3e       	cpi	r21, 0xE0	; 224
    1a2e:	68 f1       	brcs	.+90     	; 0x1a8a <__addsf3x+0x9c>
    1a30:	1a 16       	cp	r1, r26
    1a32:	f0 40       	sbci	r31, 0x00	; 0
    1a34:	a2 2f       	mov	r26, r18
    1a36:	23 2f       	mov	r18, r19
    1a38:	34 2f       	mov	r19, r20
    1a3a:	44 27       	eor	r20, r20
    1a3c:	58 5f       	subi	r21, 0xF8	; 248
    1a3e:	f3 cf       	rjmp	.-26     	; 0x1a26 <__addsf3x+0x38>
    1a40:	46 95       	lsr	r20
    1a42:	37 95       	ror	r19
    1a44:	27 95       	ror	r18
    1a46:	a7 95       	ror	r26
    1a48:	f0 40       	sbci	r31, 0x00	; 0
    1a4a:	53 95       	inc	r21
    1a4c:	c9 f7       	brne	.-14     	; 0x1a40 <__addsf3x+0x52>
    1a4e:	7e f4       	brtc	.+30     	; 0x1a6e <__addsf3x+0x80>
    1a50:	1f 16       	cp	r1, r31
    1a52:	ba 0b       	sbc	r27, r26
    1a54:	62 0b       	sbc	r22, r18
    1a56:	73 0b       	sbc	r23, r19
    1a58:	84 0b       	sbc	r24, r20
    1a5a:	ba f0       	brmi	.+46     	; 0x1a8a <__addsf3x+0x9c>
    1a5c:	91 50       	subi	r25, 0x01	; 1
    1a5e:	a1 f0       	breq	.+40     	; 0x1a88 <__addsf3x+0x9a>
    1a60:	ff 0f       	add	r31, r31
    1a62:	bb 1f       	adc	r27, r27
    1a64:	66 1f       	adc	r22, r22
    1a66:	77 1f       	adc	r23, r23
    1a68:	88 1f       	adc	r24, r24
    1a6a:	c2 f7       	brpl	.-16     	; 0x1a5c <__addsf3x+0x6e>
    1a6c:	0e c0       	rjmp	.+28     	; 0x1a8a <__addsf3x+0x9c>
    1a6e:	ba 0f       	add	r27, r26
    1a70:	62 1f       	adc	r22, r18
    1a72:	73 1f       	adc	r23, r19
    1a74:	84 1f       	adc	r24, r20
    1a76:	48 f4       	brcc	.+18     	; 0x1a8a <__addsf3x+0x9c>
    1a78:	87 95       	ror	r24
    1a7a:	77 95       	ror	r23
    1a7c:	67 95       	ror	r22
    1a7e:	b7 95       	ror	r27
    1a80:	f7 95       	ror	r31
    1a82:	9e 3f       	cpi	r25, 0xFE	; 254
    1a84:	08 f0       	brcs	.+2      	; 0x1a88 <__addsf3x+0x9a>
    1a86:	b0 cf       	rjmp	.-160    	; 0x19e8 <__addsf3+0x28>
    1a88:	93 95       	inc	r25
    1a8a:	88 0f       	add	r24, r24
    1a8c:	08 f0       	brcs	.+2      	; 0x1a90 <__addsf3x+0xa2>
    1a8e:	99 27       	eor	r25, r25
    1a90:	ee 0f       	add	r30, r30
    1a92:	97 95       	ror	r25
    1a94:	87 95       	ror	r24
    1a96:	08 95       	ret

00001a98 <__divsf3>:
    1a98:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <__divsf3x>
    1a9c:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__fp_round>
    1aa0:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__fp_pscB>
    1aa4:	58 f0       	brcs	.+22     	; 0x1abc <__divsf3+0x24>
    1aa6:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__fp_pscA>
    1aaa:	40 f0       	brcs	.+16     	; 0x1abc <__divsf3+0x24>
    1aac:	29 f4       	brne	.+10     	; 0x1ab8 <__divsf3+0x20>
    1aae:	5f 3f       	cpi	r21, 0xFF	; 255
    1ab0:	29 f0       	breq	.+10     	; 0x1abc <__divsf3+0x24>
    1ab2:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__fp_inf>
    1ab6:	51 11       	cpse	r21, r1
    1ab8:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__fp_szero>
    1abc:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__fp_nan>

00001ac0 <__divsf3x>:
    1ac0:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fp_split3>
    1ac4:	68 f3       	brcs	.-38     	; 0x1aa0 <__divsf3+0x8>

00001ac6 <__divsf3_pse>:
    1ac6:	99 23       	and	r25, r25
    1ac8:	b1 f3       	breq	.-20     	; 0x1ab6 <__divsf3+0x1e>
    1aca:	55 23       	and	r21, r21
    1acc:	91 f3       	breq	.-28     	; 0x1ab2 <__divsf3+0x1a>
    1ace:	95 1b       	sub	r25, r21
    1ad0:	55 0b       	sbc	r21, r21
    1ad2:	bb 27       	eor	r27, r27
    1ad4:	aa 27       	eor	r26, r26
    1ad6:	62 17       	cp	r22, r18
    1ad8:	73 07       	cpc	r23, r19
    1ada:	84 07       	cpc	r24, r20
    1adc:	38 f0       	brcs	.+14     	; 0x1aec <__divsf3_pse+0x26>
    1ade:	9f 5f       	subi	r25, 0xFF	; 255
    1ae0:	5f 4f       	sbci	r21, 0xFF	; 255
    1ae2:	22 0f       	add	r18, r18
    1ae4:	33 1f       	adc	r19, r19
    1ae6:	44 1f       	adc	r20, r20
    1ae8:	aa 1f       	adc	r26, r26
    1aea:	a9 f3       	breq	.-22     	; 0x1ad6 <__divsf3_pse+0x10>
    1aec:	35 d0       	rcall	.+106    	; 0x1b58 <__divsf3_pse+0x92>
    1aee:	0e 2e       	mov	r0, r30
    1af0:	3a f0       	brmi	.+14     	; 0x1b00 <__divsf3_pse+0x3a>
    1af2:	e0 e8       	ldi	r30, 0x80	; 128
    1af4:	32 d0       	rcall	.+100    	; 0x1b5a <__divsf3_pse+0x94>
    1af6:	91 50       	subi	r25, 0x01	; 1
    1af8:	50 40       	sbci	r21, 0x00	; 0
    1afa:	e6 95       	lsr	r30
    1afc:	00 1c       	adc	r0, r0
    1afe:	ca f7       	brpl	.-14     	; 0x1af2 <__divsf3_pse+0x2c>
    1b00:	2b d0       	rcall	.+86     	; 0x1b58 <__divsf3_pse+0x92>
    1b02:	fe 2f       	mov	r31, r30
    1b04:	29 d0       	rcall	.+82     	; 0x1b58 <__divsf3_pse+0x92>
    1b06:	66 0f       	add	r22, r22
    1b08:	77 1f       	adc	r23, r23
    1b0a:	88 1f       	adc	r24, r24
    1b0c:	bb 1f       	adc	r27, r27
    1b0e:	26 17       	cp	r18, r22
    1b10:	37 07       	cpc	r19, r23
    1b12:	48 07       	cpc	r20, r24
    1b14:	ab 07       	cpc	r26, r27
    1b16:	b0 e8       	ldi	r27, 0x80	; 128
    1b18:	09 f0       	breq	.+2      	; 0x1b1c <__divsf3_pse+0x56>
    1b1a:	bb 0b       	sbc	r27, r27
    1b1c:	80 2d       	mov	r24, r0
    1b1e:	bf 01       	movw	r22, r30
    1b20:	ff 27       	eor	r31, r31
    1b22:	93 58       	subi	r25, 0x83	; 131
    1b24:	5f 4f       	sbci	r21, 0xFF	; 255
    1b26:	3a f0       	brmi	.+14     	; 0x1b36 <__divsf3_pse+0x70>
    1b28:	9e 3f       	cpi	r25, 0xFE	; 254
    1b2a:	51 05       	cpc	r21, r1
    1b2c:	78 f0       	brcs	.+30     	; 0x1b4c <__divsf3_pse+0x86>
    1b2e:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__fp_inf>
    1b32:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__fp_szero>
    1b36:	5f 3f       	cpi	r21, 0xFF	; 255
    1b38:	e4 f3       	brlt	.-8      	; 0x1b32 <__divsf3_pse+0x6c>
    1b3a:	98 3e       	cpi	r25, 0xE8	; 232
    1b3c:	d4 f3       	brlt	.-12     	; 0x1b32 <__divsf3_pse+0x6c>
    1b3e:	86 95       	lsr	r24
    1b40:	77 95       	ror	r23
    1b42:	67 95       	ror	r22
    1b44:	b7 95       	ror	r27
    1b46:	f7 95       	ror	r31
    1b48:	9f 5f       	subi	r25, 0xFF	; 255
    1b4a:	c9 f7       	brne	.-14     	; 0x1b3e <__divsf3_pse+0x78>
    1b4c:	88 0f       	add	r24, r24
    1b4e:	91 1d       	adc	r25, r1
    1b50:	96 95       	lsr	r25
    1b52:	87 95       	ror	r24
    1b54:	97 f9       	bld	r25, 7
    1b56:	08 95       	ret
    1b58:	e1 e0       	ldi	r30, 0x01	; 1
    1b5a:	66 0f       	add	r22, r22
    1b5c:	77 1f       	adc	r23, r23
    1b5e:	88 1f       	adc	r24, r24
    1b60:	bb 1f       	adc	r27, r27
    1b62:	62 17       	cp	r22, r18
    1b64:	73 07       	cpc	r23, r19
    1b66:	84 07       	cpc	r24, r20
    1b68:	ba 07       	cpc	r27, r26
    1b6a:	20 f0       	brcs	.+8      	; 0x1b74 <__divsf3_pse+0xae>
    1b6c:	62 1b       	sub	r22, r18
    1b6e:	73 0b       	sbc	r23, r19
    1b70:	84 0b       	sbc	r24, r20
    1b72:	ba 0b       	sbc	r27, r26
    1b74:	ee 1f       	adc	r30, r30
    1b76:	88 f7       	brcc	.-30     	; 0x1b5a <__divsf3_pse+0x94>
    1b78:	e0 95       	com	r30
    1b7a:	08 95       	ret

00001b7c <__floatunsisf>:
    1b7c:	e8 94       	clt
    1b7e:	09 c0       	rjmp	.+18     	; 0x1b92 <__floatsisf+0x12>

00001b80 <__floatsisf>:
    1b80:	97 fb       	bst	r25, 7
    1b82:	3e f4       	brtc	.+14     	; 0x1b92 <__floatsisf+0x12>
    1b84:	90 95       	com	r25
    1b86:	80 95       	com	r24
    1b88:	70 95       	com	r23
    1b8a:	61 95       	neg	r22
    1b8c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b8e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b90:	9f 4f       	sbci	r25, 0xFF	; 255
    1b92:	99 23       	and	r25, r25
    1b94:	a9 f0       	breq	.+42     	; 0x1bc0 <__floatsisf+0x40>
    1b96:	f9 2f       	mov	r31, r25
    1b98:	96 e9       	ldi	r25, 0x96	; 150
    1b9a:	bb 27       	eor	r27, r27
    1b9c:	93 95       	inc	r25
    1b9e:	f6 95       	lsr	r31
    1ba0:	87 95       	ror	r24
    1ba2:	77 95       	ror	r23
    1ba4:	67 95       	ror	r22
    1ba6:	b7 95       	ror	r27
    1ba8:	f1 11       	cpse	r31, r1
    1baa:	f8 cf       	rjmp	.-16     	; 0x1b9c <__floatsisf+0x1c>
    1bac:	fa f4       	brpl	.+62     	; 0x1bec <__floatsisf+0x6c>
    1bae:	bb 0f       	add	r27, r27
    1bb0:	11 f4       	brne	.+4      	; 0x1bb6 <__floatsisf+0x36>
    1bb2:	60 ff       	sbrs	r22, 0
    1bb4:	1b c0       	rjmp	.+54     	; 0x1bec <__floatsisf+0x6c>
    1bb6:	6f 5f       	subi	r22, 0xFF	; 255
    1bb8:	7f 4f       	sbci	r23, 0xFF	; 255
    1bba:	8f 4f       	sbci	r24, 0xFF	; 255
    1bbc:	9f 4f       	sbci	r25, 0xFF	; 255
    1bbe:	16 c0       	rjmp	.+44     	; 0x1bec <__floatsisf+0x6c>
    1bc0:	88 23       	and	r24, r24
    1bc2:	11 f0       	breq	.+4      	; 0x1bc8 <__floatsisf+0x48>
    1bc4:	96 e9       	ldi	r25, 0x96	; 150
    1bc6:	11 c0       	rjmp	.+34     	; 0x1bea <__floatsisf+0x6a>
    1bc8:	77 23       	and	r23, r23
    1bca:	21 f0       	breq	.+8      	; 0x1bd4 <__floatsisf+0x54>
    1bcc:	9e e8       	ldi	r25, 0x8E	; 142
    1bce:	87 2f       	mov	r24, r23
    1bd0:	76 2f       	mov	r23, r22
    1bd2:	05 c0       	rjmp	.+10     	; 0x1bde <__floatsisf+0x5e>
    1bd4:	66 23       	and	r22, r22
    1bd6:	71 f0       	breq	.+28     	; 0x1bf4 <__floatsisf+0x74>
    1bd8:	96 e8       	ldi	r25, 0x86	; 134
    1bda:	86 2f       	mov	r24, r22
    1bdc:	70 e0       	ldi	r23, 0x00	; 0
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	2a f0       	brmi	.+10     	; 0x1bec <__floatsisf+0x6c>
    1be2:	9a 95       	dec	r25
    1be4:	66 0f       	add	r22, r22
    1be6:	77 1f       	adc	r23, r23
    1be8:	88 1f       	adc	r24, r24
    1bea:	da f7       	brpl	.-10     	; 0x1be2 <__floatsisf+0x62>
    1bec:	88 0f       	add	r24, r24
    1bee:	96 95       	lsr	r25
    1bf0:	87 95       	ror	r24
    1bf2:	97 f9       	bld	r25, 7
    1bf4:	08 95       	ret

00001bf6 <__fp_inf>:
    1bf6:	97 f9       	bld	r25, 7
    1bf8:	9f 67       	ori	r25, 0x7F	; 127
    1bfa:	80 e8       	ldi	r24, 0x80	; 128
    1bfc:	70 e0       	ldi	r23, 0x00	; 0
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	08 95       	ret

00001c02 <__fp_nan>:
    1c02:	9f ef       	ldi	r25, 0xFF	; 255
    1c04:	80 ec       	ldi	r24, 0xC0	; 192
    1c06:	08 95       	ret

00001c08 <__fp_pscA>:
    1c08:	00 24       	eor	r0, r0
    1c0a:	0a 94       	dec	r0
    1c0c:	16 16       	cp	r1, r22
    1c0e:	17 06       	cpc	r1, r23
    1c10:	18 06       	cpc	r1, r24
    1c12:	09 06       	cpc	r0, r25
    1c14:	08 95       	ret

00001c16 <__fp_pscB>:
    1c16:	00 24       	eor	r0, r0
    1c18:	0a 94       	dec	r0
    1c1a:	12 16       	cp	r1, r18
    1c1c:	13 06       	cpc	r1, r19
    1c1e:	14 06       	cpc	r1, r20
    1c20:	05 06       	cpc	r0, r21
    1c22:	08 95       	ret

00001c24 <__fp_round>:
    1c24:	09 2e       	mov	r0, r25
    1c26:	03 94       	inc	r0
    1c28:	00 0c       	add	r0, r0
    1c2a:	11 f4       	brne	.+4      	; 0x1c30 <__fp_round+0xc>
    1c2c:	88 23       	and	r24, r24
    1c2e:	52 f0       	brmi	.+20     	; 0x1c44 <__fp_round+0x20>
    1c30:	bb 0f       	add	r27, r27
    1c32:	40 f4       	brcc	.+16     	; 0x1c44 <__fp_round+0x20>
    1c34:	bf 2b       	or	r27, r31
    1c36:	11 f4       	brne	.+4      	; 0x1c3c <__fp_round+0x18>
    1c38:	60 ff       	sbrs	r22, 0
    1c3a:	04 c0       	rjmp	.+8      	; 0x1c44 <__fp_round+0x20>
    1c3c:	6f 5f       	subi	r22, 0xFF	; 255
    1c3e:	7f 4f       	sbci	r23, 0xFF	; 255
    1c40:	8f 4f       	sbci	r24, 0xFF	; 255
    1c42:	9f 4f       	sbci	r25, 0xFF	; 255
    1c44:	08 95       	ret

00001c46 <__fp_split3>:
    1c46:	57 fd       	sbrc	r21, 7
    1c48:	90 58       	subi	r25, 0x80	; 128
    1c4a:	44 0f       	add	r20, r20
    1c4c:	55 1f       	adc	r21, r21
    1c4e:	59 f0       	breq	.+22     	; 0x1c66 <__fp_splitA+0x10>
    1c50:	5f 3f       	cpi	r21, 0xFF	; 255
    1c52:	71 f0       	breq	.+28     	; 0x1c70 <__fp_splitA+0x1a>
    1c54:	47 95       	ror	r20

00001c56 <__fp_splitA>:
    1c56:	88 0f       	add	r24, r24
    1c58:	97 fb       	bst	r25, 7
    1c5a:	99 1f       	adc	r25, r25
    1c5c:	61 f0       	breq	.+24     	; 0x1c76 <__fp_splitA+0x20>
    1c5e:	9f 3f       	cpi	r25, 0xFF	; 255
    1c60:	79 f0       	breq	.+30     	; 0x1c80 <__fp_splitA+0x2a>
    1c62:	87 95       	ror	r24
    1c64:	08 95       	ret
    1c66:	12 16       	cp	r1, r18
    1c68:	13 06       	cpc	r1, r19
    1c6a:	14 06       	cpc	r1, r20
    1c6c:	55 1f       	adc	r21, r21
    1c6e:	f2 cf       	rjmp	.-28     	; 0x1c54 <__fp_split3+0xe>
    1c70:	46 95       	lsr	r20
    1c72:	f1 df       	rcall	.-30     	; 0x1c56 <__fp_splitA>
    1c74:	08 c0       	rjmp	.+16     	; 0x1c86 <__fp_splitA+0x30>
    1c76:	16 16       	cp	r1, r22
    1c78:	17 06       	cpc	r1, r23
    1c7a:	18 06       	cpc	r1, r24
    1c7c:	99 1f       	adc	r25, r25
    1c7e:	f1 cf       	rjmp	.-30     	; 0x1c62 <__fp_splitA+0xc>
    1c80:	86 95       	lsr	r24
    1c82:	71 05       	cpc	r23, r1
    1c84:	61 05       	cpc	r22, r1
    1c86:	08 94       	sec
    1c88:	08 95       	ret

00001c8a <__fp_zero>:
    1c8a:	e8 94       	clt

00001c8c <__fp_szero>:
    1c8c:	bb 27       	eor	r27, r27
    1c8e:	66 27       	eor	r22, r22
    1c90:	77 27       	eor	r23, r23
    1c92:	cb 01       	movw	r24, r22
    1c94:	97 f9       	bld	r25, 7
    1c96:	08 95       	ret

00001c98 <__gesf2>:
    1c98:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <__fp_cmp>
    1c9c:	08 f4       	brcc	.+2      	; 0x1ca0 <__gesf2+0x8>
    1c9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ca0:	08 95       	ret

00001ca2 <__mulsf3>:
    1ca2:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <__mulsf3x>
    1ca6:	0c 94 12 0e 	jmp	0x1c24	; 0x1c24 <__fp_round>
    1caa:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <__fp_pscA>
    1cae:	38 f0       	brcs	.+14     	; 0x1cbe <__mulsf3+0x1c>
    1cb0:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <__fp_pscB>
    1cb4:	20 f0       	brcs	.+8      	; 0x1cbe <__mulsf3+0x1c>
    1cb6:	95 23       	and	r25, r21
    1cb8:	11 f0       	breq	.+4      	; 0x1cbe <__mulsf3+0x1c>
    1cba:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__fp_inf>
    1cbe:	0c 94 01 0e 	jmp	0x1c02	; 0x1c02 <__fp_nan>
    1cc2:	11 24       	eor	r1, r1
    1cc4:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__fp_szero>

00001cc8 <__mulsf3x>:
    1cc8:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <__fp_split3>
    1ccc:	70 f3       	brcs	.-36     	; 0x1caa <__mulsf3+0x8>

00001cce <__mulsf3_pse>:
    1cce:	95 9f       	mul	r25, r21
    1cd0:	c1 f3       	breq	.-16     	; 0x1cc2 <__mulsf3+0x20>
    1cd2:	95 0f       	add	r25, r21
    1cd4:	50 e0       	ldi	r21, 0x00	; 0
    1cd6:	55 1f       	adc	r21, r21
    1cd8:	62 9f       	mul	r22, r18
    1cda:	f0 01       	movw	r30, r0
    1cdc:	72 9f       	mul	r23, r18
    1cde:	bb 27       	eor	r27, r27
    1ce0:	f0 0d       	add	r31, r0
    1ce2:	b1 1d       	adc	r27, r1
    1ce4:	63 9f       	mul	r22, r19
    1ce6:	aa 27       	eor	r26, r26
    1ce8:	f0 0d       	add	r31, r0
    1cea:	b1 1d       	adc	r27, r1
    1cec:	aa 1f       	adc	r26, r26
    1cee:	64 9f       	mul	r22, r20
    1cf0:	66 27       	eor	r22, r22
    1cf2:	b0 0d       	add	r27, r0
    1cf4:	a1 1d       	adc	r26, r1
    1cf6:	66 1f       	adc	r22, r22
    1cf8:	82 9f       	mul	r24, r18
    1cfa:	22 27       	eor	r18, r18
    1cfc:	b0 0d       	add	r27, r0
    1cfe:	a1 1d       	adc	r26, r1
    1d00:	62 1f       	adc	r22, r18
    1d02:	73 9f       	mul	r23, r19
    1d04:	b0 0d       	add	r27, r0
    1d06:	a1 1d       	adc	r26, r1
    1d08:	62 1f       	adc	r22, r18
    1d0a:	83 9f       	mul	r24, r19
    1d0c:	a0 0d       	add	r26, r0
    1d0e:	61 1d       	adc	r22, r1
    1d10:	22 1f       	adc	r18, r18
    1d12:	74 9f       	mul	r23, r20
    1d14:	33 27       	eor	r19, r19
    1d16:	a0 0d       	add	r26, r0
    1d18:	61 1d       	adc	r22, r1
    1d1a:	23 1f       	adc	r18, r19
    1d1c:	84 9f       	mul	r24, r20
    1d1e:	60 0d       	add	r22, r0
    1d20:	21 1d       	adc	r18, r1
    1d22:	82 2f       	mov	r24, r18
    1d24:	76 2f       	mov	r23, r22
    1d26:	6a 2f       	mov	r22, r26
    1d28:	11 24       	eor	r1, r1
    1d2a:	9f 57       	subi	r25, 0x7F	; 127
    1d2c:	50 40       	sbci	r21, 0x00	; 0
    1d2e:	9a f0       	brmi	.+38     	; 0x1d56 <__mulsf3_pse+0x88>
    1d30:	f1 f0       	breq	.+60     	; 0x1d6e <__mulsf3_pse+0xa0>
    1d32:	88 23       	and	r24, r24
    1d34:	4a f0       	brmi	.+18     	; 0x1d48 <__mulsf3_pse+0x7a>
    1d36:	ee 0f       	add	r30, r30
    1d38:	ff 1f       	adc	r31, r31
    1d3a:	bb 1f       	adc	r27, r27
    1d3c:	66 1f       	adc	r22, r22
    1d3e:	77 1f       	adc	r23, r23
    1d40:	88 1f       	adc	r24, r24
    1d42:	91 50       	subi	r25, 0x01	; 1
    1d44:	50 40       	sbci	r21, 0x00	; 0
    1d46:	a9 f7       	brne	.-22     	; 0x1d32 <__mulsf3_pse+0x64>
    1d48:	9e 3f       	cpi	r25, 0xFE	; 254
    1d4a:	51 05       	cpc	r21, r1
    1d4c:	80 f0       	brcs	.+32     	; 0x1d6e <__mulsf3_pse+0xa0>
    1d4e:	0c 94 fb 0d 	jmp	0x1bf6	; 0x1bf6 <__fp_inf>
    1d52:	0c 94 46 0e 	jmp	0x1c8c	; 0x1c8c <__fp_szero>
    1d56:	5f 3f       	cpi	r21, 0xFF	; 255
    1d58:	e4 f3       	brlt	.-8      	; 0x1d52 <__mulsf3_pse+0x84>
    1d5a:	98 3e       	cpi	r25, 0xE8	; 232
    1d5c:	d4 f3       	brlt	.-12     	; 0x1d52 <__mulsf3_pse+0x84>
    1d5e:	86 95       	lsr	r24
    1d60:	77 95       	ror	r23
    1d62:	67 95       	ror	r22
    1d64:	b7 95       	ror	r27
    1d66:	f7 95       	ror	r31
    1d68:	e7 95       	ror	r30
    1d6a:	9f 5f       	subi	r25, 0xFF	; 255
    1d6c:	c1 f7       	brne	.-16     	; 0x1d5e <__mulsf3_pse+0x90>
    1d6e:	fe 2b       	or	r31, r30
    1d70:	88 0f       	add	r24, r24
    1d72:	91 1d       	adc	r25, r1
    1d74:	96 95       	lsr	r25
    1d76:	87 95       	ror	r24
    1d78:	97 f9       	bld	r25, 7
    1d7a:	08 95       	ret

00001d7c <__fp_cmp>:
    1d7c:	99 0f       	add	r25, r25
    1d7e:	00 08       	sbc	r0, r0
    1d80:	55 0f       	add	r21, r21
    1d82:	aa 0b       	sbc	r26, r26
    1d84:	e0 e8       	ldi	r30, 0x80	; 128
    1d86:	fe ef       	ldi	r31, 0xFE	; 254
    1d88:	16 16       	cp	r1, r22
    1d8a:	17 06       	cpc	r1, r23
    1d8c:	e8 07       	cpc	r30, r24
    1d8e:	f9 07       	cpc	r31, r25
    1d90:	c0 f0       	brcs	.+48     	; 0x1dc2 <__fp_cmp+0x46>
    1d92:	12 16       	cp	r1, r18
    1d94:	13 06       	cpc	r1, r19
    1d96:	e4 07       	cpc	r30, r20
    1d98:	f5 07       	cpc	r31, r21
    1d9a:	98 f0       	brcs	.+38     	; 0x1dc2 <__fp_cmp+0x46>
    1d9c:	62 1b       	sub	r22, r18
    1d9e:	73 0b       	sbc	r23, r19
    1da0:	84 0b       	sbc	r24, r20
    1da2:	95 0b       	sbc	r25, r21
    1da4:	39 f4       	brne	.+14     	; 0x1db4 <__fp_cmp+0x38>
    1da6:	0a 26       	eor	r0, r26
    1da8:	61 f0       	breq	.+24     	; 0x1dc2 <__fp_cmp+0x46>
    1daa:	23 2b       	or	r18, r19
    1dac:	24 2b       	or	r18, r20
    1dae:	25 2b       	or	r18, r21
    1db0:	21 f4       	brne	.+8      	; 0x1dba <__fp_cmp+0x3e>
    1db2:	08 95       	ret
    1db4:	0a 26       	eor	r0, r26
    1db6:	09 f4       	brne	.+2      	; 0x1dba <__fp_cmp+0x3e>
    1db8:	a1 40       	sbci	r26, 0x01	; 1
    1dba:	a6 95       	lsr	r26
    1dbc:	8f ef       	ldi	r24, 0xFF	; 255
    1dbe:	81 1d       	adc	r24, r1
    1dc0:	81 1d       	adc	r24, r1
    1dc2:	08 95       	ret

00001dc4 <__divmodhi4>:
    1dc4:	97 fb       	bst	r25, 7
    1dc6:	07 2e       	mov	r0, r23
    1dc8:	16 f4       	brtc	.+4      	; 0x1dce <__divmodhi4+0xa>
    1dca:	00 94       	com	r0
    1dcc:	07 d0       	rcall	.+14     	; 0x1ddc <__divmodhi4_neg1>
    1dce:	77 fd       	sbrc	r23, 7
    1dd0:	09 d0       	rcall	.+18     	; 0x1de4 <__divmodhi4_neg2>
    1dd2:	0e 94 f6 0e 	call	0x1dec	; 0x1dec <__udivmodhi4>
    1dd6:	07 fc       	sbrc	r0, 7
    1dd8:	05 d0       	rcall	.+10     	; 0x1de4 <__divmodhi4_neg2>
    1dda:	3e f4       	brtc	.+14     	; 0x1dea <__divmodhi4_exit>

00001ddc <__divmodhi4_neg1>:
    1ddc:	90 95       	com	r25
    1dde:	81 95       	neg	r24
    1de0:	9f 4f       	sbci	r25, 0xFF	; 255
    1de2:	08 95       	ret

00001de4 <__divmodhi4_neg2>:
    1de4:	70 95       	com	r23
    1de6:	61 95       	neg	r22
    1de8:	7f 4f       	sbci	r23, 0xFF	; 255

00001dea <__divmodhi4_exit>:
    1dea:	08 95       	ret

00001dec <__udivmodhi4>:
    1dec:	aa 1b       	sub	r26, r26
    1dee:	bb 1b       	sub	r27, r27
    1df0:	51 e1       	ldi	r21, 0x11	; 17
    1df2:	07 c0       	rjmp	.+14     	; 0x1e02 <__udivmodhi4_ep>

00001df4 <__udivmodhi4_loop>:
    1df4:	aa 1f       	adc	r26, r26
    1df6:	bb 1f       	adc	r27, r27
    1df8:	a6 17       	cp	r26, r22
    1dfa:	b7 07       	cpc	r27, r23
    1dfc:	10 f0       	brcs	.+4      	; 0x1e02 <__udivmodhi4_ep>
    1dfe:	a6 1b       	sub	r26, r22
    1e00:	b7 0b       	sbc	r27, r23

00001e02 <__udivmodhi4_ep>:
    1e02:	88 1f       	adc	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	5a 95       	dec	r21
    1e08:	a9 f7       	brne	.-22     	; 0x1df4 <__udivmodhi4_loop>
    1e0a:	80 95       	com	r24
    1e0c:	90 95       	com	r25
    1e0e:	bc 01       	movw	r22, r24
    1e10:	cd 01       	movw	r24, r26
    1e12:	08 95       	ret

00001e14 <__tablejump2__>:
    1e14:	ee 0f       	add	r30, r30
    1e16:	ff 1f       	adc	r31, r31
    1e18:	05 90       	lpm	r0, Z+
    1e1a:	f4 91       	lpm	r31, Z
    1e1c:	e0 2d       	mov	r30, r0
    1e1e:	09 94       	ijmp

00001e20 <do_rand>:
    1e20:	8f 92       	push	r8
    1e22:	9f 92       	push	r9
    1e24:	af 92       	push	r10
    1e26:	bf 92       	push	r11
    1e28:	cf 92       	push	r12
    1e2a:	df 92       	push	r13
    1e2c:	ef 92       	push	r14
    1e2e:	ff 92       	push	r15
    1e30:	cf 93       	push	r28
    1e32:	df 93       	push	r29
    1e34:	ec 01       	movw	r28, r24
    1e36:	68 81       	ld	r22, Y
    1e38:	79 81       	ldd	r23, Y+1	; 0x01
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3e:	61 15       	cp	r22, r1
    1e40:	71 05       	cpc	r23, r1
    1e42:	81 05       	cpc	r24, r1
    1e44:	91 05       	cpc	r25, r1
    1e46:	21 f4       	brne	.+8      	; 0x1e50 <do_rand+0x30>
    1e48:	64 e2       	ldi	r22, 0x24	; 36
    1e4a:	79 ed       	ldi	r23, 0xD9	; 217
    1e4c:	8b e5       	ldi	r24, 0x5B	; 91
    1e4e:	97 e0       	ldi	r25, 0x07	; 7
    1e50:	2d e1       	ldi	r18, 0x1D	; 29
    1e52:	33 ef       	ldi	r19, 0xF3	; 243
    1e54:	41 e0       	ldi	r20, 0x01	; 1
    1e56:	50 e0       	ldi	r21, 0x00	; 0
    1e58:	0e 94 6c 0f 	call	0x1ed8	; 0x1ed8 <__divmodsi4>
    1e5c:	49 01       	movw	r8, r18
    1e5e:	5a 01       	movw	r10, r20
    1e60:	9b 01       	movw	r18, r22
    1e62:	ac 01       	movw	r20, r24
    1e64:	a7 ea       	ldi	r26, 0xA7	; 167
    1e66:	b1 e4       	ldi	r27, 0x41	; 65
    1e68:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__muluhisi3>
    1e6c:	6b 01       	movw	r12, r22
    1e6e:	7c 01       	movw	r14, r24
    1e70:	ac ee       	ldi	r26, 0xEC	; 236
    1e72:	b4 ef       	ldi	r27, 0xF4	; 244
    1e74:	a5 01       	movw	r20, r10
    1e76:	94 01       	movw	r18, r8
    1e78:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__mulohisi3>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	8c 0d       	add	r24, r12
    1e82:	9d 1d       	adc	r25, r13
    1e84:	ae 1d       	adc	r26, r14
    1e86:	bf 1d       	adc	r27, r15
    1e88:	b7 ff       	sbrs	r27, 7
    1e8a:	03 c0       	rjmp	.+6      	; 0x1e92 <do_rand+0x72>
    1e8c:	01 97       	sbiw	r24, 0x01	; 1
    1e8e:	a1 09       	sbc	r26, r1
    1e90:	b0 48       	sbci	r27, 0x80	; 128
    1e92:	88 83       	st	Y, r24
    1e94:	99 83       	std	Y+1, r25	; 0x01
    1e96:	aa 83       	std	Y+2, r26	; 0x02
    1e98:	bb 83       	std	Y+3, r27	; 0x03
    1e9a:	9f 77       	andi	r25, 0x7F	; 127
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	ff 90       	pop	r15
    1ea2:	ef 90       	pop	r14
    1ea4:	df 90       	pop	r13
    1ea6:	cf 90       	pop	r12
    1ea8:	bf 90       	pop	r11
    1eaa:	af 90       	pop	r10
    1eac:	9f 90       	pop	r9
    1eae:	8f 90       	pop	r8
    1eb0:	08 95       	ret

00001eb2 <rand_r>:
    1eb2:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <do_rand>
    1eb6:	08 95       	ret

00001eb8 <rand>:
    1eb8:	80 e6       	ldi	r24, 0x60	; 96
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <do_rand>
    1ec0:	08 95       	ret

00001ec2 <srand>:
    1ec2:	a0 e0       	ldi	r26, 0x00	; 0
    1ec4:	b0 e0       	ldi	r27, 0x00	; 0
    1ec6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1eca:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1ece:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    1ed2:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    1ed6:	08 95       	ret

00001ed8 <__divmodsi4>:
    1ed8:	05 2e       	mov	r0, r21
    1eda:	97 fb       	bst	r25, 7
    1edc:	1e f4       	brtc	.+6      	; 0x1ee4 <__divmodsi4+0xc>
    1ede:	00 94       	com	r0
    1ee0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__negsi2>
    1ee4:	57 fd       	sbrc	r21, 7
    1ee6:	07 d0       	rcall	.+14     	; 0x1ef6 <__divmodsi4_neg2>
    1ee8:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <__udivmodsi4>
    1eec:	07 fc       	sbrc	r0, 7
    1eee:	03 d0       	rcall	.+6      	; 0x1ef6 <__divmodsi4_neg2>
    1ef0:	4e f4       	brtc	.+18     	; 0x1f04 <__divmodsi4_exit>
    1ef2:	0c 94 83 0f 	jmp	0x1f06	; 0x1f06 <__negsi2>

00001ef6 <__divmodsi4_neg2>:
    1ef6:	50 95       	com	r21
    1ef8:	40 95       	com	r20
    1efa:	30 95       	com	r19
    1efc:	21 95       	neg	r18
    1efe:	3f 4f       	sbci	r19, 0xFF	; 255
    1f00:	4f 4f       	sbci	r20, 0xFF	; 255
    1f02:	5f 4f       	sbci	r21, 0xFF	; 255

00001f04 <__divmodsi4_exit>:
    1f04:	08 95       	ret

00001f06 <__negsi2>:
    1f06:	90 95       	com	r25
    1f08:	80 95       	com	r24
    1f0a:	70 95       	com	r23
    1f0c:	61 95       	neg	r22
    1f0e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f10:	8f 4f       	sbci	r24, 0xFF	; 255
    1f12:	9f 4f       	sbci	r25, 0xFF	; 255
    1f14:	08 95       	ret

00001f16 <__muluhisi3>:
    1f16:	0e 94 c0 0f 	call	0x1f80	; 0x1f80 <__umulhisi3>
    1f1a:	a5 9f       	mul	r26, r21
    1f1c:	90 0d       	add	r25, r0
    1f1e:	b4 9f       	mul	r27, r20
    1f20:	90 0d       	add	r25, r0
    1f22:	a4 9f       	mul	r26, r20
    1f24:	80 0d       	add	r24, r0
    1f26:	91 1d       	adc	r25, r1
    1f28:	11 24       	eor	r1, r1
    1f2a:	08 95       	ret

00001f2c <__mulshisi3>:
    1f2c:	b7 ff       	sbrs	r27, 7
    1f2e:	0c 94 8b 0f 	jmp	0x1f16	; 0x1f16 <__muluhisi3>

00001f32 <__mulohisi3>:
    1f32:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <__muluhisi3>
    1f36:	82 1b       	sub	r24, r18
    1f38:	93 0b       	sbc	r25, r19
    1f3a:	08 95       	ret

00001f3c <__udivmodsi4>:
    1f3c:	a1 e2       	ldi	r26, 0x21	; 33
    1f3e:	1a 2e       	mov	r1, r26
    1f40:	aa 1b       	sub	r26, r26
    1f42:	bb 1b       	sub	r27, r27
    1f44:	fd 01       	movw	r30, r26
    1f46:	0d c0       	rjmp	.+26     	; 0x1f62 <__udivmodsi4_ep>

00001f48 <__udivmodsi4_loop>:
    1f48:	aa 1f       	adc	r26, r26
    1f4a:	bb 1f       	adc	r27, r27
    1f4c:	ee 1f       	adc	r30, r30
    1f4e:	ff 1f       	adc	r31, r31
    1f50:	a2 17       	cp	r26, r18
    1f52:	b3 07       	cpc	r27, r19
    1f54:	e4 07       	cpc	r30, r20
    1f56:	f5 07       	cpc	r31, r21
    1f58:	20 f0       	brcs	.+8      	; 0x1f62 <__udivmodsi4_ep>
    1f5a:	a2 1b       	sub	r26, r18
    1f5c:	b3 0b       	sbc	r27, r19
    1f5e:	e4 0b       	sbc	r30, r20
    1f60:	f5 0b       	sbc	r31, r21

00001f62 <__udivmodsi4_ep>:
    1f62:	66 1f       	adc	r22, r22
    1f64:	77 1f       	adc	r23, r23
    1f66:	88 1f       	adc	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	1a 94       	dec	r1
    1f6c:	69 f7       	brne	.-38     	; 0x1f48 <__udivmodsi4_loop>
    1f6e:	60 95       	com	r22
    1f70:	70 95       	com	r23
    1f72:	80 95       	com	r24
    1f74:	90 95       	com	r25
    1f76:	9b 01       	movw	r18, r22
    1f78:	ac 01       	movw	r20, r24
    1f7a:	bd 01       	movw	r22, r26
    1f7c:	cf 01       	movw	r24, r30
    1f7e:	08 95       	ret

00001f80 <__umulhisi3>:
    1f80:	a2 9f       	mul	r26, r18
    1f82:	b0 01       	movw	r22, r0
    1f84:	b3 9f       	mul	r27, r19
    1f86:	c0 01       	movw	r24, r0
    1f88:	a3 9f       	mul	r26, r19
    1f8a:	70 0d       	add	r23, r0
    1f8c:	81 1d       	adc	r24, r1
    1f8e:	11 24       	eor	r1, r1
    1f90:	91 1d       	adc	r25, r1
    1f92:	b2 9f       	mul	r27, r18
    1f94:	70 0d       	add	r23, r0
    1f96:	81 1d       	adc	r24, r1
    1f98:	11 24       	eor	r1, r1
    1f9a:	91 1d       	adc	r25, r1
    1f9c:	08 95       	ret

00001f9e <_exit>:
    1f9e:	f8 94       	cli

00001fa0 <__stop_program>:
    1fa0:	ff cf       	rjmp	.-2      	; 0x1fa0 <__stop_program>
