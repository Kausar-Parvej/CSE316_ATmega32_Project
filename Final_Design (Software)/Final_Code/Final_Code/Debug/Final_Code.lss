
Final_Code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000019de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000020a  00800060  000019de  00001a72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000002b7  0080026a  0080026a  00001c7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001cac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f3e  00000000  00000000  00001d80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000953  00000000  00000000  00003cbe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c7f  00000000  00000000  00004611  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00005290  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009c0  00000000  00000000  00005480  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dba  00000000  00000000  00005e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000388  00000000  00000000  00006bfa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2b 00 	jmp	0x56	; 0x56 <__ctors_end>
       4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
       c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
      50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000054 <__ctors_start>:
      54:	ba 09       	sbc	r27, r10

00000056 <__ctors_end>:
      56:	11 24       	eor	r1, r1
      58:	1f be       	out	0x3f, r1	; 63
      5a:	cf e5       	ldi	r28, 0x5F	; 95
      5c:	d8 e0       	ldi	r29, 0x08	; 8
      5e:	de bf       	out	0x3e, r29	; 62
      60:	cd bf       	out	0x3d, r28	; 61

00000062 <__do_copy_data>:
      62:	12 e0       	ldi	r17, 0x02	; 2
      64:	a0 e6       	ldi	r26, 0x60	; 96
      66:	b0 e0       	ldi	r27, 0x00	; 0
      68:	ee ed       	ldi	r30, 0xDE	; 222
      6a:	f9 e1       	ldi	r31, 0x19	; 25
      6c:	02 c0       	rjmp	.+4      	; 0x72 <__do_copy_data+0x10>
      6e:	05 90       	lpm	r0, Z+
      70:	0d 92       	st	X+, r0
      72:	aa 36       	cpi	r26, 0x6A	; 106
      74:	b1 07       	cpc	r27, r17
      76:	d9 f7       	brne	.-10     	; 0x6e <__do_copy_data+0xc>

00000078 <__do_clear_bss>:
      78:	25 e0       	ldi	r18, 0x05	; 5
      7a:	aa e6       	ldi	r26, 0x6A	; 106
      7c:	b2 e0       	ldi	r27, 0x02	; 2
      7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
      80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
      82:	a1 32       	cpi	r26, 0x21	; 33
      84:	b2 07       	cpc	r27, r18
      86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
      88:	10 e0       	ldi	r17, 0x00	; 0
      8a:	cb e2       	ldi	r28, 0x2B	; 43
      8c:	d0 e0       	ldi	r29, 0x00	; 0
      8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
      90:	21 97       	sbiw	r28, 0x01	; 1
      92:	fe 01       	movw	r30, r28
      94:	0e 94 28 0c 	call	0x1850	; 0x1850 <__tablejump2__>
      98:	ca 32       	cpi	r28, 0x2A	; 42
      9a:	d1 07       	cpc	r29, r17
      9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
      9e:	0e 94 df 04 	call	0x9be	; 0x9be <main>
      a2:	0c 94 ed 0c 	jmp	0x19da	; 0x19da <_exit>

000000a6 <__bad_interrupt>:
      a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <_Z5resetv>:
#define REG_SHUTDOWN 0x0C
#define REG_DISPLAY_TEST 0x0F

void reset() // to reset the whole code
{
  PORTA |= (1 << RESET_BUTTON);
      aa:	dd 9a       	sbi	0x1b, 5	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      ac:	83 ec       	ldi	r24, 0xC3	; 195
      ae:	99 e0       	ldi	r25, 0x09	; 9
      b0:	01 97       	sbiw	r24, 0x01	; 1
      b2:	f1 f7       	brne	.-4      	; 0xb0 <_Z5resetv+0x6>
      b4:	00 c0       	rjmp	.+0      	; 0xb6 <_Z5resetv+0xc>
      b6:	00 00       	nop
				: "I" (_SFR_IO_ADDR(_WD_CONTROL_REG)),
				"r" ((uint8_t)(_BV(_WD_CHANGE_BIT) | _BV(WDE))),
				"r" ((uint8_t) ((value & 0x08 ? _WD_PS3_MASK : 0x00) |
						_BV(WDE) | (value & 0x07)) )
				: "r0"
		);
      b8:	98 e0       	ldi	r25, 0x08	; 8
      ba:	88 e1       	ldi	r24, 0x18	; 24
      bc:	0f b6       	in	r0, 0x3f	; 63
      be:	f8 94       	cli
      c0:	a8 95       	wdr
      c2:	81 bd       	out	0x21, r24	; 33
      c4:	0f be       	out	0x3f, r0	; 63
      c6:	91 bd       	out	0x21, r25	; 33
      c8:	ff cf       	rjmp	.-2      	; 0xc8 <_Z5resetv+0x1e>

000000ca <_Z8SPI_initv>:
// LED DRIVER FROM HERE
// Function to initialize SPI communication
void SPI_init()
{
  // Set MOSI and SCK as output
  DDRB |= (1 << MOSI) | (1 << SCK);
      ca:	87 b3       	in	r24, 0x17	; 23
      cc:	80 6a       	ori	r24, 0xA0	; 160
      ce:	87 bb       	out	0x17, r24	; 23
  // Enable SPI, set as master, and clock to fosc/16
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR0);
      d0:	81 e5       	ldi	r24, 0x51	; 81
      d2:	8d b9       	out	0x0d, r24	; 13
      d4:	08 95       	ret

000000d6 <_Z8SPI_sendh>:

// Function to send data via SPI
void SPI_send(uint8_t data)
{
  // Start transmission
  SPDR = data;
      d6:	8f b9       	out	0x0f, r24	; 15
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
      d8:	77 9b       	sbis	0x0e, 7	; 14
      da:	fe cf       	rjmp	.-4      	; 0xd8 <_Z8SPI_sendh+0x2>
    ;
}
      dc:	08 95       	ret

000000de <_Z12MAX7219_sendhh>:

// Function to send data to MAX7219
void MAX7219_send(uint8_t address, uint8_t data)
{
      de:	cf 93       	push	r28
      e0:	df 93       	push	r29
      e2:	d8 2f       	mov	r29, r24
      e4:	c6 2f       	mov	r28, r22
  // Select MAX7219 module
  PORTB &= ~(1 << LOAD_PIN);
      e6:	c4 98       	cbi	0x18, 4	; 24
  // Send address and data
  SPI_send(address);
      e8:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z8SPI_sendh>
  SPI_send(data);
      ec:	8c 2f       	mov	r24, r28
      ee:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z8SPI_sendh>

  SPI_send(address);
      f2:	8d 2f       	mov	r24, r29
      f4:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z8SPI_sendh>
  SPI_send(data);
      f8:	8c 2f       	mov	r24, r28
      fa:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z8SPI_sendh>

  SPI_send(address);
      fe:	8d 2f       	mov	r24, r29
     100:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z8SPI_sendh>
  SPI_send(data);
     104:	8c 2f       	mov	r24, r28
     106:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z8SPI_sendh>

  SPI_send(address);
     10a:	8d 2f       	mov	r24, r29
     10c:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z8SPI_sendh>
  SPI_send(data);
     110:	8c 2f       	mov	r24, r28
     112:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z8SPI_sendh>

  // DeSelect MAX7219 module
  PORTB |= (1 << LOAD_PIN);
     116:	c4 9a       	sbi	0x18, 4	; 24
}
     118:	df 91       	pop	r29
     11a:	cf 91       	pop	r28
     11c:	08 95       	ret

0000011e <_Z13MAX7219_send2hh>:
void MAX7219_send2(uint8_t address, uint8_t data)
{
     11e:	cf 93       	push	r28
     120:	c6 2f       	mov	r28, r22
  // Send address and data
  SPI_send(address);
     122:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z8SPI_sendh>
  SPI_send(data);
     126:	8c 2f       	mov	r24, r28
     128:	0e 94 6b 00 	call	0xd6	; 0xd6 <_Z8SPI_sendh>
}
     12c:	cf 91       	pop	r28
     12e:	08 95       	ret

00000130 <_Z11select_Loadv>:

void select_Load()
{
  // Select MAX7219 module
  PORTB &= ~(1 << LOAD_PIN);
     130:	c4 98       	cbi	0x18, 4	; 24
     132:	08 95       	ret

00000134 <_Z13deSelect_Loadv>:
}
void deSelect_Load()
{
  // DeSelect MAX7219 module
  PORTB |= (1 << LOAD_PIN);
     134:	c4 9a       	sbi	0x18, 4	; 24
     136:	08 95       	ret

00000138 <_Z11initMAX7219v>:
}
// Function to initialize MAX7219 driver
void initMAX7219()
{
  // Set decode mode: no decode for all digits
  MAX7219_send(REG_DECODE_MODE, 0x00);
     138:	60 e0       	ldi	r22, 0x00	; 0
     13a:	89 e0       	ldi	r24, 0x09	; 9
     13c:	0e 94 6f 00 	call	0xde	; 0xde <_Z12MAX7219_sendhh>

  // Set intensity (brightness) level
  MAX7219_send(REG_INTENSITY, 0x0F); // Max intensity
     140:	6f e0       	ldi	r22, 0x0F	; 15
     142:	8a e0       	ldi	r24, 0x0A	; 10
     144:	0e 94 6f 00 	call	0xde	; 0xde <_Z12MAX7219_sendhh>

  // Set scan limit: use all digits (rows)
  MAX7219_send(REG_SCAN_LIMIT, 0x07); // For an 8x8 matrix
     148:	67 e0       	ldi	r22, 0x07	; 7
     14a:	8b e0       	ldi	r24, 0x0B	; 11
     14c:	0e 94 6f 00 	call	0xde	; 0xde <_Z12MAX7219_sendhh>

  // Enable display
  MAX7219_send(REG_SHUTDOWN, 0x01); // Normal operation mode
     150:	61 e0       	ldi	r22, 0x01	; 1
     152:	8c e0       	ldi	r24, 0x0C	; 12
     154:	0e 94 6f 00 	call	0xde	; 0xde <_Z12MAX7219_sendhh>
     158:	08 95       	ret

0000015a <_Z9init_pinsv>:

// Function to initialize GPIO pins
void init_pins()
{
  // Set LED matrix row pins as output
  ROW_DDR = 0xFF;
     15a:	8f ef       	ldi	r24, 0xFF	; 255
     15c:	81 bb       	out	0x11, r24	; 17
  // Set LED matrix column pins as output
  COL_DDR = 0xFF;
     15e:	87 bb       	out	0x17, r24	; 23
  // Enable internal pull-up resistors for button pins
  DDRA = 0b11110100;
     160:	84 ef       	ldi	r24, 0xF4	; 244
     162:	8a bb       	out	0x1a, r24	; 26
  DDRD = 0b11111100;
     164:	8c ef       	ldi	r24, 0xFC	; 252
     166:	81 bb       	out	0x11, r24	; 17
     168:	08 95       	ret

0000016a <_Z14update_bulletsv>:
bool prev_left_shoot = false, prev_right_shoot = false;
bool left_shoot, right_shoot;

// Update bullet positions

void update_bullets(){
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29

	// Read button inputs
	left_shoot = PIND & (1 << LEFT_SHOOT_PIN);
     16e:	80 b3       	in	r24, 0x10	; 16
     170:	91 e0       	ldi	r25, 0x01	; 1
     172:	38 2f       	mov	r19, r24
     174:	31 70       	andi	r19, 0x01	; 1
     176:	80 ff       	sbrs	r24, 0
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	90 93 e4 03 	sts	0x03E4, r25	; 0x8003e4 <left_shoot>
	right_shoot = PIND & (1 << RIGHT_SHOOT_PIN);
     17e:	20 b3       	in	r18, 0x10	; 16
     180:	81 e0       	ldi	r24, 0x01	; 1
     182:	62 2f       	mov	r22, r18
     184:	62 70       	andi	r22, 0x02	; 2
     186:	21 ff       	sbrs	r18, 1
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <right_shoot>

    // Fire bullets when buttons are pressed
    if (!(prev_left_shoot) && left_shoot) {
     18e:	20 91 e6 03 	lds	r18, 0x03E6	; 0x8003e6 <prev_left_shoot>
     192:	21 11       	cpse	r18, r1
     194:	49 c0       	rjmp	.+146    	; 0x228 <_Z14update_bulletsv+0xbe>
     196:	33 23       	and	r19, r19
     198:	09 f4       	brne	.+2      	; 0x19c <_Z14update_bulletsv+0x32>
     19a:	46 c0       	rjmp	.+140    	; 0x228 <_Z14update_bulletsv+0xbe>
         // Find an inactive bullet slot
        for (int i = 0; i < MAX_BULLETS; i++) {
            if (!bullets[i].active) {
     19c:	20 91 eb 03 	lds	r18, 0x03EB	; 0x8003eb <bullets+0x4>
     1a0:	30 91 ec 03 	lds	r19, 0x03EC	; 0x8003ec <bullets+0x5>
     1a4:	23 2b       	or	r18, r19
     1a6:	49 f0       	breq	.+18     	; 0x1ba <_Z14update_bulletsv+0x50>
     1a8:	e7 ee       	ldi	r30, 0xE7	; 231
     1aa:	f3 e0       	ldi	r31, 0x03	; 3
	right_shoot = PIND & (1 << RIGHT_SHOOT_PIN);

    // Fire bullets when buttons are pressed
    if (!(prev_left_shoot) && left_shoot) {
         // Find an inactive bullet slot
        for (int i = 0; i < MAX_BULLETS; i++) {
     1ac:	21 e0       	ldi	r18, 0x01	; 1
     1ae:	30 e0       	ldi	r19, 0x00	; 0
            if (!bullets[i].active) {
     1b0:	42 85       	ldd	r20, Z+10	; 0x0a
     1b2:	53 85       	ldd	r21, Z+11	; 0x0b
     1b4:	45 2b       	or	r20, r21
     1b6:	91 f5       	brne	.+100    	; 0x21c <_Z14update_bulletsv+0xb2>
     1b8:	02 c0       	rjmp	.+4      	; 0x1be <_Z14update_bulletsv+0x54>
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	30 e0       	ldi	r19, 0x00	; 0
                // Activate the bullet
                bullets[i].row = 15; 
     1be:	f9 01       	movw	r30, r18
     1c0:	ee 0f       	add	r30, r30
     1c2:	ff 1f       	adc	r31, r31
     1c4:	e2 0f       	add	r30, r18
     1c6:	f3 1f       	adc	r31, r19
     1c8:	ee 0f       	add	r30, r30
     1ca:	ff 1f       	adc	r31, r31
     1cc:	e9 51       	subi	r30, 0x19	; 25
     1ce:	fc 4f       	sbci	r31, 0xFC	; 252
     1d0:	4f e0       	ldi	r20, 0x0F	; 15
     1d2:	50 e0       	ldi	r21, 0x00	; 0
     1d4:	51 83       	std	Z+1, r21	; 0x01
     1d6:	40 83       	st	Z, r20
    size = 5;
    row = wall.down;
    init();
  }

  int left() { return position - size / 2; }
     1d8:	af e0       	ldi	r26, 0x0F	; 15
     1da:	b4 e0       	ldi	r27, 0x04	; 4
         // Find an inactive bullet slot
        for (int i = 0; i < MAX_BULLETS; i++) {
            if (!bullets[i].active) {
                // Activate the bullet
                bullets[i].row = 15; 
                bullets[i].col = paddle.left(); 
     1dc:	12 96       	adiw	r26, 0x02	; 2
     1de:	4d 91       	ld	r20, X+
     1e0:	5c 91       	ld	r21, X
     1e2:	13 97       	sbiw	r26, 0x03	; 3
     1e4:	55 23       	and	r21, r21
     1e6:	14 f4       	brge	.+4      	; 0x1ec <_Z14update_bulletsv+0x82>
     1e8:	4f 5f       	subi	r20, 0xFF	; 255
     1ea:	5f 4f       	sbci	r21, 0xFF	; 255
     1ec:	55 95       	asr	r21
     1ee:	47 95       	ror	r20
     1f0:	0d 90       	ld	r0, X+
     1f2:	bc 91       	ld	r27, X
     1f4:	a0 2d       	mov	r26, r0
     1f6:	ed 01       	movw	r28, r26
     1f8:	c4 1b       	sub	r28, r20
     1fa:	d5 0b       	sbc	r29, r21
     1fc:	d3 83       	std	Z+3, r29	; 0x03
     1fe:	c2 83       	std	Z+2, r28	; 0x02
                bullets[i].active = 1;
     200:	f9 01       	movw	r30, r18
     202:	ee 0f       	add	r30, r30
     204:	ff 1f       	adc	r31, r31
     206:	e2 0f       	add	r30, r18
     208:	f3 1f       	adc	r31, r19
     20a:	ee 0f       	add	r30, r30
     20c:	ff 1f       	adc	r31, r31
     20e:	e9 51       	subi	r30, 0x19	; 25
     210:	fc 4f       	sbci	r31, 0xFC	; 252
     212:	21 e0       	ldi	r18, 0x01	; 1
     214:	30 e0       	ldi	r19, 0x00	; 0
     216:	35 83       	std	Z+5, r19	; 0x05
     218:	24 83       	std	Z+4, r18	; 0x04
                break;
     21a:	06 c0       	rjmp	.+12     	; 0x228 <_Z14update_bulletsv+0xbe>
	right_shoot = PIND & (1 << RIGHT_SHOOT_PIN);

    // Fire bullets when buttons are pressed
    if (!(prev_left_shoot) && left_shoot) {
         // Find an inactive bullet slot
        for (int i = 0; i < MAX_BULLETS; i++) {
     21c:	2f 5f       	subi	r18, 0xFF	; 255
     21e:	3f 4f       	sbci	r19, 0xFF	; 255
     220:	36 96       	adiw	r30, 0x06	; 6
     222:	25 30       	cpi	r18, 0x05	; 5
     224:	31 05       	cpc	r19, r1
     226:	21 f6       	brne	.-120    	; 0x1b0 <_Z14update_bulletsv+0x46>
                break;
            }
        }
    }

    if (!(prev_right_shoot) && right_shoot) {
     228:	20 91 e5 03 	lds	r18, 0x03E5	; 0x8003e5 <prev_right_shoot>
     22c:	21 11       	cpse	r18, r1
     22e:	47 c0       	rjmp	.+142    	; 0x2be <_Z14update_bulletsv+0x154>
     230:	66 23       	and	r22, r22
     232:	09 f4       	brne	.+2      	; 0x236 <_Z14update_bulletsv+0xcc>
     234:	44 c0       	rjmp	.+136    	; 0x2be <_Z14update_bulletsv+0x154>
        for (int i = 0; i < MAX_BULLETS; i++) {
            if (!bullets[i].active) {
     236:	20 91 eb 03 	lds	r18, 0x03EB	; 0x8003eb <bullets+0x4>
     23a:	30 91 ec 03 	lds	r19, 0x03EC	; 0x8003ec <bullets+0x5>
     23e:	23 2b       	or	r18, r19
     240:	49 f0       	breq	.+18     	; 0x254 <_Z14update_bulletsv+0xea>
     242:	e7 ee       	ldi	r30, 0xE7	; 231
     244:	f3 e0       	ldi	r31, 0x03	; 3
            }
        }
    }

    if (!(prev_right_shoot) && right_shoot) {
        for (int i = 0; i < MAX_BULLETS; i++) {
     246:	21 e0       	ldi	r18, 0x01	; 1
     248:	30 e0       	ldi	r19, 0x00	; 0
            if (!bullets[i].active) {
     24a:	42 85       	ldd	r20, Z+10	; 0x0a
     24c:	53 85       	ldd	r21, Z+11	; 0x0b
     24e:	45 2b       	or	r20, r21
     250:	81 f5       	brne	.+96     	; 0x2b2 <_Z14update_bulletsv+0x148>
     252:	02 c0       	rjmp	.+4      	; 0x258 <_Z14update_bulletsv+0xee>
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	30 e0       	ldi	r19, 0x00	; 0
                // Activate the bullet
                bullets[i].row = 15;
     258:	f9 01       	movw	r30, r18
     25a:	ee 0f       	add	r30, r30
     25c:	ff 1f       	adc	r31, r31
     25e:	e2 0f       	add	r30, r18
     260:	f3 1f       	adc	r31, r19
     262:	ee 0f       	add	r30, r30
     264:	ff 1f       	adc	r31, r31
     266:	e9 51       	subi	r30, 0x19	; 25
     268:	fc 4f       	sbci	r31, 0xFC	; 252
     26a:	4f e0       	ldi	r20, 0x0F	; 15
     26c:	50 e0       	ldi	r21, 0x00	; 0
     26e:	51 83       	std	Z+1, r21	; 0x01
     270:	40 83       	st	Z, r20
                bullets[i].col = paddle.right();
     272:	40 91 11 04 	lds	r20, 0x0411	; 0x800411 <paddle+0x2>
     276:	50 91 12 04 	lds	r21, 0x0412	; 0x800412 <paddle+0x3>
     27a:	55 23       	and	r21, r21
     27c:	14 f4       	brge	.+4      	; 0x282 <_Z14update_bulletsv+0x118>
     27e:	4f 5f       	subi	r20, 0xFF	; 255
     280:	5f 4f       	sbci	r21, 0xFF	; 255
     282:	55 95       	asr	r21
     284:	47 95       	ror	r20
     286:	60 91 0f 04 	lds	r22, 0x040F	; 0x80040f <paddle>
     28a:	70 91 10 04 	lds	r23, 0x0410	; 0x800410 <paddle+0x1>
     28e:	46 0f       	add	r20, r22
     290:	57 1f       	adc	r21, r23
     292:	53 83       	std	Z+3, r21	; 0x03
     294:	42 83       	std	Z+2, r20	; 0x02
                bullets[i].active = 1;
     296:	f9 01       	movw	r30, r18
     298:	ee 0f       	add	r30, r30
     29a:	ff 1f       	adc	r31, r31
     29c:	e2 0f       	add	r30, r18
     29e:	f3 1f       	adc	r31, r19
     2a0:	ee 0f       	add	r30, r30
     2a2:	ff 1f       	adc	r31, r31
     2a4:	e9 51       	subi	r30, 0x19	; 25
     2a6:	fc 4f       	sbci	r31, 0xFC	; 252
     2a8:	21 e0       	ldi	r18, 0x01	; 1
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	35 83       	std	Z+5, r19	; 0x05
     2ae:	24 83       	std	Z+4, r18	; 0x04
                break;
     2b0:	06 c0       	rjmp	.+12     	; 0x2be <_Z14update_bulletsv+0x154>
            }
        }
    }

    if (!(prev_right_shoot) && right_shoot) {
        for (int i = 0; i < MAX_BULLETS; i++) {
     2b2:	2f 5f       	subi	r18, 0xFF	; 255
     2b4:	3f 4f       	sbci	r19, 0xFF	; 255
     2b6:	36 96       	adiw	r30, 0x06	; 6
     2b8:	25 30       	cpi	r18, 0x05	; 5
     2ba:	31 05       	cpc	r19, r1
     2bc:	31 f6       	brne	.-116    	; 0x24a <_Z14update_bulletsv+0xe0>
                bullets[i].active = 1;
                break;
            }
        }
    }
	prev_left_shoot = left_shoot;
     2be:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <prev_left_shoot>
	prev_right_shoot = right_shoot;
     2c2:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <prev_right_shoot>
     2c6:	40 91 1d 05 	lds	r20, 0x051D	; 0x80051d <brick_count>
     2ca:	50 91 1e 05 	lds	r21, 0x051E	; 0x80051e <brick_count+0x1>
     2ce:	e7 ee       	ldi	r30, 0xE7	; 231
     2d0:	f3 e0       	ldi	r31, 0x03	; 3
     2d2:	25 e0       	ldi	r18, 0x05	; 5
     2d4:	34 e0       	ldi	r19, 0x04	; 4

	// Update bullet positions
	for (int i = 0; i < MAX_BULLETS; i++) {
      if (bullets[i].active) {
     2d6:	84 81       	ldd	r24, Z+4	; 0x04
     2d8:	95 81       	ldd	r25, Z+5	; 0x05
     2da:	89 2b       	or	r24, r25
     2dc:	51 f1       	breq	.+84     	; 0x332 <_Z14update_bulletsv+0x1c8>

          // Move the bullet upwards
          bullets[i].row--;
     2de:	80 81       	ld	r24, Z
     2e0:	91 81       	ldd	r25, Z+1	; 0x01
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	91 83       	std	Z+1, r25	; 0x01
     2e6:	80 83       	st	Z, r24

          // Check if bullet reached the top or hit a brick
          if (bullets[i].row < 0) {
     2e8:	99 23       	and	r25, r25
     2ea:	1c f4       	brge	.+6      	; 0x2f2 <_Z14update_bulletsv+0x188>
              bullets[i].active = 0;
     2ec:	15 82       	std	Z+5, r1	; 0x05
     2ee:	14 82       	std	Z+4, r1	; 0x04
				      continue;
     2f0:	20 c0       	rjmp	.+64     	; 0x332 <_Z14update_bulletsv+0x1c8>
          } 
			    else if (bricks[bullets[i].row][bullets[i].col]) {
     2f2:	62 81       	ldd	r22, Z+2	; 0x02
     2f4:	73 81       	ldd	r23, Z+3	; 0x03
     2f6:	dc 01       	movw	r26, r24
     2f8:	a2 95       	swap	r26
     2fa:	b2 95       	swap	r27
     2fc:	b0 7f       	andi	r27, 0xF0	; 240
     2fe:	ba 27       	eor	r27, r26
     300:	a0 7f       	andi	r26, 0xF0	; 240
     302:	ba 27       	eor	r27, r26
     304:	a3 5e       	subi	r26, 0xE3	; 227
     306:	bb 4f       	sbci	r27, 0xFB	; 251
     308:	a6 0f       	add	r26, r22
     30a:	b7 1f       	adc	r27, r23
     30c:	ac 91       	ld	r26, X
     30e:	aa 23       	and	r26, r26
     310:	81 f0       	breq	.+32     	; 0x332 <_Z14update_bulletsv+0x1c8>
				      bricks[bullets[i].row][bullets[i].col] = 0;
     312:	82 95       	swap	r24
     314:	92 95       	swap	r25
     316:	90 7f       	andi	r25, 0xF0	; 240
     318:	98 27       	eor	r25, r24
     31a:	80 7f       	andi	r24, 0xF0	; 240
     31c:	98 27       	eor	r25, r24
     31e:	83 5e       	subi	r24, 0xE3	; 227
     320:	9b 4f       	sbci	r25, 0xFB	; 251
     322:	dc 01       	movw	r26, r24
     324:	a6 0f       	add	r26, r22
     326:	b7 1f       	adc	r27, r23
     328:	1c 92       	st	X, r1
              --brick_count;
     32a:	41 50       	subi	r20, 0x01	; 1
     32c:	51 09       	sbc	r21, r1
				      bullets[i].active = 0;
     32e:	15 82       	std	Z+5, r1	; 0x05
     330:	14 82       	std	Z+4, r1	; 0x04
     332:	36 96       	adiw	r30, 0x06	; 6
    }
	prev_left_shoot = left_shoot;
	prev_right_shoot = right_shoot;

	// Update bullet positions
	for (int i = 0; i < MAX_BULLETS; i++) {
     334:	e2 17       	cp	r30, r18
     336:	f3 07       	cpc	r31, r19
     338:	71 f6       	brne	.-100    	; 0x2d6 <_Z14update_bulletsv+0x16c>
     33a:	50 93 1e 05 	sts	0x051E, r21	; 0x80051e <brick_count+0x1>
     33e:	40 93 1d 05 	sts	0x051D, r20	; 0x80051d <brick_count>
              --brick_count;
				      bullets[i].active = 0;
			    }
      }
  }
}
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <_Z12show_messagePA16_bb>:
    // if staticState is true, display will not reset
  }
} display;

void show_message(bool (*ara)[dimension], bool wait_for_button = true)
{
     348:	5f 92       	push	r5
     34a:	6f 92       	push	r6
     34c:	7f 92       	push	r7
     34e:	8f 92       	push	r8
     350:	9f 92       	push	r9
     352:	af 92       	push	r10
     354:	bf 92       	push	r11
     356:	cf 92       	push	r12
     358:	df 92       	push	r13
     35a:	ef 92       	push	r14
     35c:	ff 92       	push	r15
     35e:	0f 93       	push	r16
     360:	1f 93       	push	r17
     362:	cf 93       	push	r28
     364:	df 93       	push	r29
     366:	56 2e       	mov	r5, r22
      for (int j = 0; j < cols; ++j)
        ara[i][j] = 0;
  }
  void setArray(bool (*ara1)[dimension])
  {
    for (int i = 0; i < rows; ++i)
     368:	00 91 6a 02 	lds	r16, 0x026A	; 0x80026a <__data_end>
     36c:	10 91 6b 02 	lds	r17, 0x026B	; 0x80026b <__data_end+0x1>
     370:	10 16       	cp	r1, r16
     372:	11 06       	cpc	r1, r17
     374:	74 f4       	brge	.+28     	; 0x392 <_Z12show_messagePA16_bb+0x4a>
      for (int j = 0; j < cols; ++j)
     376:	e0 90 6c 02 	lds	r14, 0x026C	; 0x80026c <__data_end+0x2>
     37a:	f0 90 6d 02 	lds	r15, 0x026D	; 0x80026d <__data_end+0x3>
     37e:	48 2f       	mov	r20, r24
     380:	59 2f       	mov	r21, r25
     382:	c2 e7       	ldi	r28, 0x72	; 114
     384:	d2 e0       	ldi	r29, 0x02	; 2
     386:	60 e0       	ldi	r22, 0x00	; 0
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	1e 14       	cp	r1, r14
     38c:	1f 04       	cpc	r1, r15
     38e:	4c f0       	brlt	.+18     	; 0x3a2 <_Z12show_messagePA16_bb+0x5a>
     390:	12 c0       	rjmp	.+36     	; 0x3b6 <_Z12show_messagePA16_bb+0x6e>
	}

  void split()
  {
    // putting first 8*8 portion of display into split1
    for (int i = 0; i < splitrows; i++)
     392:	60 90 6e 02 	lds	r6, 0x026E	; 0x80026e <__data_end+0x4>
     396:	70 90 6f 02 	lds	r7, 0x026F	; 0x80026f <__data_end+0x5>
     39a:	16 14       	cp	r1, r6
     39c:	17 04       	cpc	r1, r7
     39e:	a4 f0       	brlt	.+40     	; 0x3c8 <_Z12show_messagePA16_bb+0x80>
     3a0:	79 c0       	rjmp	.+242    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     3a2:	97 01       	movw	r18, r14
     3a4:	24 0f       	add	r18, r20
     3a6:	35 1f       	adc	r19, r21
        ara[i][j] = 0;
  }
  void setArray(bool (*ara1)[dimension])
  {
    for (int i = 0; i < rows; ++i)
      for (int j = 0; j < cols; ++j)
     3a8:	de 01       	movw	r26, r28
     3aa:	fa 01       	movw	r30, r20
        ara[i][j] = ara1[i][j];
     3ac:	81 91       	ld	r24, Z+
     3ae:	8d 93       	st	X+, r24
        ara[i][j] = 0;
  }
  void setArray(bool (*ara1)[dimension])
  {
    for (int i = 0; i < rows; ++i)
      for (int j = 0; j < cols; ++j)
     3b0:	e2 17       	cp	r30, r18
     3b2:	f3 07       	cpc	r31, r19
     3b4:	d9 f7       	brne	.-10     	; 0x3ac <_Z12show_messagePA16_bb+0x64>
      for (int j = 0; j < cols; ++j)
        ara[i][j] = 0;
  }
  void setArray(bool (*ara1)[dimension])
  {
    for (int i = 0; i < rows; ++i)
     3b6:	6f 5f       	subi	r22, 0xFF	; 255
     3b8:	7f 4f       	sbci	r23, 0xFF	; 255
     3ba:	40 5f       	subi	r20, 0xF0	; 240
     3bc:	5f 4f       	sbci	r21, 0xFF	; 255
     3be:	61 96       	adiw	r28, 0x11	; 17
     3c0:	60 17       	cp	r22, r16
     3c2:	71 07       	cpc	r23, r17
     3c4:	11 f7       	brne	.-60     	; 0x38a <_Z12show_messagePA16_bb+0x42>
     3c6:	e5 cf       	rjmp	.-54     	; 0x392 <_Z12show_messagePA16_bb+0x4a>
  {
    // putting first 8*8 portion of display into split1
    for (int i = 0; i < splitrows; i++)
    {
      split1[i] = 0;
      for (int j = 0; j < splitcols; j++)
     3c8:	c0 91 70 02 	lds	r28, 0x0270	; 0x800270 <__data_end+0x6>
     3cc:	d0 91 71 02 	lds	r29, 0x0271	; 0x800271 <__data_end+0x7>
     3d0:	a3 e9       	ldi	r26, 0x93	; 147
     3d2:	b3 e0       	ldi	r27, 0x03	; 3
     3d4:	62 e7       	ldi	r22, 0x72	; 114
     3d6:	72 e0       	ldi	r23, 0x02	; 2
     3d8:	43 01       	movw	r8, r6
     3da:	88 0c       	add	r8, r8
     3dc:	99 1c       	adc	r9, r9
     3de:	c4 01       	movw	r24, r8
     3e0:	8d 56       	subi	r24, 0x6D	; 109
     3e2:	9c 4f       	sbci	r25, 0xFC	; 252
     3e4:	6c 01       	movw	r12, r24
     3e6:	7d 01       	movw	r14, r26
  void split()
  {
    // putting first 8*8 portion of display into split1
    for (int i = 0; i < splitrows; i++)
    {
      split1[i] = 0;
     3e8:	11 96       	adiw	r26, 0x01	; 1
     3ea:	1c 92       	st	X, r1
     3ec:	1e 92       	st	-X, r1
      for (int j = 0; j < splitcols; j++)
     3ee:	1c 16       	cp	r1, r28
     3f0:	1d 06       	cpc	r1, r29
     3f2:	b4 f4       	brge	.+44     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
     3f4:	9e 01       	movw	r18, r28
     3f6:	21 50       	subi	r18, 0x01	; 1
     3f8:	31 09       	sbc	r19, r1
     3fa:	fb 01       	movw	r30, r22
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	50 e0       	ldi	r21, 0x00	; 0
        split1[i] |= (ara[i][j] << (splitcols - 1 - j)); // Using bitmasking to transform columns into a single integer
     400:	81 91       	ld	r24, Z+
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	02 2e       	mov	r0, r18
     406:	02 c0       	rjmp	.+4      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     408:	88 0f       	add	r24, r24
     40a:	99 1f       	adc	r25, r25
     40c:	0a 94       	dec	r0
     40e:	e2 f7       	brpl	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     410:	48 2b       	or	r20, r24
     412:	59 2b       	or	r21, r25
     414:	21 50       	subi	r18, 0x01	; 1
     416:	31 09       	sbc	r19, r1
     418:	98 f7       	brcc	.-26     	; 0x400 <__LOCK_REGION_LENGTH__>
     41a:	f7 01       	movw	r30, r14
     41c:	51 83       	std	Z+1, r21	; 0x01
     41e:	40 83       	st	Z, r20
     420:	12 96       	adiw	r26, 0x02	; 2
     422:	6f 5e       	subi	r22, 0xEF	; 239
     424:	7f 4f       	sbci	r23, 0xFF	; 255
	}

  void split()
  {
    // putting first 8*8 portion of display into split1
    for (int i = 0; i < splitrows; i++)
     426:	ac 15       	cp	r26, r12
     428:	bd 05       	cpc	r27, r13
     42a:	e9 f6       	brne	.-70     	; 0x3e6 <_Z12show_messagePA16_bb+0x9e>
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
    {
      split2[i] = 0;
      for (int j = cols - splitcols; j < cols; j++)
     42c:	ea e6       	ldi	r30, 0x6A	; 106
     42e:	f2 e0       	ldi	r31, 0x02	; 2
     430:	c2 80       	ldd	r12, Z+2	; 0x02
     432:	d3 80       	ldd	r13, Z+3	; 0x03
     434:	a6 80       	ldd	r10, Z+6	; 0x06
     436:	b7 80       	ldd	r11, Z+7	; 0x07
     438:	76 01       	movw	r14, r12
     43a:	ea 18       	sub	r14, r10
     43c:	fb 08       	sbc	r15, r11
     43e:	a7 ea       	ldi	r26, 0xA7	; 167
     440:	b3 e0       	ldi	r27, 0x03	; 3
     442:	b7 01       	movw	r22, r14
     444:	6e 58       	subi	r22, 0x8E	; 142
     446:	7d 4f       	sbci	r23, 0xFD	; 253
     448:	c4 01       	movw	r24, r8
     44a:	89 55       	subi	r24, 0x59	; 89
     44c:	9c 4f       	sbci	r25, 0xFC	; 252
     44e:	4c 01       	movw	r8, r24
     450:	ed 01       	movw	r28, r26
        split1[i] |= (ara[i][j] << (splitcols - 1 - j)); // Using bitmasking to transform columns into a single integer
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
    {
      split2[i] = 0;
     452:	11 96       	adiw	r26, 0x01	; 1
     454:	1c 92       	st	X, r1
     456:	1e 92       	st	-X, r1
      for (int j = cols - splitcols; j < cols; j++)
     458:	ec 14       	cp	r14, r12
     45a:	fd 04       	cpc	r15, r13
     45c:	ac f4       	brge	.+42     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     45e:	95 01       	movw	r18, r10
     460:	21 50       	subi	r18, 0x01	; 1
     462:	31 09       	sbc	r19, r1
     464:	fb 01       	movw	r30, r22
     466:	40 e0       	ldi	r20, 0x00	; 0
     468:	50 e0       	ldi	r21, 0x00	; 0
        split2[i] |= (ara[i][j] << (cols - j - 1));
     46a:	81 91       	ld	r24, Z+
     46c:	90 e0       	ldi	r25, 0x00	; 0
     46e:	02 2e       	mov	r0, r18
     470:	02 c0       	rjmp	.+4      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     472:	88 0f       	add	r24, r24
     474:	99 1f       	adc	r25, r25
     476:	0a 94       	dec	r0
     478:	e2 f7       	brpl	.-8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
     47a:	48 2b       	or	r20, r24
     47c:	59 2b       	or	r21, r25
     47e:	21 50       	subi	r18, 0x01	; 1
     480:	31 09       	sbc	r19, r1
     482:	98 f7       	brcc	.-26     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     484:	59 83       	std	Y+1, r21	; 0x01
     486:	48 83       	st	Y, r20
     488:	12 96       	adiw	r26, 0x02	; 2
     48a:	6f 5e       	subi	r22, 0xEF	; 239
     48c:	7f 4f       	sbci	r23, 0xFF	; 255
      split1[i] = 0;
      for (int j = 0; j < splitcols; j++)
        split1[i] |= (ara[i][j] << (splitcols - 1 - j)); // Using bitmasking to transform columns into a single integer
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
     48e:	a8 15       	cp	r26, r8
     490:	b9 05       	cpc	r27, r9
     492:	f1 f6       	brne	.-68     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
      split2[i] = 0;
      for (int j = cols - splitcols; j < cols; j++)
        split2[i] |= (ara[i][j] << (cols - j - 1));
    }
    // split3
    for (int i = rows - splitrows; i < rows; i++)
     494:	c8 01       	movw	r24, r16
     496:	86 19       	sub	r24, r6
     498:	97 09       	sbc	r25, r7
     49a:	80 17       	cp	r24, r16
     49c:	91 07       	cpc	r25, r17
     49e:	0c f0       	brlt	.+2      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
     4a0:	76 c0       	rjmp	.+236    	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
    {
      split3[i - rows + splitrows] = 0;
      for (int j = 0; j < splitcols; j++)
     4a2:	e0 90 70 02 	lds	r14, 0x0270	; 0x800270 <__data_end+0x6>
     4a6:	f0 90 71 02 	lds	r15, 0x0271	; 0x800271 <__data_end+0x7>
     4aa:	dc 01       	movw	r26, r24
     4ac:	a0 1b       	sub	r26, r16
     4ae:	b1 0b       	sbc	r27, r17
     4b0:	a6 0d       	add	r26, r6
     4b2:	b7 1d       	adc	r27, r7
     4b4:	4d 01       	movw	r8, r26
     4b6:	88 0c       	add	r8, r8
     4b8:	99 1c       	adc	r9, r9
     4ba:	e4 01       	movw	r28, r8
     4bc:	c5 54       	subi	r28, 0x45	; 69
     4be:	dc 4f       	sbci	r29, 0xFC	; 252
     4c0:	21 e1       	ldi	r18, 0x11	; 17
     4c2:	28 9f       	mul	r18, r24
     4c4:	50 01       	movw	r10, r0
     4c6:	29 9f       	mul	r18, r25
     4c8:	b0 0c       	add	r11, r0
     4ca:	11 24       	eor	r1, r1
     4cc:	b5 01       	movw	r22, r10
     4ce:	6e 58       	subi	r22, 0x8E	; 142
     4d0:	7d 4f       	sbci	r23, 0xFD	; 253
     4d2:	66 0c       	add	r6, r6
     4d4:	77 1c       	adc	r7, r7
     4d6:	f3 01       	movw	r30, r6
     4d8:	e5 54       	subi	r30, 0x45	; 69
     4da:	fc 4f       	sbci	r31, 0xFC	; 252
     4dc:	6f 01       	movw	r12, r30
     4de:	de 01       	movw	r26, r28
        split2[i] |= (ara[i][j] << (cols - j - 1));
    }
    // split3
    for (int i = rows - splitrows; i < rows; i++)
    {
      split3[i - rows + splitrows] = 0;
     4e0:	19 82       	std	Y+1, r1	; 0x01
     4e2:	18 82       	st	Y, r1
      for (int j = 0; j < splitcols; j++)
     4e4:	1e 14       	cp	r1, r14
     4e6:	1f 04       	cpc	r1, r15
     4e8:	ac f4       	brge	.+42     	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     4ea:	97 01       	movw	r18, r14
     4ec:	21 50       	subi	r18, 0x01	; 1
     4ee:	31 09       	sbc	r19, r1
     4f0:	fb 01       	movw	r30, r22
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	50 e0       	ldi	r21, 0x00	; 0
        split3[i - rows + splitrows] |= (ara[i][j] << (splitcols - 1 - j));
     4f6:	81 91       	ld	r24, Z+
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	02 2e       	mov	r0, r18
     4fc:	02 c0       	rjmp	.+4      	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	0a 94       	dec	r0
     504:	e2 f7       	brpl	.-8      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     506:	48 2b       	or	r20, r24
     508:	59 2b       	or	r21, r25
     50a:	21 50       	subi	r18, 0x01	; 1
     50c:	31 09       	sbc	r19, r1
     50e:	98 f7       	brcc	.-26     	; 0x4f6 <__LOCK_REGION_LENGTH__+0xf6>
     510:	4d 93       	st	X+, r20
     512:	5c 93       	st	X, r21
     514:	22 96       	adiw	r28, 0x02	; 2
     516:	6f 5e       	subi	r22, 0xEF	; 239
     518:	7f 4f       	sbci	r23, 0xFF	; 255
      split2[i] = 0;
      for (int j = cols - splitcols; j < cols; j++)
        split2[i] |= (ara[i][j] << (cols - j - 1));
    }
    // split3
    for (int i = rows - splitrows; i < rows; i++)
     51a:	cc 15       	cp	r28, r12
     51c:	dd 05       	cpc	r29, r13
     51e:	f9 f6       	brne	.-66     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
    }
    // last portion to split4
    for (int i = rows - splitrows; i < rows; i++)
    {
      split4[i - rows + splitrows] = 0;
      for (int j = cols - splitcols; j < cols; j++)
     520:	ea e6       	ldi	r30, 0x6A	; 106
     522:	f2 e0       	ldi	r31, 0x02	; 2
     524:	e2 80       	ldd	r14, Z+2	; 0x02
     526:	f3 80       	ldd	r15, Z+3	; 0x03
     528:	c6 80       	ldd	r12, Z+6	; 0x06
     52a:	d7 80       	ldd	r13, Z+7	; 0x07
     52c:	87 01       	movw	r16, r14
     52e:	0c 19       	sub	r16, r12
     530:	1d 09       	sbc	r17, r13
     532:	d4 01       	movw	r26, r8
     534:	a1 53       	subi	r26, 0x31	; 49
     536:	bc 4f       	sbci	r27, 0xFC	; 252
     538:	b8 01       	movw	r22, r16
     53a:	6a 0d       	add	r22, r10
     53c:	7b 1d       	adc	r23, r11
     53e:	6e 58       	subi	r22, 0x8E	; 142
     540:	7d 4f       	sbci	r23, 0xFD	; 253
     542:	f3 01       	movw	r30, r6
     544:	e1 53       	subi	r30, 0x31	; 49
     546:	fc 4f       	sbci	r31, 0xFC	; 252
     548:	5f 01       	movw	r10, r30
     54a:	ed 01       	movw	r28, r26
        split3[i - rows + splitrows] |= (ara[i][j] << (splitcols - 1 - j));
    }
    // last portion to split4
    for (int i = rows - splitrows; i < rows; i++)
    {
      split4[i - rows + splitrows] = 0;
     54c:	11 96       	adiw	r26, 0x01	; 1
     54e:	1c 92       	st	X, r1
     550:	1e 92       	st	-X, r1
      for (int j = cols - splitcols; j < cols; j++)
     552:	0e 15       	cp	r16, r14
     554:	1f 05       	cpc	r17, r15
     556:	ac f4       	brge	.+42     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
     558:	96 01       	movw	r18, r12
     55a:	21 50       	subi	r18, 0x01	; 1
     55c:	31 09       	sbc	r19, r1
     55e:	fb 01       	movw	r30, r22
     560:	40 e0       	ldi	r20, 0x00	; 0
     562:	50 e0       	ldi	r21, 0x00	; 0
        split4[i - rows + splitrows] |= (ara[i][j] << (cols - j - 1));
     564:	81 91       	ld	r24, Z+
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	02 2e       	mov	r0, r18
     56a:	02 c0       	rjmp	.+4      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     56c:	88 0f       	add	r24, r24
     56e:	99 1f       	adc	r25, r25
     570:	0a 94       	dec	r0
     572:	e2 f7       	brpl	.-8      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
     574:	48 2b       	or	r20, r24
     576:	59 2b       	or	r21, r25
     578:	21 50       	subi	r18, 0x01	; 1
     57a:	31 09       	sbc	r19, r1
     57c:	98 f7       	brcc	.-26     	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
     57e:	59 83       	std	Y+1, r21	; 0x01
     580:	48 83       	st	Y, r20
     582:	12 96       	adiw	r26, 0x02	; 2
     584:	6f 5e       	subi	r22, 0xEF	; 239
     586:	7f 4f       	sbci	r23, 0xFF	; 255
      split3[i - rows + splitrows] = 0;
      for (int j = 0; j < splitcols; j++)
        split3[i - rows + splitrows] |= (ara[i][j] << (splitcols - 1 - j));
    }
    // last portion to split4
    for (int i = rows - splitrows; i < rows; i++)
     588:	aa 15       	cp	r26, r10
     58a:	bb 05       	cpc	r27, r11
     58c:	f1 f6       	brne	.-68     	; 0x54a <__LOCK_REGION_LENGTH__+0x14a>
     58e:	03 e9       	ldi	r16, 0x93	; 147
     590:	13 e0       	ldi	r17, 0x03	; 3
    {
      split4[i - rows + splitrows] = 0;
      for (int j = cols - splitcols; j < cols; j++)
     592:	c1 e0       	ldi	r28, 0x01	; 1
  void send_to_driver(bool staticState = false)
  {
    split();
    for (uint8_t i = 1; i <= 8; i++)
    {
      select_Load();
     594:	0e 94 98 00 	call	0x130	; 0x130 <_Z11select_Loadv>

      MAX7219_send2(i, split4[i - 1]);
     598:	f8 01       	movw	r30, r16
     59a:	64 ad       	ldd	r22, Z+60	; 0x3c
     59c:	8c 2f       	mov	r24, r28
     59e:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z13MAX7219_send2hh>
      MAX7219_send2(i, split3[i - 1]);
     5a2:	f8 01       	movw	r30, r16
     5a4:	60 a5       	ldd	r22, Z+40	; 0x28
     5a6:	8c 2f       	mov	r24, r28
     5a8:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z13MAX7219_send2hh>
      MAX7219_send2(i, split2[i - 1]);
     5ac:	f8 01       	movw	r30, r16
     5ae:	64 89       	ldd	r22, Z+20	; 0x14
     5b0:	8c 2f       	mov	r24, r28
     5b2:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z13MAX7219_send2hh>
      MAX7219_send2(i, split1[i - 1]);
     5b6:	f8 01       	movw	r30, r16
     5b8:	60 81       	ld	r22, Z
     5ba:	0e 5f       	subi	r16, 0xFE	; 254
     5bc:	1f 4f       	sbci	r17, 0xFF	; 255
     5be:	8c 2f       	mov	r24, r28
     5c0:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z13MAX7219_send2hh>

      deSelect_Load();
     5c4:	0e 94 9a 00 	call	0x134	; 0x134 <_Z13deSelect_Loadv>
  }

  void send_to_driver(bool staticState = false)
  {
    split();
    for (uint8_t i = 1; i <= 8; i++)
     5c8:	cf 5f       	subi	r28, 0xFF	; 255
     5ca:	c9 30       	cpi	r28, 0x09	; 9
     5cc:	19 f7       	brne	.-58     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>

void show_message(bool (*ara)[dimension], bool wait_for_button = true)
{
  display.setArray(ara);
  display.send_to_driver(true);
  if (wait_for_button)
     5ce:	55 20       	and	r5, r5
     5d0:	19 f0       	breq	.+6      	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
    while (!(PINA & (1 << START_BUTTON_PIN)))
     5d2:	cc 9b       	sbis	0x19, 4	; 25
     5d4:	fe cf       	rjmp	.-4      	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
     5d6:	3c c0       	rjmp	.+120    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     5d8:	ff e3       	ldi	r31, 0x3F	; 63
     5da:	2d e0       	ldi	r18, 0x0D	; 13
     5dc:	83 e0       	ldi	r24, 0x03	; 3
     5de:	f1 50       	subi	r31, 0x01	; 1
     5e0:	20 40       	sbci	r18, 0x00	; 0
     5e2:	80 40       	sbci	r24, 0x00	; 0
     5e4:	e1 f7       	brne	.-8      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
     5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     5e8:	00 00       	nop
     5ea:	32 c0       	rjmp	.+100    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>

  void turnoff()
  {
    // Turn off all LEDs
    for (uint8_t i = 1; i <= 8; i++)
      MAX7219_send(i, 0x00);
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	8c 2f       	mov	r24, r28
     5f0:	0e 94 6f 00 	call	0xde	; 0xde <_Z12MAX7219_sendhh>
  }

  void turnoff()
  {
    // Turn off all LEDs
    for (uint8_t i = 1; i <= 8; i++)
     5f4:	cf 5f       	subi	r28, 0xFF	; 255
     5f6:	c9 30       	cpi	r28, 0x09	; 9
     5f8:	c9 f7       	brne	.-14     	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
     5fa:	9f e9       	ldi	r25, 0x9F	; 159
     5fc:	e6 e8       	ldi	r30, 0x86	; 134
     5fe:	f1 e0       	ldi	r31, 0x01	; 1
     600:	91 50       	subi	r25, 0x01	; 1
     602:	e0 40       	sbci	r30, 0x00	; 0
     604:	f0 40       	sbci	r31, 0x00	; 0
     606:	e1 f7       	brne	.-8      	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     608:	00 c0       	rjmp	.+0      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
     60a:	00 00       	nop
  int split3[10];
  int split4[10]; // 10 for out_of_bound safety

  void resetArray()
  {
    for (int i = 0; i < rows; ++i)
     60c:	a0 91 6a 02 	lds	r26, 0x026A	; 0x80026a <__data_end>
     610:	b0 91 6b 02 	lds	r27, 0x026B	; 0x80026b <__data_end+0x1>
     614:	1a 16       	cp	r1, r26
     616:	1b 06       	cpc	r1, r27
     618:	ec f4       	brge	.+58     	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
      for (int j = 0; j < cols; ++j)
     61a:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <__data_end+0x2>
     61e:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <__data_end+0x3>
     622:	22 e7       	ldi	r18, 0x72	; 114
     624:	32 e0       	ldi	r19, 0x02	; 2
     626:	40 e0       	ldi	r20, 0x00	; 0
     628:	50 e0       	ldi	r21, 0x00	; 0
     62a:	16 16       	cp	r1, r22
     62c:	17 06       	cpc	r1, r23
     62e:	44 f4       	brge	.+16     	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
     630:	cb 01       	movw	r24, r22
     632:	82 0f       	add	r24, r18
     634:	93 1f       	adc	r25, r19
     636:	f9 01       	movw	r30, r18
        ara[i][j] = 0;
     638:	11 92       	st	Z+, r1
  int split4[10]; // 10 for out_of_bound safety

  void resetArray()
  {
    for (int i = 0; i < rows; ++i)
      for (int j = 0; j < cols; ++j)
     63a:	8e 17       	cp	r24, r30
     63c:	9f 07       	cpc	r25, r31
     63e:	e1 f7       	brne	.-8      	; 0x638 <__LOCK_REGION_LENGTH__+0x238>
  int split3[10];
  int split4[10]; // 10 for out_of_bound safety

  void resetArray()
  {
    for (int i = 0; i < rows; ++i)
     640:	4f 5f       	subi	r20, 0xFF	; 255
     642:	5f 4f       	sbci	r21, 0xFF	; 255
     644:	2f 5e       	subi	r18, 0xEF	; 239
     646:	3f 4f       	sbci	r19, 0xFF	; 255
     648:	4a 17       	cp	r20, r26
     64a:	5b 07       	cpc	r21, r27
     64c:	71 f7       	brne	.-36     	; 0x62a <__LOCK_REGION_LENGTH__+0x22a>
     64e:	02 c0       	rjmp	.+4      	; 0x654 <__LOCK_REGION_LENGTH__+0x254>
    }
    // last portion to split4
    for (int i = rows - splitrows; i < rows; i++)
    {
      split4[i - rows + splitrows] = 0;
      for (int j = cols - splitcols; j < cols; j++)
     650:	c1 e0       	ldi	r28, 0x01	; 1
     652:	cc cf       	rjmp	.-104    	; 0x5ec <__LOCK_REGION_LENGTH__+0x1ec>
  else
    _delay_ms(1000);
  display.turnoff();
  _delay_ms(500);
  display.resetArray();
}
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	df 90       	pop	r13
     662:	cf 90       	pop	r12
     664:	bf 90       	pop	r11
     666:	af 90       	pop	r10
     668:	9f 90       	pop	r9
     66a:	8f 90       	pop	r8
     66c:	7f 90       	pop	r7
     66e:	6f 90       	pop	r6
     670:	5f 90       	pop	r5
     672:	08 95       	ret

00000674 <_Z8level_upv>:

int speed = 8;
int bullet_speed = 3;
void level_up()
{
     674:	8f 92       	push	r8
     676:	9f 92       	push	r9
     678:	af 92       	push	r10
     67a:	bf 92       	push	r11
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
  level++;
     68a:	c0 91 1f 05 	lds	r28, 0x051F	; 0x80051f <level>
     68e:	d0 91 20 05 	lds	r29, 0x0520	; 0x800520 <level+0x1>
     692:	ce 01       	movw	r24, r28
     694:	01 96       	adiw	r24, 0x01	; 1
     696:	90 93 20 05 	sts	0x0520, r25	; 0x800520 <level+0x1>
     69a:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <level>
  if(speed >= 0)
     69e:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <speed>
     6a2:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <speed+0x1>
     6a6:	33 23       	and	r19, r19
     6a8:	0c f4       	brge	.+2      	; 0x6ac <_Z8level_upv+0x38>
     6aa:	2b c1       	rjmp	.+598    	; 0x902 <__stack+0xa3>
    speed -= 2;
     6ac:	22 50       	subi	r18, 0x02	; 2
     6ae:	31 09       	sbc	r19, r1
     6b0:	30 93 67 00 	sts	0x0067, r19	; 0x800067 <speed+0x1>
     6b4:	20 93 66 00 	sts	0x0066, r18	; 0x800066 <speed>
  brick_count = 0;
     6b8:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <brick_count+0x1>
     6bc:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <brick_count>
  if (level == 1)
     6c0:	81 30       	cpi	r24, 0x01	; 1
     6c2:	91 05       	cpc	r25, r1
     6c4:	c9 f5       	brne	.+114    	; 0x738 <_Z8level_upv+0xc4>
     6c6:	00 91 1d 05 	lds	r16, 0x051D	; 0x80051d <brick_count>
     6ca:	10 91 1e 05 	lds	r17, 0x051E	; 0x80051e <brick_count+0x1>
     6ce:	0f 2e       	mov	r0, r31
     6d0:	fd e1       	ldi	r31, 0x1D	; 29
     6d2:	8f 2e       	mov	r8, r31
     6d4:	f4 e0       	ldi	r31, 0x04	; 4
     6d6:	9f 2e       	mov	r9, r31
     6d8:	f0 2d       	mov	r31, r0
}

int speed = 8;
int bullet_speed = 3;
void level_up()
{
     6da:	a1 2c       	mov	r10, r1
     6dc:	b1 2c       	mov	r11, r1
  {
    // parallel line pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
      {
        if ((i + j) % 2 == 0 || (i + j) % 3 == 0)
     6de:	0f 2e       	mov	r0, r31
     6e0:	f3 e0       	ldi	r31, 0x03	; 3
     6e2:	ef 2e       	mov	r14, r31
     6e4:	f1 2c       	mov	r15, r1
     6e6:	f0 2d       	mov	r31, r0
          bricks[i][j] = 0;
        else
          bricks[i][j] = 1, brick_count++;
     6e8:	41 e0       	ldi	r20, 0x01	; 1
     6ea:	95 01       	movw	r18, r10
     6ec:	e5 01       	movw	r28, r10
     6ee:	60 96       	adiw	r28, 0x10	; 16
}

int speed = 8;
int bullet_speed = 3;
void level_up()
{
     6f0:	f4 01       	movw	r30, r8
  {
    // parallel line pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
      {
        if ((i + j) % 2 == 0 || (i + j) % 3 == 0)
     6f2:	82 2f       	mov	r24, r18
     6f4:	93 2f       	mov	r25, r19
     6f6:	20 ff       	sbrs	r18, 0
     6f8:	05 c0       	rjmp	.+10     	; 0x704 <_Z8level_upv+0x90>
     6fa:	b7 01       	movw	r22, r14
     6fc:	0e 94 00 0c 	call	0x1800	; 0x1800 <__divmodhi4>
     700:	89 2b       	or	r24, r25
     702:	11 f4       	brne	.+4      	; 0x708 <_Z8level_upv+0x94>
          bricks[i][j] = 0;
     704:	10 82       	st	Z, r1
     706:	03 c0       	rjmp	.+6      	; 0x70e <_Z8level_upv+0x9a>
        else
          bricks[i][j] = 1, brick_count++;
     708:	40 83       	st	Z, r20
     70a:	0f 5f       	subi	r16, 0xFF	; 255
     70c:	1f 4f       	sbci	r17, 0xFF	; 255
     70e:	2f 5f       	subi	r18, 0xFF	; 255
     710:	3f 4f       	sbci	r19, 0xFF	; 255
     712:	31 96       	adiw	r30, 0x01	; 1
  brick_count = 0;
  if (level == 1)
  {
    // parallel line pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
     714:	2c 17       	cp	r18, r28
     716:	3d 07       	cpc	r19, r29
     718:	61 f7       	brne	.-40     	; 0x6f2 <_Z8level_upv+0x7e>
    speed -= 2;
  brick_count = 0;
  if (level == 1)
  {
    // parallel line pattern
    for (int i = 0; i < dimension / 2; i++)
     71a:	2f ef       	ldi	r18, 0xFF	; 255
     71c:	a2 1a       	sub	r10, r18
     71e:	b2 0a       	sbc	r11, r18
     720:	80 e1       	ldi	r24, 0x10	; 16
     722:	88 0e       	add	r8, r24
     724:	91 1c       	adc	r9, r1
     726:	98 e0       	ldi	r25, 0x08	; 8
     728:	a9 16       	cp	r10, r25
     72a:	b1 04       	cpc	r11, r1
     72c:	f1 f6       	brne	.-68     	; 0x6ea <_Z8level_upv+0x76>
     72e:	10 93 1e 05 	sts	0x051E, r17	; 0x80051e <brick_count+0x1>
     732:	00 93 1d 05 	sts	0x051D, r16	; 0x80051d <brick_count>
     736:	ba c0       	rjmp	.+372    	; 0x8ac <__stack+0x4d>
          bricks[i][j] = 0;
        else
          bricks[i][j] = 1, brick_count++;
      }
  }
  else if (level == 2)
     738:	82 30       	cpi	r24, 0x02	; 2
     73a:	91 05       	cpc	r25, r1
     73c:	d9 f5       	brne	.+118    	; 0x7b4 <_Z8level_upv+0x140>
     73e:	40 91 1d 05 	lds	r20, 0x051D	; 0x80051d <brick_count>
     742:	50 91 1e 05 	lds	r21, 0x051E	; 0x80051e <brick_count+0x1>
     746:	0f 2e       	mov	r0, r31
     748:	fd e1       	ldi	r31, 0x1D	; 29
     74a:	ef 2e       	mov	r14, r31
     74c:	f4 e0       	ldi	r31, 0x04	; 4
     74e:	ff 2e       	mov	r15, r31
     750:	f0 2d       	mov	r31, r0
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
      for (int j = 0; j < dimension; j++)
      {
        if ((i >= j && i < (dimension - j)) || (i < j && i >= (dimension - j - 1)))
          bricks[i][j] = 0;
        else
          bricks[i][j] = 1, brick_count++;
     756:	a1 e0       	ldi	r26, 0x01	; 1
  {
    // pyramid pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
      {
        if ((i >= j && i < (dimension - j)) || (i < j && i >= (dimension - j - 1)))
     758:	0f e0       	ldi	r16, 0x0F	; 15
     75a:	10 e0       	ldi	r17, 0x00	; 0
     75c:	c0 e1       	ldi	r28, 0x10	; 16
     75e:	d0 e0       	ldi	r29, 0x00	; 0
          bricks[i][j] = 0;
        else
          bricks[i][j] = 1, brick_count++;
      }
  }
  else if (level == 2)
     760:	f7 01       	movw	r30, r14
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
  {
    // pyramid pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
      {
        if ((i >= j && i < (dimension - j)) || (i < j && i >= (dimension - j - 1)))
     766:	28 17       	cp	r18, r24
     768:	39 07       	cpc	r19, r25
     76a:	3c f0       	brlt	.+14     	; 0x77a <_Z8level_upv+0x106>
     76c:	be 01       	movw	r22, r28
     76e:	68 1b       	sub	r22, r24
     770:	79 0b       	sbc	r23, r25
     772:	26 17       	cp	r18, r22
     774:	37 07       	cpc	r19, r23
     776:	3c f0       	brlt	.+14     	; 0x786 <_Z8level_upv+0x112>
     778:	08 c0       	rjmp	.+16     	; 0x78a <_Z8level_upv+0x116>
     77a:	b8 01       	movw	r22, r16
     77c:	68 1b       	sub	r22, r24
     77e:	79 0b       	sbc	r23, r25
     780:	26 17       	cp	r18, r22
     782:	37 07       	cpc	r19, r23
     784:	14 f0       	brlt	.+4      	; 0x78a <_Z8level_upv+0x116>
          bricks[i][j] = 0;
     786:	10 82       	st	Z, r1
     788:	03 c0       	rjmp	.+6      	; 0x790 <_Z8level_upv+0x11c>
        else
          bricks[i][j] = 1, brick_count++;
     78a:	a0 83       	st	Z, r26
     78c:	4f 5f       	subi	r20, 0xFF	; 255
     78e:	5f 4f       	sbci	r21, 0xFF	; 255
  }
  else if (level == 2)
  {
    // pyramid pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
     790:	01 96       	adiw	r24, 0x01	; 1
     792:	31 96       	adiw	r30, 0x01	; 1
     794:	80 31       	cpi	r24, 0x10	; 16
     796:	91 05       	cpc	r25, r1
     798:	31 f7       	brne	.-52     	; 0x766 <_Z8level_upv+0xf2>
      }
  }
  else if (level == 2)
  {
    // pyramid pattern
    for (int i = 0; i < dimension / 2; i++)
     79a:	2f 5f       	subi	r18, 0xFF	; 255
     79c:	3f 4f       	sbci	r19, 0xFF	; 255
     79e:	80 e1       	ldi	r24, 0x10	; 16
     7a0:	e8 0e       	add	r14, r24
     7a2:	f1 1c       	adc	r15, r1
     7a4:	28 30       	cpi	r18, 0x08	; 8
     7a6:	31 05       	cpc	r19, r1
     7a8:	d9 f6       	brne	.-74     	; 0x760 <_Z8level_upv+0xec>
     7aa:	50 93 1e 05 	sts	0x051E, r21	; 0x80051e <brick_count+0x1>
     7ae:	40 93 1d 05 	sts	0x051D, r20	; 0x80051d <brick_count>
     7b2:	7c c0       	rjmp	.+248    	; 0x8ac <__stack+0x4d>
          bricks[i][j] = 0;
        else
          bricks[i][j] = 1, brick_count++;
      }
  }
  else if (level == 3)
     7b4:	03 97       	sbiw	r24, 0x03	; 3
     7b6:	21 f5       	brne	.+72     	; 0x800 <_Z8level_upv+0x18c>
     7b8:	40 91 1d 05 	lds	r20, 0x051D	; 0x80051d <brick_count>
     7bc:	50 91 1e 05 	lds	r21, 0x051E	; 0x80051e <brick_count+0x1>
     7c0:	cd e1       	ldi	r28, 0x1D	; 29
     7c2:	d4 e0       	ldi	r29, 0x04	; 4
     7c4:	a0 e0       	ldi	r26, 0x00	; 0
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
    // checkboard pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
      {
        if ((i + j) % 2 == 0)
          bricks[i][j] = 1, brick_count++;
     7c8:	61 e0       	ldi	r22, 0x01	; 1
     7ca:	cd 01       	movw	r24, r26
     7cc:	9d 01       	movw	r18, r26
     7ce:	20 5f       	subi	r18, 0xF0	; 240
     7d0:	3f 4f       	sbci	r19, 0xFF	; 255
          bricks[i][j] = 0;
        else
          bricks[i][j] = 1, brick_count++;
      }
  }
  else if (level == 3)
     7d2:	fe 01       	movw	r30, r28
  {
    // checkboard pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
      {
        if ((i + j) % 2 == 0)
     7d4:	80 fd       	sbrc	r24, 0
     7d6:	04 c0       	rjmp	.+8      	; 0x7e0 <_Z8level_upv+0x16c>
          bricks[i][j] = 1, brick_count++;
     7d8:	60 83       	st	Z, r22
     7da:	4f 5f       	subi	r20, 0xFF	; 255
     7dc:	5f 4f       	sbci	r21, 0xFF	; 255
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <_Z8level_upv+0x16e>
        else
          bricks[i][j] = 0;
     7e0:	10 82       	st	Z, r1
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	31 96       	adiw	r30, 0x01	; 1
  }
  else if (level == 3)
  {
    // checkboard pattern
    for (int i = 0; i < dimension / 2; i++)
      for (int j = 0; j < dimension; j++)
     7e6:	28 17       	cp	r18, r24
     7e8:	39 07       	cpc	r19, r25
     7ea:	a1 f7       	brne	.-24     	; 0x7d4 <_Z8level_upv+0x160>
      }
  }
  else if (level == 3)
  {
    // checkboard pattern
    for (int i = 0; i < dimension / 2; i++)
     7ec:	11 96       	adiw	r26, 0x01	; 1
     7ee:	60 96       	adiw	r28, 0x10	; 16
     7f0:	a8 30       	cpi	r26, 0x08	; 8
     7f2:	b1 05       	cpc	r27, r1
     7f4:	51 f7       	brne	.-44     	; 0x7ca <_Z8level_upv+0x156>
     7f6:	50 93 1e 05 	sts	0x051E, r21	; 0x80051e <brick_count+0x1>
     7fa:	40 93 1d 05 	sts	0x051D, r20	; 0x80051d <brick_count>
     7fe:	56 c0       	rjmp	.+172    	; 0x8ac <__stack+0x4d>
  else
  {
    // random pattern
    // Adjust the probability of brick generation based on the level
    // Start with 50% probability and increase by 10% for each level above 3
    double brick_probability = 0.5 + (level - 4) * 0.1;
     800:	be 01       	movw	r22, r28
     802:	63 50       	subi	r22, 0x03	; 3
     804:	71 09       	sbc	r23, r1
     806:	07 2e       	mov	r0, r23
     808:	00 0c       	add	r0, r0
     80a:	88 0b       	sbc	r24, r24
     80c:	99 0b       	sbc	r25, r25
     80e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__floatsisf>
     812:	2d ec       	ldi	r18, 0xCD	; 205
     814:	3c ec       	ldi	r19, 0xCC	; 204
     816:	4c ec       	ldi	r20, 0xCC	; 204
     818:	5d e3       	ldi	r21, 0x3D	; 61
     81a:	0e 94 6f 0b 	call	0x16de	; 0x16de <__mulsf3>
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	40 e0       	ldi	r20, 0x00	; 0
     824:	5f e3       	ldi	r21, 0x3F	; 63
     826:	0e 94 fe 09 	call	0x13fc	; 0x13fc <__addsf3>
     82a:	4b 01       	movw	r8, r22
     82c:	5c 01       	movw	r10, r24

    for (int i = 0; i < dimension / 2 + level - 3; i++)
     82e:	26 96       	adiw	r28, 0x06	; 6
     830:	1c 16       	cp	r1, r28
     832:	1d 06       	cpc	r1, r29
     834:	dc f5       	brge	.+118    	; 0x8ac <__stack+0x4d>
     836:	cd e1       	ldi	r28, 0x1D	; 29
     838:	d4 e0       	ldi	r29, 0x04	; 4
     83a:	e1 2c       	mov	r14, r1
     83c:	f1 2c       	mov	r15, r1
      for (int j = 0; j < dimension; j++)
      {
        if ((rand() / (double)RAND_MAX) <= brick_probability)
        {
          bricks[i][j] = 1;
     83e:	dd 24       	eor	r13, r13
     840:	d3 94       	inc	r13
     842:	8e 01       	movw	r16, r28
     844:	00 5f       	subi	r16, 0xF0	; 240
     846:	1f 4f       	sbci	r17, 0xFF	; 255
    double brick_probability = 0.5 + (level - 4) * 0.1;

    for (int i = 0; i < dimension / 2 + level - 3; i++)
      for (int j = 0; j < dimension; j++)
      {
        if ((rand() / (double)RAND_MAX) <= brick_probability)
     848:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rand>
     84c:	bc 01       	movw	r22, r24
     84e:	99 0f       	add	r25, r25
     850:	88 0b       	sbc	r24, r24
     852:	99 0b       	sbc	r25, r25
     854:	0e 94 de 0a 	call	0x15bc	; 0x15bc <__floatsisf>
     858:	20 e0       	ldi	r18, 0x00	; 0
     85a:	3e ef       	ldi	r19, 0xFE	; 254
     85c:	4f ef       	ldi	r20, 0xFF	; 255
     85e:	56 e4       	ldi	r21, 0x46	; 70
     860:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <__divsf3>
     864:	9b 01       	movw	r18, r22
     866:	ac 01       	movw	r20, r24
     868:	c5 01       	movw	r24, r10
     86a:	b4 01       	movw	r22, r8
     86c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__gesf2>
     870:	88 23       	and	r24, r24
     872:	5c f0       	brlt	.+22     	; 0x88a <__stack+0x2b>
        {
          bricks[i][j] = 1;
     874:	d8 82       	st	Y, r13
          brick_count++;
     876:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <brick_count>
     87a:	90 91 1e 05 	lds	r25, 0x051E	; 0x80051e <brick_count+0x1>
     87e:	01 96       	adiw	r24, 0x01	; 1
     880:	90 93 1e 05 	sts	0x051E, r25	; 0x80051e <brick_count+0x1>
     884:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <brick_count>
     888:	01 c0       	rjmp	.+2      	; 0x88c <__stack+0x2d>
        }
        else
          bricks[i][j] = 0;
     88a:	18 82       	st	Y, r1
     88c:	21 96       	adiw	r28, 0x01	; 1
    // Adjust the probability of brick generation based on the level
    // Start with 50% probability and increase by 10% for each level above 3
    double brick_probability = 0.5 + (level - 4) * 0.1;

    for (int i = 0; i < dimension / 2 + level - 3; i++)
      for (int j = 0; j < dimension; j++)
     88e:	0c 17       	cp	r16, r28
     890:	1d 07       	cpc	r17, r29
     892:	d1 f6       	brne	.-76     	; 0x848 <_Z8level_upv+0x1d4>
    // random pattern
    // Adjust the probability of brick generation based on the level
    // Start with 50% probability and increase by 10% for each level above 3
    double brick_probability = 0.5 + (level - 4) * 0.1;

    for (int i = 0; i < dimension / 2 + level - 3; i++)
     894:	9f ef       	ldi	r25, 0xFF	; 255
     896:	e9 1a       	sub	r14, r25
     898:	f9 0a       	sbc	r15, r25
     89a:	e8 01       	movw	r28, r16
     89c:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <level>
     8a0:	90 91 20 05 	lds	r25, 0x0520	; 0x800520 <level+0x1>
     8a4:	05 96       	adiw	r24, 0x05	; 5
     8a6:	e8 16       	cp	r14, r24
     8a8:	f9 06       	cpc	r15, r25
     8aa:	5c f2       	brlt	.-106    	; 0x842 <_Z8level_upv+0x1ce>
  int left = 0;
  int right = 15;
  int up = 0;
  int down = 15;

  int center_col() { return (left + right) / 2; } // returns the center column, useful for paddle initial position
     8ac:	e5 e1       	ldi	r30, 0x15	; 21
     8ae:	f4 e0       	ldi	r31, 0x04	; 4
     8b0:	20 81       	ld	r18, Z
     8b2:	31 81       	ldd	r19, Z+1	; 0x01
     8b4:	82 81       	ldd	r24, Z+2	; 0x02
     8b6:	93 81       	ldd	r25, Z+3	; 0x03
     8b8:	82 0f       	add	r24, r18
     8ba:	93 1f       	adc	r25, r19
     8bc:	99 23       	and	r25, r25
     8be:	0c f4       	brge	.+2      	; 0x8c2 <__stack+0x63>
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	95 95       	asr	r25
     8c4:	87 95       	ror	r24
{
  int position; // position of the center of the paddle
  int size;
  int row;

  void init() { position = wall.center_col(); }
     8c6:	90 93 10 04 	sts	0x0410, r25	; 0x800410 <paddle+0x1>
     8ca:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <paddle>
  int row, col;
  int row_dir, col_dir;

  void init() // sets the starting position of the ball
  {
    row = wall.down;
     8ce:	e7 e0       	ldi	r30, 0x07	; 7
     8d0:	f4 e0       	ldi	r31, 0x04	; 4
     8d2:	20 91 1b 04 	lds	r18, 0x041B	; 0x80041b <wall+0x6>
     8d6:	30 91 1c 04 	lds	r19, 0x041C	; 0x80041c <wall+0x7>
     8da:	31 83       	std	Z+1, r19	; 0x01
     8dc:	20 83       	st	Z, r18
    col = paddle.position;
     8de:	93 83       	std	Z+3, r25	; 0x03
     8e0:	82 83       	std	Z+2, r24	; 0x02
    row_dir = -1;
     8e2:	8f ef       	ldi	r24, 0xFF	; 255
     8e4:	9f ef       	ldi	r25, 0xFF	; 255
     8e6:	95 83       	std	Z+5, r25	; 0x05
     8e8:	84 83       	std	Z+4, r24	; 0x04
    col_dir = 0;
     8ea:	17 82       	std	Z+7, r1	; 0x07
     8ec:	16 82       	std	Z+6, r1	; 0x06
     8ee:	2f e9       	ldi	r18, 0x9F	; 159
     8f0:	86 e8       	ldi	r24, 0x86	; 134
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	21 50       	subi	r18, 0x01	; 1
     8f6:	80 40       	sbci	r24, 0x00	; 0
     8f8:	90 40       	sbci	r25, 0x00	; 0
     8fa:	e1 f7       	brne	.-8      	; 0x8f4 <__stack+0x95>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <__stack+0x9f>
     8fe:	00 00       	nop
  }

  paddle.init();
  ball.init();
  _delay_ms(500);
}
     900:	09 c0       	rjmp	.+18     	; 0x914 <__stack+0xb5>
void level_up()
{
  level++;
  if(speed >= 0)
    speed -= 2;
  brick_count = 0;
     902:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <brick_count+0x1>
     906:	10 92 1d 05 	sts	0x051D, r1	; 0x80051d <brick_count>
  if (level == 1)
     90a:	81 30       	cpi	r24, 0x01	; 1
     90c:	91 05       	cpc	r25, r1
     90e:	09 f0       	breq	.+2      	; 0x912 <__stack+0xb3>
     910:	13 cf       	rjmp	.-474    	; 0x738 <_Z8level_upv+0xc4>
     912:	d9 ce       	rjmp	.-590    	; 0x6c6 <_Z8level_upv+0x52>
  }

  paddle.init();
  ball.init();
  _delay_ms(500);
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	1f 91       	pop	r17
     91a:	0f 91       	pop	r16
     91c:	ff 90       	pop	r15
     91e:	ef 90       	pop	r14
     920:	df 90       	pop	r13
     922:	bf 90       	pop	r11
     924:	af 90       	pop	r10
     926:	9f 90       	pop	r9
     928:	8f 90       	pop	r8
     92a:	08 95       	ret

0000092c <_Z9game_initv>:

void game_init()
{
     92c:	cf 93       	push	r28
     92e:	df 93       	push	r29
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	da 95       	dec	r29
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
  level_up();
     940:	0e 94 3a 03 	call	0x674	; 0x674 <_Z8level_upv>
  
  // Initialize bullets
  for (int i = 0; i < MAX_BULLETS; i++) {
    bullets[i].active = 0; // Bullet is inactive initially
     944:	e7 ee       	ldi	r30, 0xE7	; 231
     946:	f3 e0       	ldi	r31, 0x03	; 3
     948:	15 82       	std	Z+5, r1	; 0x05
     94a:	14 82       	std	Z+4, r1	; 0x04
     94c:	13 86       	std	Z+11, r1	; 0x0b
     94e:	12 86       	std	Z+10, r1	; 0x0a
     950:	11 8a       	std	Z+17, r1	; 0x11
     952:	10 8a       	std	Z+16, r1	; 0x10
     954:	17 8a       	std	Z+23, r1	; 0x17
     956:	16 8a       	std	Z+22, r1	; 0x16
     958:	15 8e       	std	Z+29, r1	; 0x1d
     95a:	14 8e       	std	Z+28, r1	; 0x1c
      {1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0},
      {0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0},
      {0, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0},
      {0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 0}};
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	ea e6       	ldi	r30, 0x6A	; 106
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	de 01       	movw	r26, r28
     964:	11 96       	adiw	r26, 0x01	; 1
     966:	01 90       	ld	r0, Z+
     968:	0d 92       	st	X+, r0
     96a:	8a 95       	dec	r24
     96c:	e1 f7       	brne	.-8      	; 0x966 <_Z9game_initv+0x3a>
  show_message(get_set_go);
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	ce 01       	movw	r24, r28
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	0e 94 a4 01 	call	0x348	; 0x348 <_Z12show_messagePA16_bb>
  //     {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
  //     {0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0},
  //     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
  //   };
  // show_message(ara1, false);
}
     978:	d3 95       	inc	r29
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	08 95       	ret

0000098a <_Z9game_overv>:
void game_over()
{
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
     992:	da 95       	dec	r29
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	de bf       	out	0x3e, r29	; 62
     99a:	0f be       	out	0x3f, r0	; 63
     99c:	cd bf       	out	0x3d, r28	; 61
      {1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 0, 1},
      {1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1},
      {1, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0},
      {0, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1, 1, 0, 1, 0, 1},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
      {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	ea e6       	ldi	r30, 0x6A	; 106
     9a2:	f1 e0       	ldi	r31, 0x01	; 1
     9a4:	de 01       	movw	r26, r28
     9a6:	11 96       	adiw	r26, 0x01	; 1
     9a8:	01 90       	ld	r0, Z+
     9aa:	0d 92       	st	X+, r0
     9ac:	8a 95       	dec	r24
     9ae:	e1 f7       	brne	.-8      	; 0x9a8 <_Z9game_overv+0x1e>
  show_message(game_over_ara);
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	ce 01       	movw	r24, r28
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	0e 94 a4 01 	call	0x348	; 0x348 <_Z12show_messagePA16_bb>
  reset(); // start all over
     9ba:	0e 94 55 00 	call	0xaa	; 0xaa <_Z5resetv>

000009be <main>:
}

int main()
{
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	cd b7       	in	r28, 0x3d	; 61
     9c4:	de b7       	in	r29, 0x3e	; 62
     9c6:	2a 97       	sbiw	r28, 0x0a	; 10
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
  init_pins();
     9d2:	0e 94 ad 00 	call	0x15a	; 0x15a <_Z9init_pinsv>

  // LED DRIVER FROM HERE
  // Initialize SPI communication
  SPI_init();
     9d6:	0e 94 65 00 	call	0xca	; 0xca <_Z8SPI_initv>

  // Set LOAD_PIN as output
  DDRB |= (1 << LOAD_PIN);
     9da:	bc 9a       	sbi	0x17, 4	; 23
  // Set LOAD_PIN high (deselect MAX7219 modules)
  PORTB |= (1 << LOAD_PIN);
     9dc:	c4 9a       	sbi	0x18, 4	; 24

  // Initialize MAX7219 drivers
  initMAX7219();
     9de:	0e 94 9c 00 	call	0x138	; 0x138 <_Z11initMAX7219v>
  bool pause_button;
  bool paused;

  int ball_counter = 0; // for slowing down the ball movement

  game_init();
     9e2:	0e 94 96 04 	call	0x92c	; 0x92c <_Z9game_initv>
  bool left_button, right_button;
  bool prev_pause_button = false;
  bool pause_button;
  bool paused;

  int ball_counter = 0; // for slowing down the ball movement
     9e6:	1b 82       	std	Y+3, r1	; 0x03
     9e8:	1a 82       	std	Y+2, r1	; 0x02
  // LED DRIVER ENDS HERE

  // for working on raising edge of push button
  bool prev_left_button = false, prev_right_button = false;
  bool left_button, right_button;
  bool prev_pause_button = false;
     9ea:	90 e0       	ldi	r25, 0x00	; 0
  // Initialize MAX7219 drivers
  initMAX7219();
  // LED DRIVER ENDS HERE

  // for working on raising edge of push button
  bool prev_left_button = false, prev_right_button = false;
     9ec:	71 2c       	mov	r7, r1
     9ee:	61 2c       	mov	r6, r1
  while (1)
  {
    // Read button inputs
    left_button = PINA & (1 << LEFT_BUTTON_PIN);
    right_button = PINA & (1 << RIGHT_BUTTON_PIN);
    pause_button = PINA & (1 << START_BUTTON_PIN);
     9f0:	22 24       	eor	r2, r2
     9f2:	23 94       	inc	r2
     9f4:	31 2c       	mov	r3, r1
  }
  Display() { resetArray(); } // initializing with 0

  void bricks_in_display()
  {
    for (int i = 0; i < rows; ++i)
     9f6:	0f 2e       	mov	r0, r31
     9f8:	fa e6       	ldi	r31, 0x6A	; 106
     9fa:	4f 2e       	mov	r4, r31
     9fc:	f2 e0       	ldi	r31, 0x02	; 2
     9fe:	5f 2e       	mov	r5, r31
     a00:	f0 2d       	mov	r31, r0
     a02:	01 c0       	rjmp	.+2      	; 0xa06 <main+0x48>
     a04:	99 81       	ldd	r25, Y+1	; 0x01

  // Main game loop
  while (1)
  {
    // Read button inputs
    left_button = PINA & (1 << LEFT_BUTTON_PIN);
     a06:	39 b3       	in	r19, 0x19	; 25
    right_button = PINA & (1 << RIGHT_BUTTON_PIN);
     a08:	29 b3       	in	r18, 0x19	; 25
    pause_button = PINA & (1 << START_BUTTON_PIN);
     a0a:	89 b3       	in	r24, 0x19	; 25
     a0c:	29 82       	std	Y+1, r2	; 0x01
     a0e:	48 2f       	mov	r20, r24
     a10:	40 71       	andi	r20, 0x10	; 16
     a12:	84 ff       	sbrs	r24, 4
     a14:	39 82       	std	Y+1, r3	; 0x01

    // pause and resume
    if (!prev_pause_button && pause_button)
     a16:	91 11       	cpse	r25, r1
     a18:	05 c0       	rjmp	.+10     	; 0xa24 <main+0x66>
     a1a:	44 23       	and	r20, r20
     a1c:	19 f0       	breq	.+6      	; 0xa24 <main+0x66>
      paused = !paused;
     a1e:	4e 81       	ldd	r20, Y+6	; 0x06
     a20:	42 25       	eor	r20, r2
     a22:	4e 83       	std	Y+6, r20	; 0x06
    prev_pause_button = pause_button;
    if (paused)
     a24:	5e 81       	ldd	r21, Y+6	; 0x06
     a26:	55 23       	and	r21, r21
     a28:	09 f4       	brne	.+2      	; 0xa2c <main+0x6e>
     a2a:	40 c1       	rjmp	.+640    	; 0xcac <main+0x2ee>
	}

  void split()
  {
    // putting first 8*8 portion of display into split1
    for (int i = 0; i < splitrows; i++)
     a2c:	d2 01       	movw	r26, r4
     a2e:	14 96       	adiw	r26, 0x04	; 4
     a30:	8d 90       	ld	r8, X+
     a32:	9c 90       	ld	r9, X
     a34:	15 97       	sbiw	r26, 0x05	; 5
     a36:	18 14       	cp	r1, r8
     a38:	19 04       	cpc	r1, r9
     a3a:	0c f0       	brlt	.+2      	; 0xa3e <main+0x80>
     a3c:	70 c0       	rjmp	.+224    	; 0xb1e <main+0x160>
    {
      split1[i] = 0;
      for (int j = 0; j < splitcols; j++)
     a3e:	16 96       	adiw	r26, 0x06	; 6
     a40:	ed 91       	ld	r30, X+
     a42:	fc 91       	ld	r31, X
     a44:	17 97       	sbiw	r26, 0x07	; 7
     a46:	a3 e9       	ldi	r26, 0x93	; 147
     a48:	b3 e0       	ldi	r27, 0x03	; 3
     a4a:	62 e7       	ldi	r22, 0x72	; 114
     a4c:	72 e0       	ldi	r23, 0x02	; 2
     a4e:	54 01       	movw	r10, r8
     a50:	aa 0c       	add	r10, r10
     a52:	bb 1c       	adc	r11, r11
     a54:	95 01       	movw	r18, r10
     a56:	2d 56       	subi	r18, 0x6D	; 109
     a58:	3c 4f       	sbci	r19, 0xFC	; 252
     a5a:	79 01       	movw	r14, r18
     a5c:	fd 83       	std	Y+5, r31	; 0x05
     a5e:	ec 83       	std	Y+4, r30	; 0x04
     a60:	8d 01       	movw	r16, r26
  void split()
  {
    // putting first 8*8 portion of display into split1
    for (int i = 0; i < splitrows; i++)
    {
      split1[i] = 0;
     a62:	11 96       	adiw	r26, 0x01	; 1
     a64:	1c 92       	st	X, r1
     a66:	1e 92       	st	-X, r1
      for (int j = 0; j < splitcols; j++)
     a68:	4c 81       	ldd	r20, Y+4	; 0x04
     a6a:	5d 81       	ldd	r21, Y+5	; 0x05
     a6c:	14 16       	cp	r1, r20
     a6e:	15 06       	cpc	r1, r21
     a70:	b4 f4       	brge	.+44     	; 0xa9e <main+0xe0>
     a72:	9a 01       	movw	r18, r20
     a74:	21 50       	subi	r18, 0x01	; 1
     a76:	31 09       	sbc	r19, r1
     a78:	fb 01       	movw	r30, r22
     a7a:	40 e0       	ldi	r20, 0x00	; 0
     a7c:	50 e0       	ldi	r21, 0x00	; 0
        split1[i] |= (ara[i][j] << (splitcols - 1 - j)); // Using bitmasking to transform columns into a single integer
     a7e:	81 91       	ld	r24, Z+
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	02 2e       	mov	r0, r18
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <main+0xcc>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	0a 94       	dec	r0
     a8c:	e2 f7       	brpl	.-8      	; 0xa86 <main+0xc8>
     a8e:	48 2b       	or	r20, r24
     a90:	59 2b       	or	r21, r25
     a92:	21 50       	subi	r18, 0x01	; 1
     a94:	31 09       	sbc	r19, r1
     a96:	98 f7       	brcc	.-26     	; 0xa7e <main+0xc0>
     a98:	f8 01       	movw	r30, r16
     a9a:	51 83       	std	Z+1, r21	; 0x01
     a9c:	40 83       	st	Z, r20
     a9e:	12 96       	adiw	r26, 0x02	; 2
     aa0:	6f 5e       	subi	r22, 0xEF	; 239
     aa2:	7f 4f       	sbci	r23, 0xFF	; 255
	}

  void split()
  {
    // putting first 8*8 portion of display into split1
    for (int i = 0; i < splitrows; i++)
     aa4:	ae 15       	cp	r26, r14
     aa6:	bf 05       	cpc	r27, r15
     aa8:	d9 f6       	brne	.-74     	; 0xa60 <main+0xa2>
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
    {
      split2[i] = 0;
      for (int j = cols - splitcols; j < cols; j++)
     aaa:	d2 01       	movw	r26, r4
     aac:	12 96       	adiw	r26, 0x02	; 2
     aae:	ed 90       	ld	r14, X+
     ab0:	fc 90       	ld	r15, X
     ab2:	13 97       	sbiw	r26, 0x03	; 3
     ab4:	16 96       	adiw	r26, 0x06	; 6
     ab6:	cd 90       	ld	r12, X+
     ab8:	dc 90       	ld	r13, X
     aba:	17 97       	sbiw	r26, 0x07	; 7
     abc:	87 01       	movw	r16, r14
     abe:	0c 19       	sub	r16, r12
     ac0:	1d 09       	sbc	r17, r13
     ac2:	a7 ea       	ldi	r26, 0xA7	; 167
     ac4:	b3 e0       	ldi	r27, 0x03	; 3
     ac6:	b8 01       	movw	r22, r16
     ac8:	6e 58       	subi	r22, 0x8E	; 142
     aca:	7d 4f       	sbci	r23, 0xFD	; 253
     acc:	f5 01       	movw	r30, r10
     ace:	e9 55       	subi	r30, 0x59	; 89
     ad0:	fc 4f       	sbci	r31, 0xFC	; 252
     ad2:	5f 01       	movw	r10, r30
     ad4:	bd 83       	std	Y+5, r27	; 0x05
     ad6:	ac 83       	std	Y+4, r26	; 0x04
        split1[i] |= (ara[i][j] << (splitcols - 1 - j)); // Using bitmasking to transform columns into a single integer
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
    {
      split2[i] = 0;
     ad8:	11 96       	adiw	r26, 0x01	; 1
     ada:	1c 92       	st	X, r1
     adc:	1e 92       	st	-X, r1
      for (int j = cols - splitcols; j < cols; j++)
     ade:	0e 15       	cp	r16, r14
     ae0:	1f 05       	cpc	r17, r15
     ae2:	bc f4       	brge	.+46     	; 0xb12 <main+0x154>
     ae4:	96 01       	movw	r18, r12
     ae6:	21 50       	subi	r18, 0x01	; 1
     ae8:	31 09       	sbc	r19, r1
     aea:	fb 01       	movw	r30, r22
     aec:	40 e0       	ldi	r20, 0x00	; 0
     aee:	50 e0       	ldi	r21, 0x00	; 0
        split2[i] |= (ara[i][j] << (cols - j - 1));
     af0:	81 91       	ld	r24, Z+
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	02 2e       	mov	r0, r18
     af6:	02 c0       	rjmp	.+4      	; 0xafc <main+0x13e>
     af8:	88 0f       	add	r24, r24
     afa:	99 1f       	adc	r25, r25
     afc:	0a 94       	dec	r0
     afe:	e2 f7       	brpl	.-8      	; 0xaf8 <main+0x13a>
     b00:	48 2b       	or	r20, r24
     b02:	59 2b       	or	r21, r25
     b04:	21 50       	subi	r18, 0x01	; 1
     b06:	31 09       	sbc	r19, r1
     b08:	98 f7       	brcc	.-26     	; 0xaf0 <main+0x132>
     b0a:	ec 81       	ldd	r30, Y+4	; 0x04
     b0c:	fd 81       	ldd	r31, Y+5	; 0x05
     b0e:	51 83       	std	Z+1, r21	; 0x01
     b10:	40 83       	st	Z, r20
     b12:	12 96       	adiw	r26, 0x02	; 2
     b14:	6f 5e       	subi	r22, 0xEF	; 239
     b16:	7f 4f       	sbci	r23, 0xFF	; 255
      split1[i] = 0;
      for (int j = 0; j < splitcols; j++)
        split1[i] |= (ara[i][j] << (splitcols - 1 - j)); // Using bitmasking to transform columns into a single integer
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
     b18:	aa 15       	cp	r26, r10
     b1a:	bb 05       	cpc	r27, r11
     b1c:	d9 f6       	brne	.-74     	; 0xad4 <main+0x116>
      split2[i] = 0;
      for (int j = cols - splitcols; j < cols; j++)
        split2[i] |= (ara[i][j] << (cols - j - 1));
    }
    // split3
    for (int i = rows - splitrows; i < rows; i++)
     b1e:	d2 01       	movw	r26, r4
     b20:	2d 91       	ld	r18, X+
     b22:	3c 91       	ld	r19, X
     b24:	11 97       	sbiw	r26, 0x01	; 1
     b26:	c9 01       	movw	r24, r18
     b28:	88 19       	sub	r24, r8
     b2a:	99 09       	sbc	r25, r9
     b2c:	82 17       	cp	r24, r18
     b2e:	93 07       	cpc	r25, r19
     b30:	0c f0       	brlt	.+2      	; 0xb34 <main+0x176>
     b32:	85 c0       	rjmp	.+266    	; 0xc3e <main+0x280>
    {
      split3[i - rows + splitrows] = 0;
      for (int j = 0; j < splitcols; j++)
     b34:	16 96       	adiw	r26, 0x06	; 6
     b36:	ed 91       	ld	r30, X+
     b38:	fc 91       	ld	r31, X
     b3a:	17 97       	sbiw	r26, 0x07	; 7
     b3c:	dc 01       	movw	r26, r24
     b3e:	a2 1b       	sub	r26, r18
     b40:	b3 0b       	sbc	r27, r19
     b42:	a8 0d       	add	r26, r8
     b44:	b9 1d       	adc	r27, r9
     b46:	9d 01       	movw	r18, r26
     b48:	22 0f       	add	r18, r18
     b4a:	33 1f       	adc	r19, r19
     b4c:	3d 83       	std	Y+5, r19	; 0x05
     b4e:	2c 83       	std	Y+4, r18	; 0x04
     b50:	d9 01       	movw	r26, r18
     b52:	a5 54       	subi	r26, 0x45	; 69
     b54:	bc 4f       	sbci	r27, 0xFC	; 252
     b56:	31 e1       	ldi	r19, 0x11	; 17
     b58:	38 9f       	mul	r19, r24
     b5a:	50 01       	movw	r10, r0
     b5c:	39 9f       	mul	r19, r25
     b5e:	b0 0c       	add	r11, r0
     b60:	11 24       	eor	r1, r1
     b62:	b5 01       	movw	r22, r10
     b64:	6e 58       	subi	r22, 0x8E	; 142
     b66:	7d 4f       	sbci	r23, 0xFD	; 253
     b68:	88 0c       	add	r8, r8
     b6a:	99 1c       	adc	r9, r9
     b6c:	a4 01       	movw	r20, r8
     b6e:	45 54       	subi	r20, 0x45	; 69
     b70:	5c 4f       	sbci	r21, 0xFC	; 252
     b72:	7a 01       	movw	r14, r20
     b74:	fa 87       	std	Y+10, r31	; 0x0a
     b76:	e9 87       	std	Y+9, r30	; 0x09
     b78:	8d 01       	movw	r16, r26
        split2[i] |= (ara[i][j] << (cols - j - 1));
    }
    // split3
    for (int i = rows - splitrows; i < rows; i++)
    {
      split3[i - rows + splitrows] = 0;
     b7a:	11 96       	adiw	r26, 0x01	; 1
     b7c:	1c 92       	st	X, r1
     b7e:	1e 92       	st	-X, r1
      for (int j = 0; j < splitcols; j++)
     b80:	89 85       	ldd	r24, Y+9	; 0x09
     b82:	9a 85       	ldd	r25, Y+10	; 0x0a
     b84:	18 16       	cp	r1, r24
     b86:	19 06       	cpc	r1, r25
     b88:	b4 f4       	brge	.+44     	; 0xbb6 <main+0x1f8>
     b8a:	9c 01       	movw	r18, r24
     b8c:	21 50       	subi	r18, 0x01	; 1
     b8e:	31 09       	sbc	r19, r1
     b90:	fb 01       	movw	r30, r22
     b92:	40 e0       	ldi	r20, 0x00	; 0
     b94:	50 e0       	ldi	r21, 0x00	; 0
        split3[i - rows + splitrows] |= (ara[i][j] << (splitcols - 1 - j));
     b96:	81 91       	ld	r24, Z+
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	02 2e       	mov	r0, r18
     b9c:	02 c0       	rjmp	.+4      	; 0xba2 <main+0x1e4>
     b9e:	88 0f       	add	r24, r24
     ba0:	99 1f       	adc	r25, r25
     ba2:	0a 94       	dec	r0
     ba4:	e2 f7       	brpl	.-8      	; 0xb9e <main+0x1e0>
     ba6:	48 2b       	or	r20, r24
     ba8:	59 2b       	or	r21, r25
     baa:	21 50       	subi	r18, 0x01	; 1
     bac:	31 09       	sbc	r19, r1
     bae:	98 f7       	brcc	.-26     	; 0xb96 <main+0x1d8>
     bb0:	f8 01       	movw	r30, r16
     bb2:	51 83       	std	Z+1, r21	; 0x01
     bb4:	40 83       	st	Z, r20
     bb6:	12 96       	adiw	r26, 0x02	; 2
     bb8:	6f 5e       	subi	r22, 0xEF	; 239
     bba:	7f 4f       	sbci	r23, 0xFF	; 255
      split2[i] = 0;
      for (int j = cols - splitcols; j < cols; j++)
        split2[i] |= (ara[i][j] << (cols - j - 1));
    }
    // split3
    for (int i = rows - splitrows; i < rows; i++)
     bbc:	ae 15       	cp	r26, r14
     bbe:	bf 05       	cpc	r27, r15
     bc0:	d9 f6       	brne	.-74     	; 0xb78 <main+0x1ba>
    }
    // last portion to split4
    for (int i = rows - splitrows; i < rows; i++)
    {
      split4[i - rows + splitrows] = 0;
      for (int j = cols - splitcols; j < cols; j++)
     bc2:	d2 01       	movw	r26, r4
     bc4:	12 96       	adiw	r26, 0x02	; 2
     bc6:	ed 90       	ld	r14, X+
     bc8:	fc 90       	ld	r15, X
     bca:	13 97       	sbiw	r26, 0x03	; 3
     bcc:	16 96       	adiw	r26, 0x06	; 6
     bce:	cd 90       	ld	r12, X+
     bd0:	dc 90       	ld	r13, X
     bd2:	17 97       	sbiw	r26, 0x07	; 7
     bd4:	87 01       	movw	r16, r14
     bd6:	0c 19       	sub	r16, r12
     bd8:	1d 09       	sbc	r17, r13
     bda:	ac 81       	ldd	r26, Y+4	; 0x04
     bdc:	bd 81       	ldd	r27, Y+5	; 0x05
     bde:	a1 53       	subi	r26, 0x31	; 49
     be0:	bc 4f       	sbci	r27, 0xFC	; 252
     be2:	b8 01       	movw	r22, r16
     be4:	6a 0d       	add	r22, r10
     be6:	7b 1d       	adc	r23, r11
     be8:	6e 58       	subi	r22, 0x8E	; 142
     bea:	7d 4f       	sbci	r23, 0xFD	; 253
     bec:	f4 01       	movw	r30, r8
     bee:	e1 53       	subi	r30, 0x31	; 49
     bf0:	fc 4f       	sbci	r31, 0xFC	; 252
     bf2:	5f 01       	movw	r10, r30
     bf4:	bd 83       	std	Y+5, r27	; 0x05
     bf6:	ac 83       	std	Y+4, r26	; 0x04
        split3[i - rows + splitrows] |= (ara[i][j] << (splitcols - 1 - j));
    }
    // last portion to split4
    for (int i = rows - splitrows; i < rows; i++)
    {
      split4[i - rows + splitrows] = 0;
     bf8:	11 96       	adiw	r26, 0x01	; 1
     bfa:	1c 92       	st	X, r1
     bfc:	1e 92       	st	-X, r1
      for (int j = cols - splitcols; j < cols; j++)
     bfe:	0e 15       	cp	r16, r14
     c00:	1f 05       	cpc	r17, r15
     c02:	bc f4       	brge	.+46     	; 0xc32 <main+0x274>
     c04:	96 01       	movw	r18, r12
     c06:	21 50       	subi	r18, 0x01	; 1
     c08:	31 09       	sbc	r19, r1
     c0a:	fb 01       	movw	r30, r22
     c0c:	40 e0       	ldi	r20, 0x00	; 0
     c0e:	50 e0       	ldi	r21, 0x00	; 0
        split4[i - rows + splitrows] |= (ara[i][j] << (cols - j - 1));
     c10:	81 91       	ld	r24, Z+
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	02 2e       	mov	r0, r18
     c16:	02 c0       	rjmp	.+4      	; 0xc1c <main+0x25e>
     c18:	88 0f       	add	r24, r24
     c1a:	99 1f       	adc	r25, r25
     c1c:	0a 94       	dec	r0
     c1e:	e2 f7       	brpl	.-8      	; 0xc18 <main+0x25a>
     c20:	48 2b       	or	r20, r24
     c22:	59 2b       	or	r21, r25
     c24:	21 50       	subi	r18, 0x01	; 1
     c26:	31 09       	sbc	r19, r1
     c28:	98 f7       	brcc	.-26     	; 0xc10 <main+0x252>
     c2a:	ec 81       	ldd	r30, Y+4	; 0x04
     c2c:	fd 81       	ldd	r31, Y+5	; 0x05
     c2e:	51 83       	std	Z+1, r21	; 0x01
     c30:	40 83       	st	Z, r20
     c32:	12 96       	adiw	r26, 0x02	; 2
     c34:	6f 5e       	subi	r22, 0xEF	; 239
     c36:	7f 4f       	sbci	r23, 0xFF	; 255
      split3[i - rows + splitrows] = 0;
      for (int j = 0; j < splitcols; j++)
        split3[i - rows + splitrows] |= (ara[i][j] << (splitcols - 1 - j));
    }
    // last portion to split4
    for (int i = rows - splitrows; i < rows; i++)
     c38:	aa 15       	cp	r26, r10
     c3a:	bb 05       	cpc	r27, r11
     c3c:	d9 f6       	brne	.-74     	; 0xbf4 <main+0x236>
     c3e:	23 e9       	ldi	r18, 0x93	; 147
     c40:	33 e0       	ldi	r19, 0x03	; 3
    {
      split4[i - rows + splitrows] = 0;
      for (int j = cols - splitcols; j < cols; j++)
     c42:	11 e0       	ldi	r17, 0x01	; 1
     c44:	3d 83       	std	Y+5, r19	; 0x05
     c46:	2c 83       	std	Y+4, r18	; 0x04
  void send_to_driver(bool staticState = false)
  {
    split();
    for (uint8_t i = 1; i <= 8; i++)
    {
      select_Load();
     c48:	0e 94 98 00 	call	0x130	; 0x130 <_Z11select_Loadv>
     c4c:	ec 80       	ldd	r14, Y+4	; 0x04
     c4e:	fd 80       	ldd	r15, Y+5	; 0x05

      MAX7219_send2(i, split4[i - 1]);
     c50:	d7 01       	movw	r26, r14
     c52:	dc 96       	adiw	r26, 0x3c	; 60
     c54:	6c 91       	ld	r22, X
     c56:	81 2f       	mov	r24, r17
     c58:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z13MAX7219_send2hh>
      MAX7219_send2(i, split3[i - 1]);
     c5c:	ec 81       	ldd	r30, Y+4	; 0x04
     c5e:	fd 81       	ldd	r31, Y+5	; 0x05
     c60:	60 a5       	ldd	r22, Z+40	; 0x28
     c62:	81 2f       	mov	r24, r17
     c64:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z13MAX7219_send2hh>
      MAX7219_send2(i, split2[i - 1]);
     c68:	ac 81       	ldd	r26, Y+4	; 0x04
     c6a:	bd 81       	ldd	r27, Y+5	; 0x05
     c6c:	54 96       	adiw	r26, 0x14	; 20
     c6e:	6c 91       	ld	r22, X
     c70:	81 2f       	mov	r24, r17
     c72:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z13MAX7219_send2hh>
      MAX7219_send2(i, split1[i - 1]);
     c76:	f7 01       	movw	r30, r14
     c78:	60 81       	ld	r22, Z
     c7a:	ec 81       	ldd	r30, Y+4	; 0x04
     c7c:	fd 81       	ldd	r31, Y+5	; 0x05
     c7e:	32 96       	adiw	r30, 0x02	; 2
     c80:	fd 83       	std	Y+5, r31	; 0x05
     c82:	ec 83       	std	Y+4, r30	; 0x04
     c84:	81 2f       	mov	r24, r17
     c86:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z13MAX7219_send2hh>

      deSelect_Load();
     c8a:	0e 94 9a 00 	call	0x134	; 0x134 <_Z13deSelect_Loadv>
  }

  void send_to_driver(bool staticState = false)
  {
    split();
    for (uint8_t i = 1; i <= 8; i++)
     c8e:	1f 5f       	subi	r17, 0xFF	; 255
     c90:	19 30       	cpi	r17, 0x09	; 9
     c92:	d1 f6       	brne	.-76     	; 0xc48 <main+0x28a>
     c94:	f1 e0       	ldi	r31, 0x01	; 1
     c96:	fc 83       	std	Y+4, r31	; 0x04

  void turnoff()
  {
    // Turn off all LEDs
    for (uint8_t i = 1; i <= 8; i++)
      MAX7219_send(i, 0x00);
     c98:	63 2d       	mov	r22, r3
     c9a:	8c 81       	ldd	r24, Y+4	; 0x04
     c9c:	0e 94 6f 00 	call	0xde	; 0xde <_Z12MAX7219_sendhh>
  }

  void turnoff()
  {
    // Turn off all LEDs
    for (uint8_t i = 1; i <= 8; i++)
     ca0:	2c 81       	ldd	r18, Y+4	; 0x04
     ca2:	2f 5f       	subi	r18, 0xFF	; 255
     ca4:	2c 83       	std	Y+4, r18	; 0x04
     ca6:	29 30       	cpi	r18, 0x09	; 9
     ca8:	b9 f7       	brne	.-18     	; 0xc98 <main+0x2da>
     caa:	ac ce       	rjmp	.-680    	; 0xa04 <main+0x46>
     cac:	31 70       	andi	r19, 0x01	; 1
     cae:	3c 83       	std	Y+4, r19	; 0x04
      display.send_to_driver();
      continue;
    }

    // paddle movement
    if (!prev_left_button && left_button) // raising edge
     cb0:	61 10       	cpse	r6, r1
     cb2:	1f c0       	rjmp	.+62     	; 0xcf2 <main+0x334>
     cb4:	33 23       	and	r19, r19
     cb6:	e9 f0       	breq	.+58     	; 0xcf2 <main+0x334>
    size = 5;
    row = wall.down;
    init();
  }

  int left() { return position - size / 2; }
     cb8:	af e0       	ldi	r26, 0x0F	; 15
     cba:	b4 e0       	ldi	r27, 0x04	; 4
     cbc:	4d 91       	ld	r20, X+
     cbe:	5c 91       	ld	r21, X
  int right() { return position + size / 2; }

  void goleft()
  {
    if (left() > wall.left)
     cc0:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <paddle+0x2>
     cc4:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <paddle+0x3>
     cc8:	99 23       	and	r25, r25
     cca:	0c f4       	brge	.+2      	; 0xcce <main+0x310>
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	95 95       	asr	r25
     cd0:	87 95       	ror	r24
     cd2:	ba 01       	movw	r22, r20
     cd4:	68 1b       	sub	r22, r24
     cd6:	79 0b       	sbc	r23, r25
     cd8:	e5 e1       	ldi	r30, 0x15	; 21
     cda:	f4 e0       	ldi	r31, 0x04	; 4
     cdc:	80 81       	ld	r24, Z
     cde:	91 81       	ldd	r25, Z+1	; 0x01
     ce0:	86 17       	cp	r24, r22
     ce2:	97 07       	cpc	r25, r23
     ce4:	34 f4       	brge	.+12     	; 0xcf2 <main+0x334>
      position--;
     ce6:	41 50       	subi	r20, 0x01	; 1
     ce8:	51 09       	sbc	r21, r1
     cea:	af e0       	ldi	r26, 0x0F	; 15
     cec:	b4 e0       	ldi	r27, 0x04	; 4
     cee:	4d 93       	st	X+, r20
     cf0:	5c 93       	st	X, r21
     cf2:	22 70       	andi	r18, 0x02	; 2
     cf4:	2f 83       	std	Y+7, r18	; 0x07
    }

    // paddle movement
    if (!prev_left_button && left_button) // raising edge
      paddle.goleft();
    if (!prev_right_button && right_button)
     cf6:	71 10       	cpse	r7, r1
     cf8:	1e c0       	rjmp	.+60     	; 0xd36 <main+0x378>
     cfa:	22 23       	and	r18, r18
     cfc:	e1 f0       	breq	.+56     	; 0xd36 <main+0x378>
    row = wall.down;
    init();
  }

  int left() { return position - size / 2; }
  int right() { return position + size / 2; }
     cfe:	ef e0       	ldi	r30, 0x0F	; 15
     d00:	f4 e0       	ldi	r31, 0x04	; 4
     d02:	20 81       	ld	r18, Z
     d04:	31 81       	ldd	r19, Z+1	; 0x01
    if (left() > wall.left)
      position--;
  }
  void goright()
  {
    if (right() < wall.right)
     d06:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <paddle+0x2>
     d0a:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <paddle+0x3>
     d0e:	99 23       	and	r25, r25
     d10:	0c f4       	brge	.+2      	; 0xd14 <main+0x356>
     d12:	01 96       	adiw	r24, 0x01	; 1
     d14:	95 95       	asr	r25
     d16:	87 95       	ror	r24
     d18:	82 0f       	add	r24, r18
     d1a:	93 1f       	adc	r25, r19
     d1c:	40 91 17 04 	lds	r20, 0x0417	; 0x800417 <wall+0x2>
     d20:	50 91 18 04 	lds	r21, 0x0418	; 0x800418 <wall+0x3>
     d24:	84 17       	cp	r24, r20
     d26:	95 07       	cpc	r25, r21
     d28:	34 f4       	brge	.+12     	; 0xd36 <main+0x378>
      position++;
     d2a:	2f 5f       	subi	r18, 0xFF	; 255
     d2c:	3f 4f       	sbci	r19, 0xFF	; 255
     d2e:	af e0       	ldi	r26, 0x0F	; 15
     d30:	b4 e0       	ldi	r27, 0x04	; 4
     d32:	2d 93       	st	X+, r18
     d34:	3c 93       	st	X, r19
      paddle.goright();
    prev_left_button = left_button;
    prev_right_button = right_button;

    // Update ball position
    ball_counter++;
     d36:	ea 81       	ldd	r30, Y+2	; 0x02
     d38:	fb 81       	ldd	r31, Y+3	; 0x03
     d3a:	31 96       	adiw	r30, 0x01	; 1
     d3c:	fb 83       	std	Y+3, r31	; 0x03
     d3e:	ea 83       	std	Y+2, r30	; 0x02
    if (ball_counter >= speed)
     d40:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <speed>
     d44:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <speed+0x1>
     d48:	e8 17       	cp	r30, r24
     d4a:	f9 07       	cpc	r31, r25
     d4c:	0c f4       	brge	.+2      	; 0xd50 <main+0x392>
     d4e:	21 c1       	rjmp	.+578    	; 0xf92 <main+0x5d4>
  }

  Ball() { init(); }

  int nextcol() { return col + col_dir; }
  int nextrow() { return row + row_dir; }
     d50:	60 91 0b 04 	lds	r22, 0x040B	; 0x80040b <ball+0x4>
     d54:	70 91 0c 04 	lds	r23, 0x040C	; 0x80040c <ball+0x5>
     d58:	a7 e0       	ldi	r26, 0x07	; 7
     d5a:	b4 e0       	ldi	r27, 0x04	; 4
     d5c:	2d 91       	ld	r18, X+
     d5e:	3c 91       	ld	r19, X
     d60:	11 97       	sbiw	r26, 0x01	; 1
     d62:	26 0f       	add	r18, r22
     d64:	37 1f       	adc	r19, r23
  void update() { row = nextrow(), col = nextcol(); }
     d66:	2d 93       	st	X+, r18
     d68:	3c 93       	st	X, r19
    col_dir = 0;
  }

  Ball() { init(); }

  int nextcol() { return col + col_dir; }
     d6a:	40 91 0d 04 	lds	r20, 0x040D	; 0x80040d <ball+0x6>
     d6e:	50 91 0e 04 	lds	r21, 0x040E	; 0x80040e <ball+0x7>
     d72:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <ball+0x2>
     d76:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <ball+0x3>
     d7a:	84 0f       	add	r24, r20
     d7c:	95 1f       	adc	r25, r21
  int nextrow() { return row + row_dir; }
  void update() { row = nextrow(), col = nextcol(); }
     d7e:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <ball+0x3>
     d82:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <ball+0x2>

  void collision_check()
  {
    // Check for collision with walls
    if (row <= wall.up)
     d86:	e0 91 19 04 	lds	r30, 0x0419	; 0x800419 <wall+0x4>
     d8a:	f0 91 1a 04 	lds	r31, 0x041A	; 0x80041a <wall+0x5>
     d8e:	e2 17       	cp	r30, r18
     d90:	f3 07       	cpc	r31, r19
     d92:	3c f0       	brlt	.+14     	; 0xda2 <main+0x3e4>
      row_dir = -row_dir; // Reflect ball downwards
     d94:	71 95       	neg	r23
     d96:	61 95       	neg	r22
     d98:	71 09       	sbc	r23, r1
     d9a:	70 93 0c 04 	sts	0x040C, r23	; 0x80040c <ball+0x5>
     d9e:	60 93 0b 04 	sts	0x040B, r22	; 0x80040b <ball+0x4>
    if (col <= wall.left || col >= wall.right)
     da2:	e5 e1       	ldi	r30, 0x15	; 21
     da4:	f4 e0       	ldi	r31, 0x04	; 4
     da6:	60 81       	ld	r22, Z
     da8:	71 81       	ldd	r23, Z+1	; 0x01
     daa:	68 17       	cp	r22, r24
     dac:	79 07       	cpc	r23, r25
     dae:	3c f4       	brge	.+14     	; 0xdbe <main+0x400>
     db0:	60 91 17 04 	lds	r22, 0x0417	; 0x800417 <wall+0x2>
     db4:	70 91 18 04 	lds	r23, 0x0418	; 0x800418 <wall+0x3>
     db8:	86 17       	cp	r24, r22
     dba:	97 07       	cpc	r25, r23
     dbc:	3c f0       	brlt	.+14     	; 0xdcc <main+0x40e>
      col_dir = -col_dir; // Reflect ball horizontally
     dbe:	51 95       	neg	r21
     dc0:	41 95       	neg	r20
     dc2:	51 09       	sbc	r21, r1
     dc4:	50 93 0e 04 	sts	0x040E, r21	; 0x80040e <ball+0x7>
     dc8:	40 93 0d 04 	sts	0x040D, r20	; 0x80040d <ball+0x6>

    // Check for collision with paddle
    if (nextrow() == paddle.row && col >= paddle.left() && col <= paddle.right())
     dcc:	40 91 0b 04 	lds	r20, 0x040B	; 0x80040b <ball+0x4>
     dd0:	50 91 0c 04 	lds	r21, 0x040C	; 0x80040c <ball+0x5>
     dd4:	42 0f       	add	r20, r18
     dd6:	53 1f       	adc	r21, r19
     dd8:	60 91 13 04 	lds	r22, 0x0413	; 0x800413 <paddle+0x4>
     ddc:	70 91 14 04 	lds	r23, 0x0414	; 0x800414 <paddle+0x5>
     de0:	46 17       	cp	r20, r22
     de2:	57 07       	cpc	r21, r23
     de4:	09 f0       	breq	.+2      	; 0xde8 <main+0x42a>
     de6:	44 c0       	rjmp	.+136    	; 0xe70 <main+0x4b2>
    size = 5;
    row = wall.down;
    init();
  }

  int left() { return position - size / 2; }
     de8:	af e0       	ldi	r26, 0x0F	; 15
     dea:	b4 e0       	ldi	r27, 0x04	; 4
     dec:	6d 91       	ld	r22, X+
     dee:	7c 91       	ld	r23, X
     df0:	40 91 11 04 	lds	r20, 0x0411	; 0x800411 <paddle+0x2>
     df4:	50 91 12 04 	lds	r21, 0x0412	; 0x800412 <paddle+0x3>
     df8:	55 23       	and	r21, r21
     dfa:	14 f4       	brge	.+4      	; 0xe00 <main+0x442>
     dfc:	4f 5f       	subi	r20, 0xFF	; 255
     dfe:	5f 4f       	sbci	r21, 0xFF	; 255
     e00:	55 95       	asr	r21
     e02:	47 95       	ror	r20
      row_dir = -row_dir; // Reflect ball downwards
    if (col <= wall.left || col >= wall.right)
      col_dir = -col_dir; // Reflect ball horizontally

    // Check for collision with paddle
    if (nextrow() == paddle.row && col >= paddle.left() && col <= paddle.right())
     e04:	fb 01       	movw	r30, r22
     e06:	e4 1b       	sub	r30, r20
     e08:	f5 0b       	sbc	r31, r21
     e0a:	8e 17       	cp	r24, r30
     e0c:	9f 07       	cpc	r25, r31
     e0e:	84 f1       	brlt	.+96     	; 0xe70 <main+0x4b2>
     e10:	46 0f       	add	r20, r22
     e12:	57 1f       	adc	r21, r23
     e14:	48 17       	cp	r20, r24
     e16:	59 07       	cpc	r21, r25
     e18:	5c f1       	brlt	.+86     	; 0xe70 <main+0x4b2>
    {
      if (col < paddle.position)
     e1a:	86 17       	cp	r24, r22
     e1c:	97 07       	cpc	r25, r23
     e1e:	5c f4       	brge	.+22     	; 0xe36 <main+0x478>
      {
        row_dir = -1;
     e20:	ef ef       	ldi	r30, 0xFF	; 255
     e22:	ff ef       	ldi	r31, 0xFF	; 255
     e24:	f0 93 0c 04 	sts	0x040C, r31	; 0x80040c <ball+0x5>
     e28:	e0 93 0b 04 	sts	0x040B, r30	; 0x80040b <ball+0x4>
        col_dir = -1;
     e2c:	f0 93 0e 04 	sts	0x040E, r31	; 0x80040e <ball+0x7>
     e30:	e0 93 0d 04 	sts	0x040D, r30	; 0x80040d <ball+0x6>
     e34:	1d c0       	rjmp	.+58     	; 0xe70 <main+0x4b2>
      }
      else if (col == paddle.position)
     e36:	86 17       	cp	r24, r22
     e38:	97 07       	cpc	r25, r23
     e3a:	59 f4       	brne	.+22     	; 0xe52 <main+0x494>
      {
        row_dir = -1;
     e3c:	4f ef       	ldi	r20, 0xFF	; 255
     e3e:	5f ef       	ldi	r21, 0xFF	; 255
     e40:	50 93 0c 04 	sts	0x040C, r21	; 0x80040c <ball+0x5>
     e44:	40 93 0b 04 	sts	0x040B, r20	; 0x80040b <ball+0x4>
        col_dir = 0;
     e48:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <ball+0x7>
     e4c:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <ball+0x6>
     e50:	0f c0       	rjmp	.+30     	; 0xe70 <main+0x4b2>
      }
      else if (col > paddle.position)
     e52:	68 17       	cp	r22, r24
     e54:	79 07       	cpc	r23, r25
     e56:	64 f4       	brge	.+24     	; 0xe70 <main+0x4b2>
      {
        row_dir = -1;
     e58:	af ef       	ldi	r26, 0xFF	; 255
     e5a:	bf ef       	ldi	r27, 0xFF	; 255
     e5c:	b0 93 0c 04 	sts	0x040C, r27	; 0x80040c <ball+0x5>
     e60:	a0 93 0b 04 	sts	0x040B, r26	; 0x80040b <ball+0x4>
        col_dir = 1;
     e64:	e1 e0       	ldi	r30, 0x01	; 1
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	f0 93 0e 04 	sts	0x040E, r31	; 0x80040e <ball+0x7>
     e6c:	e0 93 0d 04 	sts	0x040D, r30	; 0x80040d <ball+0x6>
  }

  Ball() { init(); }

  int nextcol() { return col + col_dir; }
  int nextrow() { return row + row_dir; }
     e70:	40 91 0b 04 	lds	r20, 0x040B	; 0x80040b <ball+0x4>
     e74:	50 91 0c 04 	lds	r21, 0x040C	; 0x80040c <ball+0x5>
     e78:	24 0f       	add	r18, r20
     e7a:	35 1f       	adc	r19, r21
      }
    }

    // collision with bricks
    int nrow = nextrow();
    if (nrow < dimension && bricks[nrow][nextcol()])
     e7c:	20 31       	cpi	r18, 0x10	; 16
     e7e:	31 05       	cpc	r19, r1
     e80:	0c f0       	brlt	.+2      	; 0xe84 <main+0x4c6>
     e82:	47 c0       	rjmp	.+142    	; 0xf12 <main+0x554>
     e84:	22 95       	swap	r18
     e86:	32 95       	swap	r19
     e88:	30 7f       	andi	r19, 0xF0	; 240
     e8a:	32 27       	eor	r19, r18
     e8c:	20 7f       	andi	r18, 0xF0	; 240
     e8e:	32 27       	eor	r19, r18
     e90:	23 5e       	subi	r18, 0xE3	; 227
     e92:	3b 4f       	sbci	r19, 0xFB	; 251
     e94:	40 91 0d 04 	lds	r20, 0x040D	; 0x80040d <ball+0x6>
     e98:	50 91 0e 04 	lds	r21, 0x040E	; 0x80040e <ball+0x7>
     e9c:	24 0f       	add	r18, r20
     e9e:	35 1f       	adc	r19, r21
     ea0:	f9 01       	movw	r30, r18
     ea2:	e8 0f       	add	r30, r24
     ea4:	f9 1f       	adc	r31, r25
     ea6:	80 81       	ld	r24, Z
     ea8:	88 23       	and	r24, r24
     eaa:	99 f1       	breq	.+102    	; 0xf12 <main+0x554>
    {
      PORTA |= (1 << SCORE_BUTTON_PIN); // to sound the beeper
     eac:	da 9a       	sbi	0x1b, 2	; 27
  }

  Ball() { init(); }

  int nextcol() { return col + col_dir; }
  int nextrow() { return row + row_dir; }
     eae:	20 91 0b 04 	lds	r18, 0x040B	; 0x80040b <ball+0x4>
     eb2:	30 91 0c 04 	lds	r19, 0x040C	; 0x80040c <ball+0x5>
    // collision with bricks
    int nrow = nextrow();
    if (nrow < dimension && bricks[nrow][nextcol()])
    {
      PORTA |= (1 << SCORE_BUTTON_PIN); // to sound the beeper
      bricks[nextrow()][nextcol()] = 0;
     eb6:	a7 e0       	ldi	r26, 0x07	; 7
     eb8:	b4 e0       	ldi	r27, 0x04	; 4
     eba:	8d 91       	ld	r24, X+
     ebc:	9c 91       	ld	r25, X
     ebe:	82 0f       	add	r24, r18
     ec0:	93 1f       	adc	r25, r19
     ec2:	82 95       	swap	r24
     ec4:	92 95       	swap	r25
     ec6:	90 7f       	andi	r25, 0xF0	; 240
     ec8:	98 27       	eor	r25, r24
     eca:	80 7f       	andi	r24, 0xF0	; 240
     ecc:	98 27       	eor	r25, r24
     ece:	83 5e       	subi	r24, 0xE3	; 227
     ed0:	9b 4f       	sbci	r25, 0xFB	; 251
     ed2:	e0 91 09 04 	lds	r30, 0x0409	; 0x800409 <ball+0x2>
     ed6:	f0 91 0a 04 	lds	r31, 0x040A	; 0x80040a <ball+0x3>
     eda:	8e 0f       	add	r24, r30
     edc:	9f 1f       	adc	r25, r31
     ede:	fc 01       	movw	r30, r24
     ee0:	e4 0f       	add	r30, r20
     ee2:	f5 1f       	adc	r31, r21
     ee4:	10 82       	st	Z, r1
      --brick_count;
     ee6:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <brick_count>
     eea:	90 91 1e 05 	lds	r25, 0x051E	; 0x80051e <brick_count+0x1>
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	90 93 1e 05 	sts	0x051E, r25	; 0x80051e <brick_count+0x1>
     ef4:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <brick_count>
      row_dir = -row_dir;
     ef8:	31 95       	neg	r19
     efa:	21 95       	neg	r18
     efc:	31 09       	sbc	r19, r1
     efe:	30 93 0c 04 	sts	0x040C, r19	; 0x80040c <ball+0x5>
     f02:	20 93 0b 04 	sts	0x040B, r18	; 0x80040b <ball+0x4>
     f06:	e1 ee       	ldi	r30, 0xE1	; 225
     f08:	f4 e0       	ldi	r31, 0x04	; 4
     f0a:	31 97       	sbiw	r30, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <main+0x54c>
     f0e:	00 c0       	rjmp	.+0      	; 0xf10 <main+0x552>
     f10:	00 00       	nop
    {
      ball.update();
      ball.collision_check();

      // check if bricks finished
      if (!brick_count)
     f12:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <brick_count>
     f16:	90 91 1e 05 	lds	r25, 0x051E	; 0x80051e <brick_count+0x1>
     f1a:	89 2b       	or	r24, r25
     f1c:	11 f4       	brne	.+4      	; 0xf22 <main+0x564>
        level_up();
     f1e:	0e 94 3a 03 	call	0x674	; 0x674 <_Z8level_upv>

      // check if ball gone down
      if (ball.row >= wall.down + 5)
     f22:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <wall+0x6>
     f26:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <wall+0x7>
     f2a:	05 96       	adiw	r24, 0x05	; 5
     f2c:	a7 e0       	ldi	r26, 0x07	; 7
     f2e:	b4 e0       	ldi	r27, 0x04	; 4
     f30:	2d 91       	ld	r18, X+
     f32:	3c 91       	ld	r19, X
     f34:	11 97       	sbiw	r26, 0x01	; 1
     f36:	28 17       	cp	r18, r24
     f38:	39 07       	cpc	r19, r25
     f3a:	4c f1       	brlt	.+82     	; 0xf8e <main+0x5d0>
      {
        if (life)
     f3c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <life>
     f40:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <life+0x1>
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	09 f1       	breq	.+66     	; 0xf8a <main+0x5cc>
        {
          life--;
     f48:	01 97       	sbiw	r24, 0x01	; 1
     f4a:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <life+0x1>
     f4e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <life>
          PORTA |= (1 << LIFE_BUTTON_PIN); // to sound the beeper
     f52:	db 9a       	sbi	0x1b, 3	; 27
  int row, col;
  int row_dir, col_dir;

  void init() // sets the starting position of the ball
  {
    row = wall.down;
     f54:	80 91 1b 04 	lds	r24, 0x041B	; 0x80041b <wall+0x6>
     f58:	90 91 1c 04 	lds	r25, 0x041C	; 0x80041c <wall+0x7>
     f5c:	8d 93       	st	X+, r24
     f5e:	9c 93       	st	X, r25
    col = paddle.position;
     f60:	ef e0       	ldi	r30, 0x0F	; 15
     f62:	f4 e0       	ldi	r31, 0x04	; 4
     f64:	80 81       	ld	r24, Z
     f66:	91 81       	ldd	r25, Z+1	; 0x01
     f68:	90 93 0a 04 	sts	0x040A, r25	; 0x80040a <ball+0x3>
     f6c:	80 93 09 04 	sts	0x0409, r24	; 0x800409 <ball+0x2>
    row_dir = -1;
     f70:	2f ef       	ldi	r18, 0xFF	; 255
     f72:	3f ef       	ldi	r19, 0xFF	; 255
     f74:	30 93 0c 04 	sts	0x040C, r19	; 0x80040c <ball+0x5>
     f78:	20 93 0b 04 	sts	0x040B, r18	; 0x80040b <ball+0x4>
    col_dir = 0;
     f7c:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <ball+0x7>
     f80:	10 92 0d 04 	sts	0x040D, r1	; 0x80040d <ball+0x6>
        }
        else
          game_over();
      }

      ball_counter = 0;
     f84:	1b 82       	std	Y+3, r1	; 0x03
     f86:	1a 82       	std	Y+2, r1	; 0x02
     f88:	04 c0       	rjmp	.+8      	; 0xf92 <main+0x5d4>
          life--;
          PORTA |= (1 << LIFE_BUTTON_PIN); // to sound the beeper
          ball.init();                     // reviving if life remains
        }
        else
          game_over();
     f8a:	0e 94 c5 04 	call	0x98a	; 0x98a <_Z9game_overv>
      }

      ball_counter = 0;
     f8e:	1b 82       	std	Y+3, r1	; 0x03
     f90:	1a 82       	std	Y+2, r1	; 0x02
    }

    bullets_counter++;
     f92:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <bullets_counter>
     f96:	90 91 06 04 	lds	r25, 0x0406	; 0x800406 <bullets_counter+0x1>
     f9a:	01 96       	adiw	r24, 0x01	; 1
     f9c:	90 93 06 04 	sts	0x0406, r25	; 0x800406 <bullets_counter+0x1>
     fa0:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <bullets_counter>
		if(bullets_counter >= bullet_speed){
     fa4:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <bullet_speed>
     fa8:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <bullet_speed+0x1>
     fac:	82 17       	cp	r24, r18
     fae:	93 07       	cpc	r25, r19
     fb0:	34 f0       	brlt	.+12     	; 0xfbe <main+0x600>
			update_bullets();
     fb2:	0e 94 b5 00 	call	0x16a	; 0x16a <_Z14update_bulletsv>
			bullets_counter = 0;
     fb6:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <bullets_counter+0x1>
     fba:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <bullets_counter>
  }
  Display() { resetArray(); } // initializing with 0

  void bricks_in_display()
  {
    for (int i = 0; i < rows; ++i)
     fbe:	d2 01       	movw	r26, r4
     fc0:	8d 90       	ld	r8, X+
     fc2:	9c 90       	ld	r9, X
     fc4:	11 97       	sbiw	r26, 0x01	; 1
     fc6:	18 14       	cp	r1, r8
     fc8:	19 04       	cpc	r1, r9
     fca:	24 f5       	brge	.+72     	; 0x1014 <main+0x656>
      for (int j = 0; j < cols; ++j)
     fcc:	12 96       	adiw	r26, 0x02	; 2
     fce:	ed 91       	ld	r30, X+
     fd0:	fc 91       	ld	r31, X
     fd2:	13 97       	sbiw	r26, 0x03	; 3
     fd4:	2d e1       	ldi	r18, 0x1D	; 29
     fd6:	34 e0       	ldi	r19, 0x04	; 4
     fd8:	62 e7       	ldi	r22, 0x72	; 114
     fda:	72 e0       	ldi	r23, 0x02	; 2
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	fa 87       	std	Y+10, r31	; 0x0a
     fe2:	e9 87       	std	Y+9, r30	; 0x09
     fe4:	89 85       	ldd	r24, Y+9	; 0x09
     fe6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe8:	18 16       	cp	r1, r24
     fea:	19 06       	cpc	r1, r25
     fec:	54 f4       	brge	.+20     	; 0x1002 <main+0x644>
     fee:	8c 01       	movw	r16, r24
     ff0:	02 0f       	add	r16, r18
     ff2:	13 1f       	adc	r17, r19
     ff4:	db 01       	movw	r26, r22
     ff6:	f9 01       	movw	r30, r18
        ara[i][j] = bricks[i][j];
     ff8:	81 91       	ld	r24, Z+
     ffa:	8d 93       	st	X+, r24
  Display() { resetArray(); } // initializing with 0

  void bricks_in_display()
  {
    for (int i = 0; i < rows; ++i)
      for (int j = 0; j < cols; ++j)
     ffc:	e0 17       	cp	r30, r16
     ffe:	f1 07       	cpc	r31, r17
    1000:	d9 f7       	brne	.-10     	; 0xff8 <main+0x63a>
  }
  Display() { resetArray(); } // initializing with 0

  void bricks_in_display()
  {
    for (int i = 0; i < rows; ++i)
    1002:	4f 5f       	subi	r20, 0xFF	; 255
    1004:	5f 4f       	sbci	r21, 0xFF	; 255
    1006:	20 5f       	subi	r18, 0xF0	; 240
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	6f 5e       	subi	r22, 0xEF	; 239
    100c:	7f 4f       	sbci	r23, 0xFF	; 255
    100e:	48 15       	cp	r20, r8
    1010:	59 05       	cpc	r21, r9
    1012:	41 f7       	brne	.-48     	; 0xfe4 <main+0x626>
    size = 5;
    row = wall.down;
    init();
  }

  int left() { return position - size / 2; }
    1014:	ef e0       	ldi	r30, 0x0F	; 15
    1016:	f4 e0       	ldi	r31, 0x04	; 4
    1018:	40 81       	ld	r20, Z
    101a:	51 81       	ldd	r21, Z+1	; 0x01
    101c:	80 91 11 04 	lds	r24, 0x0411	; 0x800411 <paddle+0x2>
    1020:	90 91 12 04 	lds	r25, 0x0412	; 0x800412 <paddle+0x3>
    1024:	99 23       	and	r25, r25
    1026:	0c f4       	brge	.+2      	; 0x102a <main+0x66c>
    1028:	01 96       	adiw	r24, 0x01	; 1
    102a:	9c 01       	movw	r18, r24
    102c:	35 95       	asr	r19
    102e:	27 95       	ror	r18
    1030:	ca 01       	movw	r24, r20
    1032:	82 1b       	sub	r24, r18
    1034:	93 0b       	sbc	r25, r19
  int right() { return position + size / 2; }
    1036:	24 0f       	add	r18, r20
    1038:	35 1f       	adc	r19, r21
      for (int j = 0; j < cols; ++j)
        ara[i][j] = bricks[i][j];
  }
  void paddle_in_display()
  {
    for (int i = paddle.left(); i <= paddle.right(); ++i)
    103a:	28 17       	cp	r18, r24
    103c:	39 07       	cpc	r19, r25
    103e:	9c f0       	brlt	.+38     	; 0x1066 <main+0x6a8>
    1040:	40 91 13 04 	lds	r20, 0x0413	; 0x800413 <paddle+0x4>
    1044:	50 91 14 04 	lds	r21, 0x0414	; 0x800414 <paddle+0x5>
    1048:	61 e1       	ldi	r22, 0x11	; 17
    104a:	64 9f       	mul	r22, r20
    104c:	f0 01       	movw	r30, r0
    104e:	65 9f       	mul	r22, r21
    1050:	f0 0d       	add	r31, r0
    1052:	11 24       	eor	r1, r1
    1054:	e8 0f       	add	r30, r24
    1056:	f9 1f       	adc	r31, r25
    1058:	ee 58       	subi	r30, 0x8E	; 142
    105a:	fd 4f       	sbci	r31, 0xFD	; 253
      ara[paddle.row][i] = 1;
    105c:	21 92       	st	Z+, r2
      for (int j = 0; j < cols; ++j)
        ara[i][j] = bricks[i][j];
  }
  void paddle_in_display()
  {
    for (int i = paddle.left(); i <= paddle.right(); ++i)
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	28 17       	cp	r18, r24
    1062:	39 07       	cpc	r19, r25
    1064:	dc f7       	brge	.-10     	; 0x105c <main+0x69e>
      ara[paddle.row][i] = 1;
  }
  void ball_in_display()
  {
    if (ball.row <= wall.down)
    1066:	a7 e0       	ldi	r26, 0x07	; 7
    1068:	b4 e0       	ldi	r27, 0x04	; 4
    106a:	8d 91       	ld	r24, X+
    106c:	9c 91       	ld	r25, X
    106e:	20 91 1b 04 	lds	r18, 0x041B	; 0x80041b <wall+0x6>
    1072:	30 91 1c 04 	lds	r19, 0x041C	; 0x80041c <wall+0x7>
    1076:	28 17       	cp	r18, r24
    1078:	39 07       	cpc	r19, r25
    107a:	0c f4       	brge	.+2      	; 0x107e <main+0x6c0>
    107c:	78 c1       	rjmp	.+752    	; 0x136e <main+0x9b0>
      ara[ball.row][ball.col] = 1;
    107e:	b1 e1       	ldi	r27, 0x11	; 17
    1080:	b8 9f       	mul	r27, r24
    1082:	f0 01       	movw	r30, r0
    1084:	b9 9f       	mul	r27, r25
    1086:	f0 0d       	add	r31, r0
    1088:	11 24       	eor	r1, r1
    108a:	e6 59       	subi	r30, 0x96	; 150
    108c:	fd 4f       	sbci	r31, 0xFD	; 253
    108e:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <ball+0x2>
    1092:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <ball+0x3>
    1096:	e8 0f       	add	r30, r24
    1098:	f9 1f       	adc	r31, r25
    109a:	20 86       	std	Z+8, r2	; 0x08
    109c:	68 c1       	rjmp	.+720    	; 0x136e <main+0x9b0>
	}

  void split()
  {
    // putting first 8*8 portion of display into split1
    for (int i = 0; i < splitrows; i++)
    109e:	f2 01       	movw	r30, r4
    10a0:	64 80       	ldd	r6, Z+4	; 0x04
    10a2:	75 80       	ldd	r7, Z+5	; 0x05
    10a4:	16 14       	cp	r1, r6
    10a6:	17 04       	cpc	r1, r7
    10a8:	04 f1       	brlt	.+64     	; 0x10ea <main+0x72c>
    10aa:	8d c0       	rjmp	.+282    	; 0x11c6 <main+0x808>
      ara[ball.row][ball.col] = 1;
  }

  void bullet_in_display() {
		for (int i = 0; i < MAX_BULLETS; i++) {
			if (bullets[i].active && bullets[i].row>=0) {
    10ac:	84 81       	ldd	r24, Z+4	; 0x04
    10ae:	95 81       	ldd	r25, Z+5	; 0x05
    10b0:	89 2b       	or	r24, r25
    10b2:	a1 f0       	breq	.+40     	; 0x10dc <main+0x71e>
    10b4:	80 81       	ld	r24, Z
    10b6:	91 81       	ldd	r25, Z+1	; 0x01
    10b8:	99 23       	and	r25, r25
    10ba:	84 f0       	brlt	.+32     	; 0x10dc <main+0x71e>
				ara[bullets[i].row][bullets[i].col] = 1;
    10bc:	21 e1       	ldi	r18, 0x11	; 17
    10be:	28 9f       	mul	r18, r24
    10c0:	d0 01       	movw	r26, r0
    10c2:	29 9f       	mul	r18, r25
    10c4:	b0 0d       	add	r27, r0
    10c6:	11 24       	eor	r1, r1
    10c8:	9d 01       	movw	r18, r26
    10ca:	26 59       	subi	r18, 0x96	; 150
    10cc:	3d 4f       	sbci	r19, 0xFD	; 253
    10ce:	82 81       	ldd	r24, Z+2	; 0x02
    10d0:	93 81       	ldd	r25, Z+3	; 0x03
    10d2:	d9 01       	movw	r26, r18
    10d4:	a8 0f       	add	r26, r24
    10d6:	b9 1f       	adc	r27, r25
    10d8:	18 96       	adiw	r26, 0x08	; 8
    10da:	2c 92       	st	X, r2
    10dc:	36 96       	adiw	r30, 0x06	; 6
    if (ball.row <= wall.down)
      ara[ball.row][ball.col] = 1;
  }

  void bullet_in_display() {
		for (int i = 0; i < MAX_BULLETS; i++) {
    10de:	45 e0       	ldi	r20, 0x05	; 5
    10e0:	54 e0       	ldi	r21, 0x04	; 4
    10e2:	4e 17       	cp	r20, r30
    10e4:	5f 07       	cpc	r21, r31
    10e6:	11 f7       	brne	.-60     	; 0x10ac <main+0x6ee>
    10e8:	da cf       	rjmp	.-76     	; 0x109e <main+0x6e0>
  {
    // putting first 8*8 portion of display into split1
    for (int i = 0; i < splitrows; i++)
    {
      split1[i] = 0;
      for (int j = 0; j < splitcols; j++)
    10ea:	a6 81       	ldd	r26, Z+6	; 0x06
    10ec:	b7 81       	ldd	r27, Z+7	; 0x07
    10ee:	ba 87       	std	Y+10, r27	; 0x0a
    10f0:	a9 87       	std	Y+9, r26	; 0x09
    10f2:	a3 e9       	ldi	r26, 0x93	; 147
    10f4:	b3 e0       	ldi	r27, 0x03	; 3
    10f6:	62 e7       	ldi	r22, 0x72	; 114
    10f8:	72 e0       	ldi	r23, 0x02	; 2
    10fa:	53 01       	movw	r10, r6
    10fc:	aa 0c       	add	r10, r10
    10fe:	bb 1c       	adc	r11, r11
    1100:	f5 01       	movw	r30, r10
    1102:	ed 56       	subi	r30, 0x6D	; 109
    1104:	fc 4f       	sbci	r31, 0xFC	; 252
    1106:	7f 01       	movw	r14, r30
    1108:	8d 01       	movw	r16, r26
  void split()
  {
    // putting first 8*8 portion of display into split1
    for (int i = 0; i < splitrows; i++)
    {
      split1[i] = 0;
    110a:	11 96       	adiw	r26, 0x01	; 1
    110c:	1c 92       	st	X, r1
    110e:	1e 92       	st	-X, r1
      for (int j = 0; j < splitcols; j++)
    1110:	49 85       	ldd	r20, Y+9	; 0x09
    1112:	5a 85       	ldd	r21, Y+10	; 0x0a
    1114:	14 16       	cp	r1, r20
    1116:	15 06       	cpc	r1, r21
    1118:	b4 f4       	brge	.+44     	; 0x1146 <main+0x788>
    111a:	9a 01       	movw	r18, r20
    111c:	21 50       	subi	r18, 0x01	; 1
    111e:	31 09       	sbc	r19, r1
    1120:	fb 01       	movw	r30, r22
    1122:	40 e0       	ldi	r20, 0x00	; 0
    1124:	50 e0       	ldi	r21, 0x00	; 0
        split1[i] |= (ara[i][j] << (splitcols - 1 - j)); // Using bitmasking to transform columns into a single integer
    1126:	81 91       	ld	r24, Z+
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	02 2e       	mov	r0, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <main+0x774>
    112e:	88 0f       	add	r24, r24
    1130:	99 1f       	adc	r25, r25
    1132:	0a 94       	dec	r0
    1134:	e2 f7       	brpl	.-8      	; 0x112e <main+0x770>
    1136:	48 2b       	or	r20, r24
    1138:	59 2b       	or	r21, r25
    113a:	21 50       	subi	r18, 0x01	; 1
    113c:	31 09       	sbc	r19, r1
    113e:	98 f7       	brcc	.-26     	; 0x1126 <main+0x768>
    1140:	f8 01       	movw	r30, r16
    1142:	51 83       	std	Z+1, r21	; 0x01
    1144:	40 83       	st	Z, r20
    1146:	12 96       	adiw	r26, 0x02	; 2
    1148:	6f 5e       	subi	r22, 0xEF	; 239
    114a:	7f 4f       	sbci	r23, 0xFF	; 255
	}

  void split()
  {
    // putting first 8*8 portion of display into split1
    for (int i = 0; i < splitrows; i++)
    114c:	ae 15       	cp	r26, r14
    114e:	bf 05       	cpc	r27, r15
    1150:	d9 f6       	brne	.-74     	; 0x1108 <main+0x74a>
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
    {
      split2[i] = 0;
      for (int j = cols - splitcols; j < cols; j++)
    1152:	d2 01       	movw	r26, r4
    1154:	12 96       	adiw	r26, 0x02	; 2
    1156:	ed 90       	ld	r14, X+
    1158:	fc 90       	ld	r15, X
    115a:	13 97       	sbiw	r26, 0x03	; 3
    115c:	16 96       	adiw	r26, 0x06	; 6
    115e:	cd 90       	ld	r12, X+
    1160:	dc 90       	ld	r13, X
    1162:	17 97       	sbiw	r26, 0x07	; 7
    1164:	87 01       	movw	r16, r14
    1166:	0c 19       	sub	r16, r12
    1168:	1d 09       	sbc	r17, r13
    116a:	a7 ea       	ldi	r26, 0xA7	; 167
    116c:	b3 e0       	ldi	r27, 0x03	; 3
    116e:	b8 01       	movw	r22, r16
    1170:	6e 58       	subi	r22, 0x8E	; 142
    1172:	7d 4f       	sbci	r23, 0xFD	; 253
    1174:	f5 01       	movw	r30, r10
    1176:	e9 55       	subi	r30, 0x59	; 89
    1178:	fc 4f       	sbci	r31, 0xFC	; 252
    117a:	5f 01       	movw	r10, r30
    117c:	ba 87       	std	Y+10, r27	; 0x0a
    117e:	a9 87       	std	Y+9, r26	; 0x09
        split1[i] |= (ara[i][j] << (splitcols - 1 - j)); // Using bitmasking to transform columns into a single integer
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
    {
      split2[i] = 0;
    1180:	11 96       	adiw	r26, 0x01	; 1
    1182:	1c 92       	st	X, r1
    1184:	1e 92       	st	-X, r1
      for (int j = cols - splitcols; j < cols; j++)
    1186:	0e 15       	cp	r16, r14
    1188:	1f 05       	cpc	r17, r15
    118a:	bc f4       	brge	.+46     	; 0x11ba <main+0x7fc>
    118c:	96 01       	movw	r18, r12
    118e:	21 50       	subi	r18, 0x01	; 1
    1190:	31 09       	sbc	r19, r1
    1192:	fb 01       	movw	r30, r22
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	50 e0       	ldi	r21, 0x00	; 0
        split2[i] |= (ara[i][j] << (cols - j - 1));
    1198:	81 91       	ld	r24, Z+
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	02 2e       	mov	r0, r18
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <main+0x7e6>
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	0a 94       	dec	r0
    11a6:	e2 f7       	brpl	.-8      	; 0x11a0 <main+0x7e2>
    11a8:	48 2b       	or	r20, r24
    11aa:	59 2b       	or	r21, r25
    11ac:	21 50       	subi	r18, 0x01	; 1
    11ae:	31 09       	sbc	r19, r1
    11b0:	98 f7       	brcc	.-26     	; 0x1198 <main+0x7da>
    11b2:	e9 85       	ldd	r30, Y+9	; 0x09
    11b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    11b6:	51 83       	std	Z+1, r21	; 0x01
    11b8:	40 83       	st	Z, r20
    11ba:	12 96       	adiw	r26, 0x02	; 2
    11bc:	6f 5e       	subi	r22, 0xEF	; 239
    11be:	7f 4f       	sbci	r23, 0xFF	; 255
      split1[i] = 0;
      for (int j = 0; j < splitcols; j++)
        split1[i] |= (ara[i][j] << (splitcols - 1 - j)); // Using bitmasking to transform columns into a single integer
    }
    // second portion to split2
    for (int i = 0; i < splitrows; i++)
    11c0:	aa 15       	cp	r26, r10
    11c2:	bb 05       	cpc	r27, r11
    11c4:	d9 f6       	brne	.-74     	; 0x117c <main+0x7be>
      split2[i] = 0;
      for (int j = cols - splitcols; j < cols; j++)
        split2[i] |= (ara[i][j] << (cols - j - 1));
    }
    // split3
    for (int i = rows - splitrows; i < rows; i++)
    11c6:	c4 01       	movw	r24, r8
    11c8:	86 19       	sub	r24, r6
    11ca:	97 09       	sbc	r25, r7
    11cc:	88 15       	cp	r24, r8
    11ce:	99 05       	cpc	r25, r9
    11d0:	0c f0       	brlt	.+2      	; 0x11d4 <main+0x816>
    11d2:	83 c0       	rjmp	.+262    	; 0x12da <main+0x91c>
    {
      split3[i - rows + splitrows] = 0;
      for (int j = 0; j < splitcols; j++)
    11d4:	d2 01       	movw	r26, r4
    11d6:	16 96       	adiw	r26, 0x06	; 6
    11d8:	0d 90       	ld	r0, X+
    11da:	bc 91       	ld	r27, X
    11dc:	a0 2d       	mov	r26, r0
    11de:	ba 87       	std	Y+10, r27	; 0x0a
    11e0:	a9 87       	std	Y+9, r26	; 0x09
    11e2:	dc 01       	movw	r26, r24
    11e4:	a8 19       	sub	r26, r8
    11e6:	b9 09       	sbc	r27, r9
    11e8:	a6 0d       	add	r26, r6
    11ea:	b7 1d       	adc	r27, r7
    11ec:	5d 01       	movw	r10, r26
    11ee:	aa 0c       	add	r10, r10
    11f0:	bb 1c       	adc	r11, r11
    11f2:	d5 01       	movw	r26, r10
    11f4:	a5 54       	subi	r26, 0x45	; 69
    11f6:	bc 4f       	sbci	r27, 0xFC	; 252
    11f8:	e1 e1       	ldi	r30, 0x11	; 17
    11fa:	e8 9f       	mul	r30, r24
    11fc:	40 01       	movw	r8, r0
    11fe:	e9 9f       	mul	r30, r25
    1200:	90 0c       	add	r9, r0
    1202:	11 24       	eor	r1, r1
    1204:	b4 01       	movw	r22, r8
    1206:	6e 58       	subi	r22, 0x8E	; 142
    1208:	7d 4f       	sbci	r23, 0xFD	; 253
    120a:	66 0c       	add	r6, r6
    120c:	77 1c       	adc	r7, r7
    120e:	93 01       	movw	r18, r6
    1210:	25 54       	subi	r18, 0x45	; 69
    1212:	3c 4f       	sbci	r19, 0xFC	; 252
    1214:	79 01       	movw	r14, r18
    1216:	8d 01       	movw	r16, r26
        split2[i] |= (ara[i][j] << (cols - j - 1));
    }
    // split3
    for (int i = rows - splitrows; i < rows; i++)
    {
      split3[i - rows + splitrows] = 0;
    1218:	11 96       	adiw	r26, 0x01	; 1
    121a:	1c 92       	st	X, r1
    121c:	1e 92       	st	-X, r1
      for (int j = 0; j < splitcols; j++)
    121e:	89 85       	ldd	r24, Y+9	; 0x09
    1220:	9a 85       	ldd	r25, Y+10	; 0x0a
    1222:	18 16       	cp	r1, r24
    1224:	19 06       	cpc	r1, r25
    1226:	b4 f4       	brge	.+44     	; 0x1254 <main+0x896>
    1228:	9c 01       	movw	r18, r24
    122a:	21 50       	subi	r18, 0x01	; 1
    122c:	31 09       	sbc	r19, r1
    122e:	fb 01       	movw	r30, r22
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	50 e0       	ldi	r21, 0x00	; 0
        split3[i - rows + splitrows] |= (ara[i][j] << (splitcols - 1 - j));
    1234:	81 91       	ld	r24, Z+
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <main+0x882>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <main+0x87e>
    1244:	48 2b       	or	r20, r24
    1246:	59 2b       	or	r21, r25
    1248:	21 50       	subi	r18, 0x01	; 1
    124a:	31 09       	sbc	r19, r1
    124c:	98 f7       	brcc	.-26     	; 0x1234 <main+0x876>
    124e:	f8 01       	movw	r30, r16
    1250:	51 83       	std	Z+1, r21	; 0x01
    1252:	40 83       	st	Z, r20
    1254:	12 96       	adiw	r26, 0x02	; 2
    1256:	6f 5e       	subi	r22, 0xEF	; 239
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
      split2[i] = 0;
      for (int j = cols - splitcols; j < cols; j++)
        split2[i] |= (ara[i][j] << (cols - j - 1));
    }
    // split3
    for (int i = rows - splitrows; i < rows; i++)
    125a:	ae 15       	cp	r26, r14
    125c:	bf 05       	cpc	r27, r15
    125e:	d9 f6       	brne	.-74     	; 0x1216 <main+0x858>
    }
    // last portion to split4
    for (int i = rows - splitrows; i < rows; i++)
    {
      split4[i - rows + splitrows] = 0;
      for (int j = cols - splitcols; j < cols; j++)
    1260:	d2 01       	movw	r26, r4
    1262:	12 96       	adiw	r26, 0x02	; 2
    1264:	ed 90       	ld	r14, X+
    1266:	fc 90       	ld	r15, X
    1268:	13 97       	sbiw	r26, 0x03	; 3
    126a:	16 96       	adiw	r26, 0x06	; 6
    126c:	cd 90       	ld	r12, X+
    126e:	dc 90       	ld	r13, X
    1270:	17 97       	sbiw	r26, 0x07	; 7
    1272:	87 01       	movw	r16, r14
    1274:	0c 19       	sub	r16, r12
    1276:	1d 09       	sbc	r17, r13
    1278:	d5 01       	movw	r26, r10
    127a:	a1 53       	subi	r26, 0x31	; 49
    127c:	bc 4f       	sbci	r27, 0xFC	; 252
    127e:	b8 01       	movw	r22, r16
    1280:	68 0d       	add	r22, r8
    1282:	79 1d       	adc	r23, r9
    1284:	6e 58       	subi	r22, 0x8E	; 142
    1286:	7d 4f       	sbci	r23, 0xFD	; 253
    1288:	f3 01       	movw	r30, r6
    128a:	e1 53       	subi	r30, 0x31	; 49
    128c:	fc 4f       	sbci	r31, 0xFC	; 252
    128e:	5f 01       	movw	r10, r30
    1290:	ba 87       	std	Y+10, r27	; 0x0a
    1292:	a9 87       	std	Y+9, r26	; 0x09
        split3[i - rows + splitrows] |= (ara[i][j] << (splitcols - 1 - j));
    }
    // last portion to split4
    for (int i = rows - splitrows; i < rows; i++)
    {
      split4[i - rows + splitrows] = 0;
    1294:	11 96       	adiw	r26, 0x01	; 1
    1296:	1c 92       	st	X, r1
    1298:	1e 92       	st	-X, r1
      for (int j = cols - splitcols; j < cols; j++)
    129a:	0e 15       	cp	r16, r14
    129c:	1f 05       	cpc	r17, r15
    129e:	bc f4       	brge	.+46     	; 0x12ce <main+0x910>
    12a0:	96 01       	movw	r18, r12
    12a2:	21 50       	subi	r18, 0x01	; 1
    12a4:	31 09       	sbc	r19, r1
    12a6:	fb 01       	movw	r30, r22
    12a8:	40 e0       	ldi	r20, 0x00	; 0
    12aa:	50 e0       	ldi	r21, 0x00	; 0
        split4[i - rows + splitrows] |= (ara[i][j] << (cols - j - 1));
    12ac:	81 91       	ld	r24, Z+
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <main+0x8fa>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <main+0x8f6>
    12bc:	48 2b       	or	r20, r24
    12be:	59 2b       	or	r21, r25
    12c0:	21 50       	subi	r18, 0x01	; 1
    12c2:	31 09       	sbc	r19, r1
    12c4:	98 f7       	brcc	.-26     	; 0x12ac <main+0x8ee>
    12c6:	e9 85       	ldd	r30, Y+9	; 0x09
    12c8:	fa 85       	ldd	r31, Y+10	; 0x0a
    12ca:	51 83       	std	Z+1, r21	; 0x01
    12cc:	40 83       	st	Z, r20
    12ce:	12 96       	adiw	r26, 0x02	; 2
    12d0:	6f 5e       	subi	r22, 0xEF	; 239
    12d2:	7f 4f       	sbci	r23, 0xFF	; 255
      split3[i - rows + splitrows] = 0;
      for (int j = 0; j < splitcols; j++)
        split3[i - rows + splitrows] |= (ara[i][j] << (splitcols - 1 - j));
    }
    // last portion to split4
    for (int i = rows - splitrows; i < rows; i++)
    12d4:	aa 15       	cp	r26, r10
    12d6:	bb 05       	cpc	r27, r11
    12d8:	d9 f6       	brne	.-74     	; 0x1290 <main+0x8d2>
    12da:	23 e9       	ldi	r18, 0x93	; 147
    12dc:	33 e0       	ldi	r19, 0x03	; 3
    {
      split4[i - rows + splitrows] = 0;
      for (int j = cols - splitcols; j < cols; j++)
    12de:	11 e0       	ldi	r17, 0x01	; 1
    12e0:	3a 87       	std	Y+10, r19	; 0x0a
    12e2:	29 87       	std	Y+9, r18	; 0x09
  void send_to_driver(bool staticState = false)
  {
    split();
    for (uint8_t i = 1; i <= 8; i++)
    {
      select_Load();
    12e4:	0e 94 98 00 	call	0x130	; 0x130 <_Z11select_Loadv>
    12e8:	e9 84       	ldd	r14, Y+9	; 0x09
    12ea:	fa 84       	ldd	r15, Y+10	; 0x0a

      MAX7219_send2(i, split4[i - 1]);
    12ec:	d7 01       	movw	r26, r14
    12ee:	dc 96       	adiw	r26, 0x3c	; 60
    12f0:	6c 91       	ld	r22, X
    12f2:	81 2f       	mov	r24, r17
    12f4:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z13MAX7219_send2hh>
      MAX7219_send2(i, split3[i - 1]);
    12f8:	e9 85       	ldd	r30, Y+9	; 0x09
    12fa:	fa 85       	ldd	r31, Y+10	; 0x0a
    12fc:	60 a5       	ldd	r22, Z+40	; 0x28
    12fe:	81 2f       	mov	r24, r17
    1300:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z13MAX7219_send2hh>
      MAX7219_send2(i, split2[i - 1]);
    1304:	a9 85       	ldd	r26, Y+9	; 0x09
    1306:	ba 85       	ldd	r27, Y+10	; 0x0a
    1308:	54 96       	adiw	r26, 0x14	; 20
    130a:	6c 91       	ld	r22, X
    130c:	81 2f       	mov	r24, r17
    130e:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z13MAX7219_send2hh>
      MAX7219_send2(i, split1[i - 1]);
    1312:	f7 01       	movw	r30, r14
    1314:	60 81       	ld	r22, Z
    1316:	e9 85       	ldd	r30, Y+9	; 0x09
    1318:	fa 85       	ldd	r31, Y+10	; 0x0a
    131a:	32 96       	adiw	r30, 0x02	; 2
    131c:	fa 87       	std	Y+10, r31	; 0x0a
    131e:	e9 87       	std	Y+9, r30	; 0x09
    1320:	81 2f       	mov	r24, r17
    1322:	0e 94 8f 00 	call	0x11e	; 0x11e <_Z13MAX7219_send2hh>

      deSelect_Load();
    1326:	0e 94 9a 00 	call	0x134	; 0x134 <_Z13deSelect_Loadv>
  }

  void send_to_driver(bool staticState = false)
  {
    split();
    for (uint8_t i = 1; i <= 8; i++)
    132a:	1f 5f       	subi	r17, 0xFF	; 255
    132c:	19 30       	cpi	r17, 0x09	; 9
    132e:	d1 f6       	brne	.-76     	; 0x12e4 <main+0x926>
    1330:	f1 e0       	ldi	r31, 0x01	; 1
    1332:	f8 87       	std	Y+8, r31	; 0x08

  void turnoff()
  {
    // Turn off all LEDs
    for (uint8_t i = 1; i <= 8; i++)
      MAX7219_send(i, 0x00);
    1334:	63 2d       	mov	r22, r3
    1336:	88 85       	ldd	r24, Y+8	; 0x08
    1338:	0e 94 6f 00 	call	0xde	; 0xde <_Z12MAX7219_sendhh>
  }

  void turnoff()
  {
    // Turn off all LEDs
    for (uint8_t i = 1; i <= 8; i++)
    133c:	28 85       	ldd	r18, Y+8	; 0x08
    133e:	2f 5f       	subi	r18, 0xFF	; 255
    1340:	28 87       	std	Y+8, r18	; 0x08
    1342:	29 30       	cpi	r18, 0x09	; 9
    1344:	b9 f7       	brne	.-18     	; 0x1334 <main+0x976>

  // Main game loop
  while (1)
  {
    // Read button inputs
    left_button = PINA & (1 << LEFT_BUTTON_PIN);
    1346:	62 2c       	mov	r6, r2
    1348:	3c 81       	ldd	r19, Y+4	; 0x04
    134a:	31 11       	cpse	r19, r1
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <main+0x992>
    134e:	63 2c       	mov	r6, r3
    right_button = PINA & (1 << RIGHT_BUTTON_PIN);
    1350:	72 2c       	mov	r7, r2
    1352:	4f 81       	ldd	r20, Y+7	; 0x07
    1354:	41 11       	cpse	r20, r1
    1356:	01 c0       	rjmp	.+2      	; 0x135a <main+0x99c>
    1358:	73 2c       	mov	r7, r3

    // sending to led driver
    display.send_to_driver();

    // turning off beeper
    PORTA &= ~(1 << SCORE_BUTTON_PIN);
    135a:	da 98       	cbi	0x1b, 2	; 27
    PORTA &= ~(1 << LIFE_BUTTON_PIN);
    135c:	db 98       	cbi	0x1b, 3	; 27
    PORTA &= ~(1 << RESET_BUTTON);
    135e:	dd 98       	cbi	0x1b, 5	; 27
    1360:	81 ee       	ldi	r24, 0xE1	; 225
    1362:	94 e0       	ldi	r25, 0x04	; 4
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	f1 f7       	brne	.-4      	; 0x1364 <main+0x9a6>
    1368:	00 c0       	rjmp	.+0      	; 0x136a <main+0x9ac>
    136a:	00 00       	nop
    136c:	4b cb       	rjmp	.-2410   	; 0xa04 <main+0x46>
    136e:	e7 ee       	ldi	r30, 0xE7	; 231
    1370:	f3 e0       	ldi	r31, 0x03	; 3
    1372:	9c ce       	rjmp	.-712    	; 0x10ac <main+0x6ee>

00001374 <_GLOBAL__sub_I__Z5resetv>:
//                                     {0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0},
//                                     {1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0}};
bool bricks[dimension][dimension];
// put brick in the display anywhere

struct Wall
    1374:	e5 e1       	ldi	r30, 0x15	; 21
    1376:	f4 e0       	ldi	r31, 0x04	; 4
    1378:	11 82       	std	Z+1, r1	; 0x01
    137a:	10 82       	st	Z, r1
    137c:	8f e0       	ldi	r24, 0x0F	; 15
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	93 83       	std	Z+3, r25	; 0x03
    1382:	82 83       	std	Z+2, r24	; 0x02
    1384:	15 82       	std	Z+5, r1	; 0x05
    1386:	14 82       	std	Z+4, r1	; 0x04
    1388:	97 83       	std	Z+7, r25	; 0x07
    138a:	86 83       	std	Z+6, r24	; 0x06
  int row;

  void init() { position = wall.center_col(); }
  Paddle()
  {
    size = 5;
    138c:	ef e0       	ldi	r30, 0x0F	; 15
    138e:	f4 e0       	ldi	r31, 0x04	; 4
    1390:	25 e0       	ldi	r18, 0x05	; 5
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	33 83       	std	Z+3, r19	; 0x03
    1396:	22 83       	std	Z+2, r18	; 0x02
    row = wall.down;
    1398:	95 83       	std	Z+5, r25	; 0x05
    139a:	84 83       	std	Z+4, r24	; 0x04
{
  int position; // position of the center of the paddle
  int size;
  int row;

  void init() { position = wall.center_col(); }
    139c:	27 e0       	ldi	r18, 0x07	; 7
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	31 83       	std	Z+1, r19	; 0x01
    13a2:	20 83       	st	Z, r18
  int row, col;
  int row_dir, col_dir;

  void init() // sets the starting position of the ball
  {
    row = wall.down;
    13a4:	e7 e0       	ldi	r30, 0x07	; 7
    13a6:	f4 e0       	ldi	r31, 0x04	; 4
    13a8:	91 83       	std	Z+1, r25	; 0x01
    13aa:	80 83       	st	Z, r24
    col = paddle.position;
    13ac:	33 83       	std	Z+3, r19	; 0x03
    13ae:	22 83       	std	Z+2, r18	; 0x02
    row_dir = -1;
    13b0:	8f ef       	ldi	r24, 0xFF	; 255
    13b2:	9f ef       	ldi	r25, 0xFF	; 255
    13b4:	95 83       	std	Z+5, r25	; 0x05
    13b6:	84 83       	std	Z+4, r24	; 0x04
    col_dir = 0;
    13b8:	17 82       	std	Z+7, r1	; 0x07
    13ba:	16 82       	std	Z+6, r1	; 0x06
  {
    for (int i = 0; i < rows; ++i)
      for (int j = 0; j < cols; ++j)
        ara[i][j] = ara1[i][j];
  }
  Display() { resetArray(); } // initializing with 0
    13bc:	ea e6       	ldi	r30, 0x6A	; 106
    13be:	f2 e0       	ldi	r31, 0x02	; 2
    13c0:	80 e1       	ldi	r24, 0x10	; 16
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	80 83       	st	Z, r24
    13c8:	93 83       	std	Z+3, r25	; 0x03
    13ca:	82 83       	std	Z+2, r24	; 0x02
    13cc:	88 e0       	ldi	r24, 0x08	; 8
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	95 83       	std	Z+5, r25	; 0x05
    13d2:	84 83       	std	Z+4, r24	; 0x04
    13d4:	97 83       	std	Z+7, r25	; 0x07
    13d6:	86 83       	std	Z+6, r24	; 0x06
    13d8:	22 e7       	ldi	r18, 0x72	; 114
    13da:	32 e0       	ldi	r19, 0x02	; 2
    13dc:	42 e8       	ldi	r20, 0x82	; 130
    13de:	53 e0       	ldi	r21, 0x03	; 3
    13e0:	c9 01       	movw	r24, r18
    13e2:	40 96       	adiw	r24, 0x10	; 16
    // Adjusted delay for slower game execution
    _delay_ms(5);
  }

  return 0;
}
    13e4:	f9 01       	movw	r30, r18

  void resetArray()
  {
    for (int i = 0; i < rows; ++i)
      for (int j = 0; j < cols; ++j)
        ara[i][j] = 0;
    13e6:	11 92       	st	Z+, r1
  int split4[10]; // 10 for out_of_bound safety

  void resetArray()
  {
    for (int i = 0; i < rows; ++i)
      for (int j = 0; j < cols; ++j)
    13e8:	e8 17       	cp	r30, r24
    13ea:	f9 07       	cpc	r31, r25
    13ec:	e1 f7       	brne	.-8      	; 0x13e6 <_GLOBAL__sub_I__Z5resetv+0x72>
    13ee:	2f 5e       	subi	r18, 0xEF	; 239
    13f0:	3f 4f       	sbci	r19, 0xFF	; 255
  int split3[10];
  int split4[10]; // 10 for out_of_bound safety

  void resetArray()
  {
    for (int i = 0; i < rows; ++i)
    13f2:	24 17       	cp	r18, r20
    13f4:	35 07       	cpc	r19, r21
    13f6:	a1 f7       	brne	.-24     	; 0x13e0 <_GLOBAL__sub_I__Z5resetv+0x6c>
    // Adjusted delay for slower game execution
    _delay_ms(5);
  }

  return 0;
}
    13f8:	08 95       	ret

000013fa <__subsf3>:
    13fa:	50 58       	subi	r21, 0x80	; 128

000013fc <__addsf3>:
    13fc:	bb 27       	eor	r27, r27
    13fe:	aa 27       	eor	r26, r26
    1400:	0e 94 15 0a 	call	0x142a	; 0x142a <__addsf3x>
    1404:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_round>
    1408:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fp_pscA>
    140c:	38 f0       	brcs	.+14     	; 0x141c <__addsf3+0x20>
    140e:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fp_pscB>
    1412:	20 f0       	brcs	.+8      	; 0x141c <__addsf3+0x20>
    1414:	39 f4       	brne	.+14     	; 0x1424 <__addsf3+0x28>
    1416:	9f 3f       	cpi	r25, 0xFF	; 255
    1418:	19 f4       	brne	.+6      	; 0x1420 <__addsf3+0x24>
    141a:	26 f4       	brtc	.+8      	; 0x1424 <__addsf3+0x28>
    141c:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__fp_nan>
    1420:	0e f4       	brtc	.+2      	; 0x1424 <__addsf3+0x28>
    1422:	e0 95       	com	r30
    1424:	e7 fb       	bst	r30, 7
    1426:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__fp_inf>

0000142a <__addsf3x>:
    142a:	e9 2f       	mov	r30, r25
    142c:	0e 94 41 0b 	call	0x1682	; 0x1682 <__fp_split3>
    1430:	58 f3       	brcs	.-42     	; 0x1408 <__addsf3+0xc>
    1432:	ba 17       	cp	r27, r26
    1434:	62 07       	cpc	r22, r18
    1436:	73 07       	cpc	r23, r19
    1438:	84 07       	cpc	r24, r20
    143a:	95 07       	cpc	r25, r21
    143c:	20 f0       	brcs	.+8      	; 0x1446 <__addsf3x+0x1c>
    143e:	79 f4       	brne	.+30     	; 0x145e <__addsf3x+0x34>
    1440:	a6 f5       	brtc	.+104    	; 0x14aa <__addsf3x+0x80>
    1442:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <__fp_zero>
    1446:	0e f4       	brtc	.+2      	; 0x144a <__addsf3x+0x20>
    1448:	e0 95       	com	r30
    144a:	0b 2e       	mov	r0, r27
    144c:	ba 2f       	mov	r27, r26
    144e:	a0 2d       	mov	r26, r0
    1450:	0b 01       	movw	r0, r22
    1452:	b9 01       	movw	r22, r18
    1454:	90 01       	movw	r18, r0
    1456:	0c 01       	movw	r0, r24
    1458:	ca 01       	movw	r24, r20
    145a:	a0 01       	movw	r20, r0
    145c:	11 24       	eor	r1, r1
    145e:	ff 27       	eor	r31, r31
    1460:	59 1b       	sub	r21, r25
    1462:	99 f0       	breq	.+38     	; 0x148a <__addsf3x+0x60>
    1464:	59 3f       	cpi	r21, 0xF9	; 249
    1466:	50 f4       	brcc	.+20     	; 0x147c <__addsf3x+0x52>
    1468:	50 3e       	cpi	r21, 0xE0	; 224
    146a:	68 f1       	brcs	.+90     	; 0x14c6 <__addsf3x+0x9c>
    146c:	1a 16       	cp	r1, r26
    146e:	f0 40       	sbci	r31, 0x00	; 0
    1470:	a2 2f       	mov	r26, r18
    1472:	23 2f       	mov	r18, r19
    1474:	34 2f       	mov	r19, r20
    1476:	44 27       	eor	r20, r20
    1478:	58 5f       	subi	r21, 0xF8	; 248
    147a:	f3 cf       	rjmp	.-26     	; 0x1462 <__addsf3x+0x38>
    147c:	46 95       	lsr	r20
    147e:	37 95       	ror	r19
    1480:	27 95       	ror	r18
    1482:	a7 95       	ror	r26
    1484:	f0 40       	sbci	r31, 0x00	; 0
    1486:	53 95       	inc	r21
    1488:	c9 f7       	brne	.-14     	; 0x147c <__addsf3x+0x52>
    148a:	7e f4       	brtc	.+30     	; 0x14aa <__addsf3x+0x80>
    148c:	1f 16       	cp	r1, r31
    148e:	ba 0b       	sbc	r27, r26
    1490:	62 0b       	sbc	r22, r18
    1492:	73 0b       	sbc	r23, r19
    1494:	84 0b       	sbc	r24, r20
    1496:	ba f0       	brmi	.+46     	; 0x14c6 <__addsf3x+0x9c>
    1498:	91 50       	subi	r25, 0x01	; 1
    149a:	a1 f0       	breq	.+40     	; 0x14c4 <__addsf3x+0x9a>
    149c:	ff 0f       	add	r31, r31
    149e:	bb 1f       	adc	r27, r27
    14a0:	66 1f       	adc	r22, r22
    14a2:	77 1f       	adc	r23, r23
    14a4:	88 1f       	adc	r24, r24
    14a6:	c2 f7       	brpl	.-16     	; 0x1498 <__addsf3x+0x6e>
    14a8:	0e c0       	rjmp	.+28     	; 0x14c6 <__addsf3x+0x9c>
    14aa:	ba 0f       	add	r27, r26
    14ac:	62 1f       	adc	r22, r18
    14ae:	73 1f       	adc	r23, r19
    14b0:	84 1f       	adc	r24, r20
    14b2:	48 f4       	brcc	.+18     	; 0x14c6 <__addsf3x+0x9c>
    14b4:	87 95       	ror	r24
    14b6:	77 95       	ror	r23
    14b8:	67 95       	ror	r22
    14ba:	b7 95       	ror	r27
    14bc:	f7 95       	ror	r31
    14be:	9e 3f       	cpi	r25, 0xFE	; 254
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <__addsf3x+0x9a>
    14c2:	b0 cf       	rjmp	.-160    	; 0x1424 <__addsf3+0x28>
    14c4:	93 95       	inc	r25
    14c6:	88 0f       	add	r24, r24
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <__addsf3x+0xa2>
    14ca:	99 27       	eor	r25, r25
    14cc:	ee 0f       	add	r30, r30
    14ce:	97 95       	ror	r25
    14d0:	87 95       	ror	r24
    14d2:	08 95       	ret

000014d4 <__divsf3>:
    14d4:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <__divsf3x>
    14d8:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_round>
    14dc:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fp_pscB>
    14e0:	58 f0       	brcs	.+22     	; 0x14f8 <__divsf3+0x24>
    14e2:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fp_pscA>
    14e6:	40 f0       	brcs	.+16     	; 0x14f8 <__divsf3+0x24>
    14e8:	29 f4       	brne	.+10     	; 0x14f4 <__divsf3+0x20>
    14ea:	5f 3f       	cpi	r21, 0xFF	; 255
    14ec:	29 f0       	breq	.+10     	; 0x14f8 <__divsf3+0x24>
    14ee:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__fp_inf>
    14f2:	51 11       	cpse	r21, r1
    14f4:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_szero>
    14f8:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__fp_nan>

000014fc <__divsf3x>:
    14fc:	0e 94 41 0b 	call	0x1682	; 0x1682 <__fp_split3>
    1500:	68 f3       	brcs	.-38     	; 0x14dc <__divsf3+0x8>

00001502 <__divsf3_pse>:
    1502:	99 23       	and	r25, r25
    1504:	b1 f3       	breq	.-20     	; 0x14f2 <__divsf3+0x1e>
    1506:	55 23       	and	r21, r21
    1508:	91 f3       	breq	.-28     	; 0x14ee <__divsf3+0x1a>
    150a:	95 1b       	sub	r25, r21
    150c:	55 0b       	sbc	r21, r21
    150e:	bb 27       	eor	r27, r27
    1510:	aa 27       	eor	r26, r26
    1512:	62 17       	cp	r22, r18
    1514:	73 07       	cpc	r23, r19
    1516:	84 07       	cpc	r24, r20
    1518:	38 f0       	brcs	.+14     	; 0x1528 <__divsf3_pse+0x26>
    151a:	9f 5f       	subi	r25, 0xFF	; 255
    151c:	5f 4f       	sbci	r21, 0xFF	; 255
    151e:	22 0f       	add	r18, r18
    1520:	33 1f       	adc	r19, r19
    1522:	44 1f       	adc	r20, r20
    1524:	aa 1f       	adc	r26, r26
    1526:	a9 f3       	breq	.-22     	; 0x1512 <__divsf3_pse+0x10>
    1528:	35 d0       	rcall	.+106    	; 0x1594 <__divsf3_pse+0x92>
    152a:	0e 2e       	mov	r0, r30
    152c:	3a f0       	brmi	.+14     	; 0x153c <__divsf3_pse+0x3a>
    152e:	e0 e8       	ldi	r30, 0x80	; 128
    1530:	32 d0       	rcall	.+100    	; 0x1596 <__divsf3_pse+0x94>
    1532:	91 50       	subi	r25, 0x01	; 1
    1534:	50 40       	sbci	r21, 0x00	; 0
    1536:	e6 95       	lsr	r30
    1538:	00 1c       	adc	r0, r0
    153a:	ca f7       	brpl	.-14     	; 0x152e <__divsf3_pse+0x2c>
    153c:	2b d0       	rcall	.+86     	; 0x1594 <__divsf3_pse+0x92>
    153e:	fe 2f       	mov	r31, r30
    1540:	29 d0       	rcall	.+82     	; 0x1594 <__divsf3_pse+0x92>
    1542:	66 0f       	add	r22, r22
    1544:	77 1f       	adc	r23, r23
    1546:	88 1f       	adc	r24, r24
    1548:	bb 1f       	adc	r27, r27
    154a:	26 17       	cp	r18, r22
    154c:	37 07       	cpc	r19, r23
    154e:	48 07       	cpc	r20, r24
    1550:	ab 07       	cpc	r26, r27
    1552:	b0 e8       	ldi	r27, 0x80	; 128
    1554:	09 f0       	breq	.+2      	; 0x1558 <__divsf3_pse+0x56>
    1556:	bb 0b       	sbc	r27, r27
    1558:	80 2d       	mov	r24, r0
    155a:	bf 01       	movw	r22, r30
    155c:	ff 27       	eor	r31, r31
    155e:	93 58       	subi	r25, 0x83	; 131
    1560:	5f 4f       	sbci	r21, 0xFF	; 255
    1562:	3a f0       	brmi	.+14     	; 0x1572 <__divsf3_pse+0x70>
    1564:	9e 3f       	cpi	r25, 0xFE	; 254
    1566:	51 05       	cpc	r21, r1
    1568:	78 f0       	brcs	.+30     	; 0x1588 <__divsf3_pse+0x86>
    156a:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__fp_inf>
    156e:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_szero>
    1572:	5f 3f       	cpi	r21, 0xFF	; 255
    1574:	e4 f3       	brlt	.-8      	; 0x156e <__divsf3_pse+0x6c>
    1576:	98 3e       	cpi	r25, 0xE8	; 232
    1578:	d4 f3       	brlt	.-12     	; 0x156e <__divsf3_pse+0x6c>
    157a:	86 95       	lsr	r24
    157c:	77 95       	ror	r23
    157e:	67 95       	ror	r22
    1580:	b7 95       	ror	r27
    1582:	f7 95       	ror	r31
    1584:	9f 5f       	subi	r25, 0xFF	; 255
    1586:	c9 f7       	brne	.-14     	; 0x157a <__divsf3_pse+0x78>
    1588:	88 0f       	add	r24, r24
    158a:	91 1d       	adc	r25, r1
    158c:	96 95       	lsr	r25
    158e:	87 95       	ror	r24
    1590:	97 f9       	bld	r25, 7
    1592:	08 95       	ret
    1594:	e1 e0       	ldi	r30, 0x01	; 1
    1596:	66 0f       	add	r22, r22
    1598:	77 1f       	adc	r23, r23
    159a:	88 1f       	adc	r24, r24
    159c:	bb 1f       	adc	r27, r27
    159e:	62 17       	cp	r22, r18
    15a0:	73 07       	cpc	r23, r19
    15a2:	84 07       	cpc	r24, r20
    15a4:	ba 07       	cpc	r27, r26
    15a6:	20 f0       	brcs	.+8      	; 0x15b0 <__divsf3_pse+0xae>
    15a8:	62 1b       	sub	r22, r18
    15aa:	73 0b       	sbc	r23, r19
    15ac:	84 0b       	sbc	r24, r20
    15ae:	ba 0b       	sbc	r27, r26
    15b0:	ee 1f       	adc	r30, r30
    15b2:	88 f7       	brcc	.-30     	; 0x1596 <__divsf3_pse+0x94>
    15b4:	e0 95       	com	r30
    15b6:	08 95       	ret

000015b8 <__floatunsisf>:
    15b8:	e8 94       	clt
    15ba:	09 c0       	rjmp	.+18     	; 0x15ce <__floatsisf+0x12>

000015bc <__floatsisf>:
    15bc:	97 fb       	bst	r25, 7
    15be:	3e f4       	brtc	.+14     	; 0x15ce <__floatsisf+0x12>
    15c0:	90 95       	com	r25
    15c2:	80 95       	com	r24
    15c4:	70 95       	com	r23
    15c6:	61 95       	neg	r22
    15c8:	7f 4f       	sbci	r23, 0xFF	; 255
    15ca:	8f 4f       	sbci	r24, 0xFF	; 255
    15cc:	9f 4f       	sbci	r25, 0xFF	; 255
    15ce:	99 23       	and	r25, r25
    15d0:	a9 f0       	breq	.+42     	; 0x15fc <__floatsisf+0x40>
    15d2:	f9 2f       	mov	r31, r25
    15d4:	96 e9       	ldi	r25, 0x96	; 150
    15d6:	bb 27       	eor	r27, r27
    15d8:	93 95       	inc	r25
    15da:	f6 95       	lsr	r31
    15dc:	87 95       	ror	r24
    15de:	77 95       	ror	r23
    15e0:	67 95       	ror	r22
    15e2:	b7 95       	ror	r27
    15e4:	f1 11       	cpse	r31, r1
    15e6:	f8 cf       	rjmp	.-16     	; 0x15d8 <__floatsisf+0x1c>
    15e8:	fa f4       	brpl	.+62     	; 0x1628 <__floatsisf+0x6c>
    15ea:	bb 0f       	add	r27, r27
    15ec:	11 f4       	brne	.+4      	; 0x15f2 <__floatsisf+0x36>
    15ee:	60 ff       	sbrs	r22, 0
    15f0:	1b c0       	rjmp	.+54     	; 0x1628 <__floatsisf+0x6c>
    15f2:	6f 5f       	subi	r22, 0xFF	; 255
    15f4:	7f 4f       	sbci	r23, 0xFF	; 255
    15f6:	8f 4f       	sbci	r24, 0xFF	; 255
    15f8:	9f 4f       	sbci	r25, 0xFF	; 255
    15fa:	16 c0       	rjmp	.+44     	; 0x1628 <__floatsisf+0x6c>
    15fc:	88 23       	and	r24, r24
    15fe:	11 f0       	breq	.+4      	; 0x1604 <__floatsisf+0x48>
    1600:	96 e9       	ldi	r25, 0x96	; 150
    1602:	11 c0       	rjmp	.+34     	; 0x1626 <__floatsisf+0x6a>
    1604:	77 23       	and	r23, r23
    1606:	21 f0       	breq	.+8      	; 0x1610 <__floatsisf+0x54>
    1608:	9e e8       	ldi	r25, 0x8E	; 142
    160a:	87 2f       	mov	r24, r23
    160c:	76 2f       	mov	r23, r22
    160e:	05 c0       	rjmp	.+10     	; 0x161a <__floatsisf+0x5e>
    1610:	66 23       	and	r22, r22
    1612:	71 f0       	breq	.+28     	; 0x1630 <__floatsisf+0x74>
    1614:	96 e8       	ldi	r25, 0x86	; 134
    1616:	86 2f       	mov	r24, r22
    1618:	70 e0       	ldi	r23, 0x00	; 0
    161a:	60 e0       	ldi	r22, 0x00	; 0
    161c:	2a f0       	brmi	.+10     	; 0x1628 <__floatsisf+0x6c>
    161e:	9a 95       	dec	r25
    1620:	66 0f       	add	r22, r22
    1622:	77 1f       	adc	r23, r23
    1624:	88 1f       	adc	r24, r24
    1626:	da f7       	brpl	.-10     	; 0x161e <__floatsisf+0x62>
    1628:	88 0f       	add	r24, r24
    162a:	96 95       	lsr	r25
    162c:	87 95       	ror	r24
    162e:	97 f9       	bld	r25, 7
    1630:	08 95       	ret

00001632 <__fp_inf>:
    1632:	97 f9       	bld	r25, 7
    1634:	9f 67       	ori	r25, 0x7F	; 127
    1636:	80 e8       	ldi	r24, 0x80	; 128
    1638:	70 e0       	ldi	r23, 0x00	; 0
    163a:	60 e0       	ldi	r22, 0x00	; 0
    163c:	08 95       	ret

0000163e <__fp_nan>:
    163e:	9f ef       	ldi	r25, 0xFF	; 255
    1640:	80 ec       	ldi	r24, 0xC0	; 192
    1642:	08 95       	ret

00001644 <__fp_pscA>:
    1644:	00 24       	eor	r0, r0
    1646:	0a 94       	dec	r0
    1648:	16 16       	cp	r1, r22
    164a:	17 06       	cpc	r1, r23
    164c:	18 06       	cpc	r1, r24
    164e:	09 06       	cpc	r0, r25
    1650:	08 95       	ret

00001652 <__fp_pscB>:
    1652:	00 24       	eor	r0, r0
    1654:	0a 94       	dec	r0
    1656:	12 16       	cp	r1, r18
    1658:	13 06       	cpc	r1, r19
    165a:	14 06       	cpc	r1, r20
    165c:	05 06       	cpc	r0, r21
    165e:	08 95       	ret

00001660 <__fp_round>:
    1660:	09 2e       	mov	r0, r25
    1662:	03 94       	inc	r0
    1664:	00 0c       	add	r0, r0
    1666:	11 f4       	brne	.+4      	; 0x166c <__fp_round+0xc>
    1668:	88 23       	and	r24, r24
    166a:	52 f0       	brmi	.+20     	; 0x1680 <__fp_round+0x20>
    166c:	bb 0f       	add	r27, r27
    166e:	40 f4       	brcc	.+16     	; 0x1680 <__fp_round+0x20>
    1670:	bf 2b       	or	r27, r31
    1672:	11 f4       	brne	.+4      	; 0x1678 <__fp_round+0x18>
    1674:	60 ff       	sbrs	r22, 0
    1676:	04 c0       	rjmp	.+8      	; 0x1680 <__fp_round+0x20>
    1678:	6f 5f       	subi	r22, 0xFF	; 255
    167a:	7f 4f       	sbci	r23, 0xFF	; 255
    167c:	8f 4f       	sbci	r24, 0xFF	; 255
    167e:	9f 4f       	sbci	r25, 0xFF	; 255
    1680:	08 95       	ret

00001682 <__fp_split3>:
    1682:	57 fd       	sbrc	r21, 7
    1684:	90 58       	subi	r25, 0x80	; 128
    1686:	44 0f       	add	r20, r20
    1688:	55 1f       	adc	r21, r21
    168a:	59 f0       	breq	.+22     	; 0x16a2 <__fp_splitA+0x10>
    168c:	5f 3f       	cpi	r21, 0xFF	; 255
    168e:	71 f0       	breq	.+28     	; 0x16ac <__fp_splitA+0x1a>
    1690:	47 95       	ror	r20

00001692 <__fp_splitA>:
    1692:	88 0f       	add	r24, r24
    1694:	97 fb       	bst	r25, 7
    1696:	99 1f       	adc	r25, r25
    1698:	61 f0       	breq	.+24     	; 0x16b2 <__fp_splitA+0x20>
    169a:	9f 3f       	cpi	r25, 0xFF	; 255
    169c:	79 f0       	breq	.+30     	; 0x16bc <__fp_splitA+0x2a>
    169e:	87 95       	ror	r24
    16a0:	08 95       	ret
    16a2:	12 16       	cp	r1, r18
    16a4:	13 06       	cpc	r1, r19
    16a6:	14 06       	cpc	r1, r20
    16a8:	55 1f       	adc	r21, r21
    16aa:	f2 cf       	rjmp	.-28     	; 0x1690 <__fp_split3+0xe>
    16ac:	46 95       	lsr	r20
    16ae:	f1 df       	rcall	.-30     	; 0x1692 <__fp_splitA>
    16b0:	08 c0       	rjmp	.+16     	; 0x16c2 <__fp_splitA+0x30>
    16b2:	16 16       	cp	r1, r22
    16b4:	17 06       	cpc	r1, r23
    16b6:	18 06       	cpc	r1, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	f1 cf       	rjmp	.-30     	; 0x169e <__fp_splitA+0xc>
    16bc:	86 95       	lsr	r24
    16be:	71 05       	cpc	r23, r1
    16c0:	61 05       	cpc	r22, r1
    16c2:	08 94       	sec
    16c4:	08 95       	ret

000016c6 <__fp_zero>:
    16c6:	e8 94       	clt

000016c8 <__fp_szero>:
    16c8:	bb 27       	eor	r27, r27
    16ca:	66 27       	eor	r22, r22
    16cc:	77 27       	eor	r23, r23
    16ce:	cb 01       	movw	r24, r22
    16d0:	97 f9       	bld	r25, 7
    16d2:	08 95       	ret

000016d4 <__gesf2>:
    16d4:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <__fp_cmp>
    16d8:	08 f4       	brcc	.+2      	; 0x16dc <__gesf2+0x8>
    16da:	8f ef       	ldi	r24, 0xFF	; 255
    16dc:	08 95       	ret

000016de <__mulsf3>:
    16de:	0e 94 82 0b 	call	0x1704	; 0x1704 <__mulsf3x>
    16e2:	0c 94 30 0b 	jmp	0x1660	; 0x1660 <__fp_round>
    16e6:	0e 94 22 0b 	call	0x1644	; 0x1644 <__fp_pscA>
    16ea:	38 f0       	brcs	.+14     	; 0x16fa <__mulsf3+0x1c>
    16ec:	0e 94 29 0b 	call	0x1652	; 0x1652 <__fp_pscB>
    16f0:	20 f0       	brcs	.+8      	; 0x16fa <__mulsf3+0x1c>
    16f2:	95 23       	and	r25, r21
    16f4:	11 f0       	breq	.+4      	; 0x16fa <__mulsf3+0x1c>
    16f6:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__fp_inf>
    16fa:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <__fp_nan>
    16fe:	11 24       	eor	r1, r1
    1700:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_szero>

00001704 <__mulsf3x>:
    1704:	0e 94 41 0b 	call	0x1682	; 0x1682 <__fp_split3>
    1708:	70 f3       	brcs	.-36     	; 0x16e6 <__mulsf3+0x8>

0000170a <__mulsf3_pse>:
    170a:	95 9f       	mul	r25, r21
    170c:	c1 f3       	breq	.-16     	; 0x16fe <__mulsf3+0x20>
    170e:	95 0f       	add	r25, r21
    1710:	50 e0       	ldi	r21, 0x00	; 0
    1712:	55 1f       	adc	r21, r21
    1714:	62 9f       	mul	r22, r18
    1716:	f0 01       	movw	r30, r0
    1718:	72 9f       	mul	r23, r18
    171a:	bb 27       	eor	r27, r27
    171c:	f0 0d       	add	r31, r0
    171e:	b1 1d       	adc	r27, r1
    1720:	63 9f       	mul	r22, r19
    1722:	aa 27       	eor	r26, r26
    1724:	f0 0d       	add	r31, r0
    1726:	b1 1d       	adc	r27, r1
    1728:	aa 1f       	adc	r26, r26
    172a:	64 9f       	mul	r22, r20
    172c:	66 27       	eor	r22, r22
    172e:	b0 0d       	add	r27, r0
    1730:	a1 1d       	adc	r26, r1
    1732:	66 1f       	adc	r22, r22
    1734:	82 9f       	mul	r24, r18
    1736:	22 27       	eor	r18, r18
    1738:	b0 0d       	add	r27, r0
    173a:	a1 1d       	adc	r26, r1
    173c:	62 1f       	adc	r22, r18
    173e:	73 9f       	mul	r23, r19
    1740:	b0 0d       	add	r27, r0
    1742:	a1 1d       	adc	r26, r1
    1744:	62 1f       	adc	r22, r18
    1746:	83 9f       	mul	r24, r19
    1748:	a0 0d       	add	r26, r0
    174a:	61 1d       	adc	r22, r1
    174c:	22 1f       	adc	r18, r18
    174e:	74 9f       	mul	r23, r20
    1750:	33 27       	eor	r19, r19
    1752:	a0 0d       	add	r26, r0
    1754:	61 1d       	adc	r22, r1
    1756:	23 1f       	adc	r18, r19
    1758:	84 9f       	mul	r24, r20
    175a:	60 0d       	add	r22, r0
    175c:	21 1d       	adc	r18, r1
    175e:	82 2f       	mov	r24, r18
    1760:	76 2f       	mov	r23, r22
    1762:	6a 2f       	mov	r22, r26
    1764:	11 24       	eor	r1, r1
    1766:	9f 57       	subi	r25, 0x7F	; 127
    1768:	50 40       	sbci	r21, 0x00	; 0
    176a:	9a f0       	brmi	.+38     	; 0x1792 <__mulsf3_pse+0x88>
    176c:	f1 f0       	breq	.+60     	; 0x17aa <__mulsf3_pse+0xa0>
    176e:	88 23       	and	r24, r24
    1770:	4a f0       	brmi	.+18     	; 0x1784 <__mulsf3_pse+0x7a>
    1772:	ee 0f       	add	r30, r30
    1774:	ff 1f       	adc	r31, r31
    1776:	bb 1f       	adc	r27, r27
    1778:	66 1f       	adc	r22, r22
    177a:	77 1f       	adc	r23, r23
    177c:	88 1f       	adc	r24, r24
    177e:	91 50       	subi	r25, 0x01	; 1
    1780:	50 40       	sbci	r21, 0x00	; 0
    1782:	a9 f7       	brne	.-22     	; 0x176e <__mulsf3_pse+0x64>
    1784:	9e 3f       	cpi	r25, 0xFE	; 254
    1786:	51 05       	cpc	r21, r1
    1788:	80 f0       	brcs	.+32     	; 0x17aa <__mulsf3_pse+0xa0>
    178a:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__fp_inf>
    178e:	0c 94 64 0b 	jmp	0x16c8	; 0x16c8 <__fp_szero>
    1792:	5f 3f       	cpi	r21, 0xFF	; 255
    1794:	e4 f3       	brlt	.-8      	; 0x178e <__mulsf3_pse+0x84>
    1796:	98 3e       	cpi	r25, 0xE8	; 232
    1798:	d4 f3       	brlt	.-12     	; 0x178e <__mulsf3_pse+0x84>
    179a:	86 95       	lsr	r24
    179c:	77 95       	ror	r23
    179e:	67 95       	ror	r22
    17a0:	b7 95       	ror	r27
    17a2:	f7 95       	ror	r31
    17a4:	e7 95       	ror	r30
    17a6:	9f 5f       	subi	r25, 0xFF	; 255
    17a8:	c1 f7       	brne	.-16     	; 0x179a <__mulsf3_pse+0x90>
    17aa:	fe 2b       	or	r31, r30
    17ac:	88 0f       	add	r24, r24
    17ae:	91 1d       	adc	r25, r1
    17b0:	96 95       	lsr	r25
    17b2:	87 95       	ror	r24
    17b4:	97 f9       	bld	r25, 7
    17b6:	08 95       	ret

000017b8 <__fp_cmp>:
    17b8:	99 0f       	add	r25, r25
    17ba:	00 08       	sbc	r0, r0
    17bc:	55 0f       	add	r21, r21
    17be:	aa 0b       	sbc	r26, r26
    17c0:	e0 e8       	ldi	r30, 0x80	; 128
    17c2:	fe ef       	ldi	r31, 0xFE	; 254
    17c4:	16 16       	cp	r1, r22
    17c6:	17 06       	cpc	r1, r23
    17c8:	e8 07       	cpc	r30, r24
    17ca:	f9 07       	cpc	r31, r25
    17cc:	c0 f0       	brcs	.+48     	; 0x17fe <__fp_cmp+0x46>
    17ce:	12 16       	cp	r1, r18
    17d0:	13 06       	cpc	r1, r19
    17d2:	e4 07       	cpc	r30, r20
    17d4:	f5 07       	cpc	r31, r21
    17d6:	98 f0       	brcs	.+38     	; 0x17fe <__fp_cmp+0x46>
    17d8:	62 1b       	sub	r22, r18
    17da:	73 0b       	sbc	r23, r19
    17dc:	84 0b       	sbc	r24, r20
    17de:	95 0b       	sbc	r25, r21
    17e0:	39 f4       	brne	.+14     	; 0x17f0 <__fp_cmp+0x38>
    17e2:	0a 26       	eor	r0, r26
    17e4:	61 f0       	breq	.+24     	; 0x17fe <__fp_cmp+0x46>
    17e6:	23 2b       	or	r18, r19
    17e8:	24 2b       	or	r18, r20
    17ea:	25 2b       	or	r18, r21
    17ec:	21 f4       	brne	.+8      	; 0x17f6 <__fp_cmp+0x3e>
    17ee:	08 95       	ret
    17f0:	0a 26       	eor	r0, r26
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <__fp_cmp+0x3e>
    17f4:	a1 40       	sbci	r26, 0x01	; 1
    17f6:	a6 95       	lsr	r26
    17f8:	8f ef       	ldi	r24, 0xFF	; 255
    17fa:	81 1d       	adc	r24, r1
    17fc:	81 1d       	adc	r24, r1
    17fe:	08 95       	ret

00001800 <__divmodhi4>:
    1800:	97 fb       	bst	r25, 7
    1802:	07 2e       	mov	r0, r23
    1804:	16 f4       	brtc	.+4      	; 0x180a <__divmodhi4+0xa>
    1806:	00 94       	com	r0
    1808:	07 d0       	rcall	.+14     	; 0x1818 <__divmodhi4_neg1>
    180a:	77 fd       	sbrc	r23, 7
    180c:	09 d0       	rcall	.+18     	; 0x1820 <__divmodhi4_neg2>
    180e:	0e 94 14 0c 	call	0x1828	; 0x1828 <__udivmodhi4>
    1812:	07 fc       	sbrc	r0, 7
    1814:	05 d0       	rcall	.+10     	; 0x1820 <__divmodhi4_neg2>
    1816:	3e f4       	brtc	.+14     	; 0x1826 <__divmodhi4_exit>

00001818 <__divmodhi4_neg1>:
    1818:	90 95       	com	r25
    181a:	81 95       	neg	r24
    181c:	9f 4f       	sbci	r25, 0xFF	; 255
    181e:	08 95       	ret

00001820 <__divmodhi4_neg2>:
    1820:	70 95       	com	r23
    1822:	61 95       	neg	r22
    1824:	7f 4f       	sbci	r23, 0xFF	; 255

00001826 <__divmodhi4_exit>:
    1826:	08 95       	ret

00001828 <__udivmodhi4>:
    1828:	aa 1b       	sub	r26, r26
    182a:	bb 1b       	sub	r27, r27
    182c:	51 e1       	ldi	r21, 0x11	; 17
    182e:	07 c0       	rjmp	.+14     	; 0x183e <__udivmodhi4_ep>

00001830 <__udivmodhi4_loop>:
    1830:	aa 1f       	adc	r26, r26
    1832:	bb 1f       	adc	r27, r27
    1834:	a6 17       	cp	r26, r22
    1836:	b7 07       	cpc	r27, r23
    1838:	10 f0       	brcs	.+4      	; 0x183e <__udivmodhi4_ep>
    183a:	a6 1b       	sub	r26, r22
    183c:	b7 0b       	sbc	r27, r23

0000183e <__udivmodhi4_ep>:
    183e:	88 1f       	adc	r24, r24
    1840:	99 1f       	adc	r25, r25
    1842:	5a 95       	dec	r21
    1844:	a9 f7       	brne	.-22     	; 0x1830 <__udivmodhi4_loop>
    1846:	80 95       	com	r24
    1848:	90 95       	com	r25
    184a:	bc 01       	movw	r22, r24
    184c:	cd 01       	movw	r24, r26
    184e:	08 95       	ret

00001850 <__tablejump2__>:
    1850:	ee 0f       	add	r30, r30
    1852:	ff 1f       	adc	r31, r31
    1854:	05 90       	lpm	r0, Z+
    1856:	f4 91       	lpm	r31, Z
    1858:	e0 2d       	mov	r30, r0
    185a:	09 94       	ijmp

0000185c <do_rand>:
    185c:	8f 92       	push	r8
    185e:	9f 92       	push	r9
    1860:	af 92       	push	r10
    1862:	bf 92       	push	r11
    1864:	cf 92       	push	r12
    1866:	df 92       	push	r13
    1868:	ef 92       	push	r14
    186a:	ff 92       	push	r15
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	ec 01       	movw	r28, r24
    1872:	68 81       	ld	r22, Y
    1874:	79 81       	ldd	r23, Y+1	; 0x01
    1876:	8a 81       	ldd	r24, Y+2	; 0x02
    1878:	9b 81       	ldd	r25, Y+3	; 0x03
    187a:	61 15       	cp	r22, r1
    187c:	71 05       	cpc	r23, r1
    187e:	81 05       	cpc	r24, r1
    1880:	91 05       	cpc	r25, r1
    1882:	21 f4       	brne	.+8      	; 0x188c <do_rand+0x30>
    1884:	64 e2       	ldi	r22, 0x24	; 36
    1886:	79 ed       	ldi	r23, 0xD9	; 217
    1888:	8b e5       	ldi	r24, 0x5B	; 91
    188a:	97 e0       	ldi	r25, 0x07	; 7
    188c:	2d e1       	ldi	r18, 0x1D	; 29
    188e:	33 ef       	ldi	r19, 0xF3	; 243
    1890:	41 e0       	ldi	r20, 0x01	; 1
    1892:	50 e0       	ldi	r21, 0x00	; 0
    1894:	0e 94 8a 0c 	call	0x1914	; 0x1914 <__divmodsi4>
    1898:	49 01       	movw	r8, r18
    189a:	5a 01       	movw	r10, r20
    189c:	9b 01       	movw	r18, r22
    189e:	ac 01       	movw	r20, r24
    18a0:	a7 ea       	ldi	r26, 0xA7	; 167
    18a2:	b1 e4       	ldi	r27, 0x41	; 65
    18a4:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__muluhisi3>
    18a8:	6b 01       	movw	r12, r22
    18aa:	7c 01       	movw	r14, r24
    18ac:	ac ee       	ldi	r26, 0xEC	; 236
    18ae:	b4 ef       	ldi	r27, 0xF4	; 244
    18b0:	a5 01       	movw	r20, r10
    18b2:	94 01       	movw	r18, r8
    18b4:	0e 94 b7 0c 	call	0x196e	; 0x196e <__mulohisi3>
    18b8:	dc 01       	movw	r26, r24
    18ba:	cb 01       	movw	r24, r22
    18bc:	8c 0d       	add	r24, r12
    18be:	9d 1d       	adc	r25, r13
    18c0:	ae 1d       	adc	r26, r14
    18c2:	bf 1d       	adc	r27, r15
    18c4:	b7 ff       	sbrs	r27, 7
    18c6:	03 c0       	rjmp	.+6      	; 0x18ce <do_rand+0x72>
    18c8:	01 97       	sbiw	r24, 0x01	; 1
    18ca:	a1 09       	sbc	r26, r1
    18cc:	b0 48       	sbci	r27, 0x80	; 128
    18ce:	88 83       	st	Y, r24
    18d0:	99 83       	std	Y+1, r25	; 0x01
    18d2:	aa 83       	std	Y+2, r26	; 0x02
    18d4:	bb 83       	std	Y+3, r27	; 0x03
    18d6:	9f 77       	andi	r25, 0x7F	; 127
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	ff 90       	pop	r15
    18de:	ef 90       	pop	r14
    18e0:	df 90       	pop	r13
    18e2:	cf 90       	pop	r12
    18e4:	bf 90       	pop	r11
    18e6:	af 90       	pop	r10
    18e8:	9f 90       	pop	r9
    18ea:	8f 90       	pop	r8
    18ec:	08 95       	ret

000018ee <rand_r>:
    18ee:	0e 94 2e 0c 	call	0x185c	; 0x185c <do_rand>
    18f2:	08 95       	ret

000018f4 <rand>:
    18f4:	80 e6       	ldi	r24, 0x60	; 96
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 2e 0c 	call	0x185c	; 0x185c <do_rand>
    18fc:	08 95       	ret

000018fe <srand>:
    18fe:	a0 e0       	ldi	r26, 0x00	; 0
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1906:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    190a:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    190e:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    1912:	08 95       	ret

00001914 <__divmodsi4>:
    1914:	05 2e       	mov	r0, r21
    1916:	97 fb       	bst	r25, 7
    1918:	1e f4       	brtc	.+6      	; 0x1920 <__divmodsi4+0xc>
    191a:	00 94       	com	r0
    191c:	0e 94 a1 0c 	call	0x1942	; 0x1942 <__negsi2>
    1920:	57 fd       	sbrc	r21, 7
    1922:	07 d0       	rcall	.+14     	; 0x1932 <__divmodsi4_neg2>
    1924:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__udivmodsi4>
    1928:	07 fc       	sbrc	r0, 7
    192a:	03 d0       	rcall	.+6      	; 0x1932 <__divmodsi4_neg2>
    192c:	4e f4       	brtc	.+18     	; 0x1940 <__divmodsi4_exit>
    192e:	0c 94 a1 0c 	jmp	0x1942	; 0x1942 <__negsi2>

00001932 <__divmodsi4_neg2>:
    1932:	50 95       	com	r21
    1934:	40 95       	com	r20
    1936:	30 95       	com	r19
    1938:	21 95       	neg	r18
    193a:	3f 4f       	sbci	r19, 0xFF	; 255
    193c:	4f 4f       	sbci	r20, 0xFF	; 255
    193e:	5f 4f       	sbci	r21, 0xFF	; 255

00001940 <__divmodsi4_exit>:
    1940:	08 95       	ret

00001942 <__negsi2>:
    1942:	90 95       	com	r25
    1944:	80 95       	com	r24
    1946:	70 95       	com	r23
    1948:	61 95       	neg	r22
    194a:	7f 4f       	sbci	r23, 0xFF	; 255
    194c:	8f 4f       	sbci	r24, 0xFF	; 255
    194e:	9f 4f       	sbci	r25, 0xFF	; 255
    1950:	08 95       	ret

00001952 <__muluhisi3>:
    1952:	0e 94 de 0c 	call	0x19bc	; 0x19bc <__umulhisi3>
    1956:	a5 9f       	mul	r26, r21
    1958:	90 0d       	add	r25, r0
    195a:	b4 9f       	mul	r27, r20
    195c:	90 0d       	add	r25, r0
    195e:	a4 9f       	mul	r26, r20
    1960:	80 0d       	add	r24, r0
    1962:	91 1d       	adc	r25, r1
    1964:	11 24       	eor	r1, r1
    1966:	08 95       	ret

00001968 <__mulshisi3>:
    1968:	b7 ff       	sbrs	r27, 7
    196a:	0c 94 a9 0c 	jmp	0x1952	; 0x1952 <__muluhisi3>

0000196e <__mulohisi3>:
    196e:	0e 94 a9 0c 	call	0x1952	; 0x1952 <__muluhisi3>
    1972:	82 1b       	sub	r24, r18
    1974:	93 0b       	sbc	r25, r19
    1976:	08 95       	ret

00001978 <__udivmodsi4>:
    1978:	a1 e2       	ldi	r26, 0x21	; 33
    197a:	1a 2e       	mov	r1, r26
    197c:	aa 1b       	sub	r26, r26
    197e:	bb 1b       	sub	r27, r27
    1980:	fd 01       	movw	r30, r26
    1982:	0d c0       	rjmp	.+26     	; 0x199e <__udivmodsi4_ep>

00001984 <__udivmodsi4_loop>:
    1984:	aa 1f       	adc	r26, r26
    1986:	bb 1f       	adc	r27, r27
    1988:	ee 1f       	adc	r30, r30
    198a:	ff 1f       	adc	r31, r31
    198c:	a2 17       	cp	r26, r18
    198e:	b3 07       	cpc	r27, r19
    1990:	e4 07       	cpc	r30, r20
    1992:	f5 07       	cpc	r31, r21
    1994:	20 f0       	brcs	.+8      	; 0x199e <__udivmodsi4_ep>
    1996:	a2 1b       	sub	r26, r18
    1998:	b3 0b       	sbc	r27, r19
    199a:	e4 0b       	sbc	r30, r20
    199c:	f5 0b       	sbc	r31, r21

0000199e <__udivmodsi4_ep>:
    199e:	66 1f       	adc	r22, r22
    19a0:	77 1f       	adc	r23, r23
    19a2:	88 1f       	adc	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	1a 94       	dec	r1
    19a8:	69 f7       	brne	.-38     	; 0x1984 <__udivmodsi4_loop>
    19aa:	60 95       	com	r22
    19ac:	70 95       	com	r23
    19ae:	80 95       	com	r24
    19b0:	90 95       	com	r25
    19b2:	9b 01       	movw	r18, r22
    19b4:	ac 01       	movw	r20, r24
    19b6:	bd 01       	movw	r22, r26
    19b8:	cf 01       	movw	r24, r30
    19ba:	08 95       	ret

000019bc <__umulhisi3>:
    19bc:	a2 9f       	mul	r26, r18
    19be:	b0 01       	movw	r22, r0
    19c0:	b3 9f       	mul	r27, r19
    19c2:	c0 01       	movw	r24, r0
    19c4:	a3 9f       	mul	r26, r19
    19c6:	70 0d       	add	r23, r0
    19c8:	81 1d       	adc	r24, r1
    19ca:	11 24       	eor	r1, r1
    19cc:	91 1d       	adc	r25, r1
    19ce:	b2 9f       	mul	r27, r18
    19d0:	70 0d       	add	r23, r0
    19d2:	81 1d       	adc	r24, r1
    19d4:	11 24       	eor	r1, r1
    19d6:	91 1d       	adc	r25, r1
    19d8:	08 95       	ret

000019da <_exit>:
    19da:	f8 94       	cli

000019dc <__stop_program>:
    19dc:	ff cf       	rjmp	.-2      	; 0x19dc <__stop_program>
